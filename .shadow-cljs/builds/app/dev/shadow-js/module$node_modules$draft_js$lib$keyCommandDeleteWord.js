["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/keyCommandDeleteWord.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$keyCommandDeleteWord=function(global,process,require,module,exports,shadow$shims){var DraftRemovableWord=require(\"module$node_modules$draft_js$lib$DraftRemovableWord\"),EditorState=require(\"module$node_modules$draft_js$lib$EditorState\"),moveSelectionForward=require(\"module$node_modules$draft_js$lib$moveSelectionForward\"),removeTextWithStrategy=require(\"module$node_modules$draft_js$lib$removeTextWithStrategy\");module.exports=function(editorState){var afterRemoval=\nremoveTextWithStrategy(editorState,function(strategyState){var selection=strategyState.getSelection(),offset=selection.getStartOffset();selection=selection.getStartKey();offset=strategyState.getCurrentContent().getBlockForKey(selection).getText().slice(offset);offset=DraftRemovableWord.getForward(offset);return moveSelectionForward(strategyState,offset.length||1)},\"forward\");return afterRemoval===editorState.getCurrentContent()?editorState:EditorState.push(editorState,afterRemoval,\"remove-range\")}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$keyCommandDeleteWord\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandDeleteWord\n * @format\n * \n */\n\n'use strict';\n\nvar DraftRemovableWord = require('./DraftRemovableWord');\nvar EditorState = require('./EditorState');\n\nvar moveSelectionForward = require('./moveSelectionForward');\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n\n/**\n * Delete the word that is right of the cursor, as well as any spaces or\n * punctuation before the word.\n */\nfunction keyCommandDeleteWord(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var offset = selection.getStartOffset();\n    var key = selection.getStartKey();\n    var content = strategyState.getCurrentContent();\n    var text = content.getBlockForKey(key).getText().slice(offset);\n    var toRemove = DraftRemovableWord.getForward(text);\n\n    // If there are no words in front of the cursor, remove the newline.\n    return moveSelectionForward(strategyState, toRemove.length || 1);\n  }, 'forward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandDeleteWord;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$draft_js$lib$removeTextWithStrategy","~$shadow.js","~$module$node_modules$draft_js$lib$EditorState","~$module$node_modules$draft_js$lib$moveSelectionForward","~$module$node_modules$draft_js$lib$DraftRemovableWord"]],"~:properties",["^5",[]],"~:compiled-at",1532351402147,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$keyCommandDeleteWord.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBvI,IAAIC,mBAAqBJ,OAAA,CAAQ,qDAAR,CAAzB,CACIK,YAAcL,OAAA,CAAQ,8CAAR,CADlB,CAGIM,qBAAuBN,OAAA,CAAQ,uDAAR,CAH3B,CAIIO,uBAAyBP,OAAA,CAAQ,yDAAR,CA0B7BC,OAAAC,QAAA,CApBAM,QAA6B,CAACC,WAAD,CAAc,CACzC,IAAIC;AAAeH,sBAAA,CAAuBE,WAAvB,CAAoC,QAAS,CAACE,aAAD,CAAgB,CAC9E,IAAIC,UAAYD,aAAAE,aAAA,EAAhB,CACIC,OAASF,SAAAG,eAAA,EACTC,UAAAA,CAAMJ,SAAAK,YAAA,EAENC,OAAAA,CADUP,aAAAQ,kBAAAC,EACHC,eAAA,CAAuBL,SAAvB,CAAAM,QAAA,EAAAC,MAAA,CAA4CT,MAA5C,CACPU,OAAAA,CAAWpB,kBAAAqB,WAAA,CAA8BP,MAA9B,CAGf,OAAOZ,qBAAA,CAAqBK,aAArB,CAAoCa,MAAAE,OAApC,EAAuD,CAAvD,CATuE,CAA7D,CAUhB,SAVgB,CAYnB,OAAIhB,aAAJ,GAAqBD,WAAAU,kBAAA,EAArB,CACSV,WADT,CAIOJ,WAAAsB,KAAA,CAAiBlB,WAAjB,CAA8BC,YAA9B,CAA4C,cAA5C,CAjBkC,CA1B4F;\",\n\"sources\":[\"node_modules/draft-js/lib/keyCommandDeleteWord.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$keyCommandDeleteWord\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule keyCommandDeleteWord\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar DraftRemovableWord = require('./DraftRemovableWord');\\nvar EditorState = require('./EditorState');\\n\\nvar moveSelectionForward = require('./moveSelectionForward');\\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\\n\\n/**\\n * Delete the word that is right of the cursor, as well as any spaces or\\n * punctuation before the word.\\n */\\nfunction keyCommandDeleteWord(editorState) {\\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\\n    var selection = strategyState.getSelection();\\n    var offset = selection.getStartOffset();\\n    var key = selection.getStartKey();\\n    var content = strategyState.getCurrentContent();\\n    var text = content.getBlockForKey(key).getText().slice(offset);\\n    var toRemove = DraftRemovableWord.getForward(text);\\n\\n    // If there are no words in front of the cursor, remove the newline.\\n    return moveSelectionForward(strategyState, toRemove.length || 1);\\n  }, 'forward');\\n\\n  if (afterRemoval === editorState.getCurrentContent()) {\\n    return editorState;\\n  }\\n\\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\\n}\\n\\nmodule.exports = keyCommandDeleteWord;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"DraftRemovableWord\",\"EditorState\",\"moveSelectionForward\",\"removeTextWithStrategy\",\"keyCommandDeleteWord\",\"editorState\",\"afterRemoval\",\"strategyState\",\"selection\",\"getSelection\",\"offset\",\"getStartOffset\",\"key\",\"getStartKey\",\"text\",\"getCurrentContent\",\"content\",\"getBlockForKey\",\"getText\",\"slice\",\"toRemove\",\"getForward\",\"length\",\"push\"]\n}\n"]