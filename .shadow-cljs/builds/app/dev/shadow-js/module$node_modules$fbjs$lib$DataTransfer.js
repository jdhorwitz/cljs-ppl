["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/DataTransfer.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$DataTransfer=function(global,process,require,module,exports,shadow$shims){function getFileFromDataTransfer(item){if(\"file\"==item.kind)return item.getAsFile()}var PhotosMimeType=require(\"module$node_modules$fbjs$lib$PhotosMimeType\"),createArrayFromMixed=require(\"module$node_modules$fbjs$lib$createArrayFromMixed\"),emptyFunction=require(\"module$node_modules$fbjs$lib$emptyFunction\"),CR_LF_REGEX=/\\r\\n/g,RICH_TEXT_TYPES={\"text/rtf\":1,\"text/html\":1};global=function(){function DataTransfer(data){if(!(this instanceof\nDataTransfer))throw new TypeError(\"Cannot call a class as a function\");this.data=data;this.types=data.types?createArrayFromMixed(data.types):[]}DataTransfer.prototype.isRichText=function(){return this.getHTML()&&this.getText()?!0:this.isImage()?!1:this.types.some(function(type){return RICH_TEXT_TYPES[type]})};DataTransfer.prototype.getText=function(){var text;this.data.getData&&(this.types.length?-1!=this.types.indexOf(\"text/plain\")&&(text=this.data.getData(\"text/plain\")):text=this.data.getData(\"Text\"));\nreturn text?text.replace(CR_LF_REGEX,\"\\n\"):null};DataTransfer.prototype.getHTML=function(){if(this.data.getData){if(!this.types.length)return this.data.getData(\"Text\");if(-1!=this.types.indexOf(\"text/html\"))return this.data.getData(\"text/html\")}};DataTransfer.prototype.isLink=function(){return this.types.some(function(type){return-1!=type.indexOf(\"Url\")||-1!=type.indexOf(\"text/uri-list\")||type.indexOf(\"text/x-moz-url\")})};DataTransfer.prototype.getLink=function(){return this.data.getData?-1!=this.types.indexOf(\"text/x-moz-url\")?\nthis.data.getData(\"text/x-moz-url\").split(\"\\n\")[0]:-1!=this.types.indexOf(\"text/uri-list\")?this.data.getData(\"text/uri-list\"):this.data.getData(\"url\"):null};DataTransfer.prototype.isImage=function(){if(this.types.some(function(type){return-1!=type.indexOf(\"application/x-moz-file\")}))return!0;for(var items=this.getFiles(),i=0;i<items.length;i++)if(!PhotosMimeType.isImage(items[i].type))return!1;return!0};DataTransfer.prototype.getCount=function(){return this.data.hasOwnProperty(\"items\")?this.data.items.length:\nthis.data.hasOwnProperty(\"mozItemCount\")?this.data.mozItemCount:this.data.files?this.data.files.length:null};DataTransfer.prototype.getFiles=function(){return this.data.items?Array.prototype.slice.call(this.data.items).map(getFileFromDataTransfer).filter(emptyFunction.thatReturnsArgument):this.data.files?Array.prototype.slice.call(this.data.files):[]};DataTransfer.prototype.hasFiles=function(){return 0<this.getFiles().length};return DataTransfer}();module.exports=global}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$DataTransfer\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar PhotosMimeType = require('./PhotosMimeType');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar emptyFunction = require('./emptyFunction');\n\nvar CR_LF_REGEX = new RegExp('\\r\\n', 'g');\nvar LF_ONLY = '\\n';\n\nvar RICH_TEXT_TYPES = {\n  'text/rtf': 1,\n  'text/html': 1\n};\n\n/**\n * If DataTransferItem is a file then return the Blob of data.\n *\n * @param {object} item\n * @return {?blob}\n */\nfunction getFileFromDataTransfer(item) {\n  if (item.kind == 'file') {\n    return item.getAsFile();\n  }\n}\n\nvar DataTransfer = function () {\n  /**\n   * @param {object} data\n   */\n  function DataTransfer(data) {\n    _classCallCheck(this, DataTransfer);\n\n    this.data = data;\n\n    // Types could be DOMStringList or array\n    this.types = data.types ? createArrayFromMixed(data.types) : [];\n  }\n\n  /**\n   * Is this likely to be a rich text data transfer?\n   *\n   * @return {boolean}\n   */\n\n\n  DataTransfer.prototype.isRichText = function isRichText() {\n    // If HTML is available, treat this data as rich text. This way, we avoid\n    // using a pasted image if it is packaged with HTML -- this may occur with\n    // pastes from MS Word, for example.  However this is only rich text if\n    // there's accompanying text.\n    if (this.getHTML() && this.getText()) {\n      return true;\n    }\n\n    // When an image is copied from a preview window, you end up with two\n    // DataTransferItems one of which is a file's metadata as text.  Skip those.\n    if (this.isImage()) {\n      return false;\n    }\n\n    return this.types.some(function (type) {\n      return RICH_TEXT_TYPES[type];\n    });\n  };\n\n  /**\n   * Get raw text.\n   *\n   * @return {?string}\n   */\n\n\n  DataTransfer.prototype.getText = function getText() {\n    var text;\n    if (this.data.getData) {\n      if (!this.types.length) {\n        text = this.data.getData('Text');\n      } else if (this.types.indexOf('text/plain') != -1) {\n        text = this.data.getData('text/plain');\n      }\n    }\n    return text ? text.replace(CR_LF_REGEX, LF_ONLY) : null;\n  };\n\n  /**\n   * Get HTML paste data\n   *\n   * @return {?string}\n   */\n\n\n  DataTransfer.prototype.getHTML = function getHTML() {\n    if (this.data.getData) {\n      if (!this.types.length) {\n        return this.data.getData('Text');\n      } else if (this.types.indexOf('text/html') != -1) {\n        return this.data.getData('text/html');\n      }\n    }\n  };\n\n  /**\n   * Is this a link data transfer?\n   *\n   * @return {boolean}\n   */\n\n\n  DataTransfer.prototype.isLink = function isLink() {\n    return this.types.some(function (type) {\n      return type.indexOf('Url') != -1 || type.indexOf('text/uri-list') != -1 || type.indexOf('text/x-moz-url');\n    });\n  };\n\n  /**\n   * Get a link url.\n   *\n   * @return {?string}\n   */\n\n\n  DataTransfer.prototype.getLink = function getLink() {\n    if (this.data.getData) {\n      if (this.types.indexOf('text/x-moz-url') != -1) {\n        var url = this.data.getData('text/x-moz-url').split('\\n');\n        return url[0];\n      }\n      return this.types.indexOf('text/uri-list') != -1 ? this.data.getData('text/uri-list') : this.data.getData('url');\n    }\n\n    return null;\n  };\n\n  /**\n   * Is this an image data transfer?\n   *\n   * @return {boolean}\n   */\n\n\n  DataTransfer.prototype.isImage = function isImage() {\n    var isImage = this.types.some(function (type) {\n      // Firefox will have a type of application/x-moz-file for images during\n      // dragging\n      return type.indexOf('application/x-moz-file') != -1;\n    });\n\n    if (isImage) {\n      return true;\n    }\n\n    var items = this.getFiles();\n    for (var i = 0; i < items.length; i++) {\n      var type = items[i].type;\n      if (!PhotosMimeType.isImage(type)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  DataTransfer.prototype.getCount = function getCount() {\n    if (this.data.hasOwnProperty('items')) {\n      return this.data.items.length;\n    } else if (this.data.hasOwnProperty('mozItemCount')) {\n      return this.data.mozItemCount;\n    } else if (this.data.files) {\n      return this.data.files.length;\n    }\n    return null;\n  };\n\n  /**\n   * Get files.\n   *\n   * @return {array}\n   */\n\n\n  DataTransfer.prototype.getFiles = function getFiles() {\n    if (this.data.items) {\n      // createArrayFromMixed doesn't properly handle DataTransferItemLists.\n      return Array.prototype.slice.call(this.data.items).map(getFileFromDataTransfer).filter(emptyFunction.thatReturnsArgument);\n    } else if (this.data.files) {\n      return Array.prototype.slice.call(this.data.files);\n    } else {\n      return [];\n    }\n  };\n\n  /**\n   * Are there any files to fetch?\n   *\n   * @return {boolean}\n   */\n\n\n  DataTransfer.prototype.hasFiles = function hasFiles() {\n    return this.getFiles().length > 0;\n  };\n\n  return DataTransfer;\n}();\n\nmodule.exports = DataTransfer;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$createArrayFromMixed","~$shadow.js","~$module$node_modules$fbjs$lib$emptyFunction","~$module$node_modules$fbjs$lib$PhotosMimeType"]],"~:properties",["^5",["getCount","getFiles","getText","isRichText","types","isLink","getHTML","data","isImage","hasFiles","getLink"]],"~:compiled-at",1532351402142,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$DataTransfer.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/fbjs/lib/DataTransfer.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$DataTransfer\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n * @typechecks\\n */\\n\\nvar PhotosMimeType = require('./PhotosMimeType');\\n\\nvar createArrayFromMixed = require('./createArrayFromMixed');\\nvar emptyFunction = require('./emptyFunction');\\n\\nvar CR_LF_REGEX = new RegExp('\\\\r\\\\n', 'g');\\nvar LF_ONLY = '\\\\n';\\n\\nvar RICH_TEXT_TYPES = {\\n  'text/rtf': 1,\\n  'text/html': 1\\n};\\n\\n/**\\n * If DataTransferItem is a file then return the Blob of data.\\n *\\n * @param {object} item\\n * @return {?blob}\\n */\\nfunction getFileFromDataTransfer(item) {\\n  if (item.kind == 'file') {\\n    return item.getAsFile();\\n  }\\n}\\n\\nvar DataTransfer = function () {\\n  /**\\n   * @param {object} data\\n   */\\n  function DataTransfer(data) {\\n    _classCallCheck(this, DataTransfer);\\n\\n    this.data = data;\\n\\n    // Types could be DOMStringList or array\\n    this.types = data.types ? createArrayFromMixed(data.types) : [];\\n  }\\n\\n  /**\\n   * Is this likely to be a rich text data transfer?\\n   *\\n   * @return {boolean}\\n   */\\n\\n\\n  DataTransfer.prototype.isRichText = function isRichText() {\\n    // If HTML is available, treat this data as rich text. This way, we avoid\\n    // using a pasted image if it is packaged with HTML -- this may occur with\\n    // pastes from MS Word, for example.  However this is only rich text if\\n    // there's accompanying text.\\n    if (this.getHTML() && this.getText()) {\\n      return true;\\n    }\\n\\n    // When an image is copied from a preview window, you end up with two\\n    // DataTransferItems one of which is a file's metadata as text.  Skip those.\\n    if (this.isImage()) {\\n      return false;\\n    }\\n\\n    return this.types.some(function (type) {\\n      return RICH_TEXT_TYPES[type];\\n    });\\n  };\\n\\n  /**\\n   * Get raw text.\\n   *\\n   * @return {?string}\\n   */\\n\\n\\n  DataTransfer.prototype.getText = function getText() {\\n    var text;\\n    if (this.data.getData) {\\n      if (!this.types.length) {\\n        text = this.data.getData('Text');\\n      } else if (this.types.indexOf('text/plain') != -1) {\\n        text = this.data.getData('text/plain');\\n      }\\n    }\\n    return text ? text.replace(CR_LF_REGEX, LF_ONLY) : null;\\n  };\\n\\n  /**\\n   * Get HTML paste data\\n   *\\n   * @return {?string}\\n   */\\n\\n\\n  DataTransfer.prototype.getHTML = function getHTML() {\\n    if (this.data.getData) {\\n      if (!this.types.length) {\\n        return this.data.getData('Text');\\n      } else if (this.types.indexOf('text/html') != -1) {\\n        return this.data.getData('text/html');\\n      }\\n    }\\n  };\\n\\n  /**\\n   * Is this a link data transfer?\\n   *\\n   * @return {boolean}\\n   */\\n\\n\\n  DataTransfer.prototype.isLink = function isLink() {\\n    return this.types.some(function (type) {\\n      return type.indexOf('Url') != -1 || type.indexOf('text/uri-list') != -1 || type.indexOf('text/x-moz-url');\\n    });\\n  };\\n\\n  /**\\n   * Get a link url.\\n   *\\n   * @return {?string}\\n   */\\n\\n\\n  DataTransfer.prototype.getLink = function getLink() {\\n    if (this.data.getData) {\\n      if (this.types.indexOf('text/x-moz-url') != -1) {\\n        var url = this.data.getData('text/x-moz-url').split('\\\\n');\\n        return url[0];\\n      }\\n      return this.types.indexOf('text/uri-list') != -1 ? this.data.getData('text/uri-list') : this.data.getData('url');\\n    }\\n\\n    return null;\\n  };\\n\\n  /**\\n   * Is this an image data transfer?\\n   *\\n   * @return {boolean}\\n   */\\n\\n\\n  DataTransfer.prototype.isImage = function isImage() {\\n    var isImage = this.types.some(function (type) {\\n      // Firefox will have a type of application/x-moz-file for images during\\n      // dragging\\n      return type.indexOf('application/x-moz-file') != -1;\\n    });\\n\\n    if (isImage) {\\n      return true;\\n    }\\n\\n    var items = this.getFiles();\\n    for (var i = 0; i < items.length; i++) {\\n      var type = items[i].type;\\n      if (!PhotosMimeType.isImage(type)) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  };\\n\\n  DataTransfer.prototype.getCount = function getCount() {\\n    if (this.data.hasOwnProperty('items')) {\\n      return this.data.items.length;\\n    } else if (this.data.hasOwnProperty('mozItemCount')) {\\n      return this.data.mozItemCount;\\n    } else if (this.data.files) {\\n      return this.data.files.length;\\n    }\\n    return null;\\n  };\\n\\n  /**\\n   * Get files.\\n   *\\n   * @return {array}\\n   */\\n\\n\\n  DataTransfer.prototype.getFiles = function getFiles() {\\n    if (this.data.items) {\\n      // createArrayFromMixed doesn't properly handle DataTransferItemLists.\\n      return Array.prototype.slice.call(this.data.items).map(getFileFromDataTransfer).filter(emptyFunction.thatReturnsArgument);\\n    } else if (this.data.files) {\\n      return Array.prototype.slice.call(this.data.files);\\n    } else {\\n      return [];\\n    }\\n  };\\n\\n  /**\\n   * Are there any files to fetch?\\n   *\\n   * @return {boolean}\\n   */\\n\\n\\n  DataTransfer.prototype.hasFiles = function hasFiles() {\\n    return this.getFiles().length > 0;\\n  };\\n\\n  return DataTransfer;\\n}();\\n\\nmodule.exports = DataTransfer;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getFileFromDataTransfer\",\"item\",\"kind\",\"getAsFile\",\"PhotosMimeType\",\"createArrayFromMixed\",\"emptyFunction\",\"CR_LF_REGEX\",\"RICH_TEXT_TYPES\",\"DataTransfer\",\"data\",\"instance\",\"TypeError\",\"types\",\"prototype\",\"isRichText\",\"DataTransfer.prototype.isRichText\",\"getHTML\",\"getText\",\"isImage\",\"some\",\"type\",\"DataTransfer.prototype.getText\",\"text\",\"getData\",\"length\",\"indexOf\",\"replace\",\"LF_ONLY\",\"DataTransfer.prototype.getHTML\",\"isLink\",\"DataTransfer.prototype.isLink\",\"getLink\",\"DataTransfer.prototype.getLink\",\"split\",\"url\",\"DataTransfer.prototype.isImage\",\"items\",\"getFiles\",\"i\",\"getCount\",\"DataTransfer.prototype.getCount\",\"hasOwnProperty\",\"mozItemCount\",\"files\",\"DataTransfer.prototype.getFiles\",\"Array\",\"slice\",\"call\",\"map\",\"filter\",\"thatReturnsArgument\",\"hasFiles\",\"DataTransfer.prototype.hasFiles\"]\n}\n"]