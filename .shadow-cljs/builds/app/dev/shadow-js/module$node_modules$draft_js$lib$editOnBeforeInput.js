["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/editOnBeforeInput.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$editOnBeforeInput=function(global,process,require,module,exports,shadow$shims){function replaceText(editorState,text,inlineStyle,entityKey){text=DraftModifier.replaceText(editorState.getCurrentContent(),editorState.getSelection(),text,inlineStyle,entityKey);return EditorState.push(editorState,text,\"insert-characters\")}var BlockTree=require(\"module$node_modules$draft_js$lib$BlockTree\"),DraftModifier=require(\"module$node_modules$draft_js$lib$DraftModifier\"),\nEditorState=require(\"module$node_modules$draft_js$lib$EditorState\");process=require(\"module$node_modules$fbjs$lib$UserAgent\");var getEntityKeyForSelection=require(\"module$node_modules$draft_js$lib$getEntityKeyForSelection\"),isEventHandled=require(\"module$node_modules$draft_js$lib$isEventHandled\"),isSelectionAtLeafStart=require(\"module$node_modules$draft_js$lib$isSelectionAtLeafStart\"),nullthrows=require(\"module$node_modules$fbjs$lib$nullthrows\"),setImmediate=require(\"module$node_modules$fbjs$lib$setImmediate\"),\nisFirefox=process.isBrowser(\"Firefox\");module.exports=function(editor,e){void 0!==editor._pendingStateFromBeforeInput&&(editor.update(editor._pendingStateFromBeforeInput),editor._pendingStateFromBeforeInput=void 0);var editorState=editor._latestEditorState,chars=e.data;if(chars)if(editor.props.handleBeforeInput&&isEventHandled(editor.props.handleBeforeInput(chars,editorState)))e.preventDefault();else{var selection=editorState.getSelection(),selectionStart=selection.getStartOffset(),selectionEnd=selection.getEndOffset(),\nanchorKey=selection.getAnchorKey();selection.isCollapsed()?(selection=replaceText(editorState,chars,editorState.getCurrentInlineStyle(),getEntityKeyForSelection(editorState.getCurrentContent(),editorState.getSelection())),selectionEnd=!1,selectionEnd=isSelectionAtLeafStart(editor._latestCommittedEditorState),selectionEnd||(selectionStart=global.getSelection(),selectionStart.anchorNode&&selectionStart.anchorNode.nodeType===Node.TEXT_NODE&&(selectionEnd=selectionStart.anchorNode.parentNode,selectionEnd=\n\"SPAN\"===selectionEnd.nodeName&&selectionEnd.firstChild.nodeType===Node.TEXT_NODE&&-1!==selectionEnd.firstChild.nodeValue.indexOf(\"\\t\"))),selectionEnd||(selectionEnd=BlockTree.getFingerprint(editorState.getBlockTree(anchorKey)),selectionStart=BlockTree.getFingerprint(selection.getBlockTree(anchorKey)),selectionEnd=selectionEnd!==selectionStart),selectionEnd||(selectionEnd=isFirefox&&(\"'\"==chars||\"/\"==chars)),selectionEnd||(selectionEnd=nullthrows(selection.getDirectionMap()).get(anchorKey)!==nullthrows(editorState.getDirectionMap()).get(anchorKey)),\nselectionEnd?(e.preventDefault(),editor.update(selection)):(selection=EditorState.set(selection,{nativelyRenderedContent:selection.getCurrentContent()}),editor._pendingStateFromBeforeInput=selection,setImmediate(function(){void 0!==editor._pendingStateFromBeforeInput&&(editor.update(editor._pendingStateFromBeforeInput),editor._pendingStateFromBeforeInput=void 0)}))):(e.preventDefault(),e=editorState.getCurrentContent().getPlainText().slice(selectionStart,selectionEnd),chars===e?editor.update(EditorState.forceSelection(editorState,\nselection.merge({focusOffset:selectionEnd}))):editor.update(replaceText(editorState,chars,editorState.getCurrentInlineStyle(),getEntityKeyForSelection(editorState.getCurrentContent(),editorState.getSelection()))))}}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$editOnBeforeInput\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBeforeInput\n * @format\n * \n */\n\n'use strict';\n\nvar BlockTree = require('./BlockTree');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar isEventHandled = require('./isEventHandled');\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\nvar nullthrows = require('fbjs/lib/nullthrows');\nvar setImmediate = require('fbjs/lib/setImmediate');\n\n// When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\nvar FF_QUICKFIND_CHAR = \"'\";\nvar FF_QUICKFIND_LINK_CHAR = '/';\nvar isFirefox = UserAgent.isBrowser('Firefox');\n\nfunction mustPreventDefaultForCharacter(character) {\n  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */\nfunction replaceText(editorState, text, inlineStyle, entityKey) {\n  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n  return EditorState.push(editorState, contentState, 'insert-characters');\n}\n\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */\nfunction editOnBeforeInput(editor, e) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n\n  var editorState = editor._latestEditorState;\n\n  var chars = e.data;\n\n  // In some cases (ex: IE ideographic space insertion) no character data\n  // is provided. There's nothing to do when this happens.\n  if (!chars) {\n    return;\n  }\n\n  // Allow the top-level component to handle the insertion manually. This is\n  // useful when triggering interesting behaviors for a character insertion,\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\n  // decorator, or setting a block to be a list item after typing '- ' at the\n  // start of the block.\n  if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState))) {\n    e.preventDefault();\n    return;\n  }\n\n  // If selection is collapsed, conditionally allow native behavior. This\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\n  // is not collapsed, we will re-render.\n  var selection = editorState.getSelection();\n  var selectionStart = selection.getStartOffset();\n  var selectionEnd = selection.getEndOffset();\n  var anchorKey = selection.getAnchorKey();\n\n  if (!selection.isCollapsed()) {\n    e.preventDefault();\n\n    // If the currently selected text matches what the user is trying to\n    // replace it with, let's just update the `SelectionState`. If not, update\n    // the `ContentState` with the new text.\n    var currentlySelectedChars = editorState.getCurrentContent().getPlainText().slice(selectionStart, selectionEnd);\n    if (chars === currentlySelectedChars) {\n      editor.update(EditorState.forceSelection(editorState, selection.merge({\n        focusOffset: selectionEnd\n      })));\n    } else {\n      editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));\n    }\n    return;\n  }\n\n  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));\n\n  // Bunch of different cases follow where we need to prevent native insertion.\n  var mustPreventNative = false;\n  if (!mustPreventNative) {\n    // Browsers tend to insert text in weird places in the DOM when typing at\n    // the start of a leaf, so we'll handle it ourselves.\n    mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\n  }\n  if (!mustPreventNative) {\n    // Chrome will also split up a node into two pieces if it contains a Tab\n    // char, for no explicable reason. Seemingly caused by this commit:\n    // https://chromium.googlesource.com/chromium/src/+/013ac5eaf3%5E%21/\n    var nativeSelection = global.getSelection();\n    // Selection is necessarily collapsed at this point due to earlier check.\n    if (nativeSelection.anchorNode && nativeSelection.anchorNode.nodeType === Node.TEXT_NODE) {\n      // See isTabHTMLSpanElement in chromium EditingUtilities.cpp.\n      var parentNode = nativeSelection.anchorNode.parentNode;\n      mustPreventNative = parentNode.nodeName === 'SPAN' && parentNode.firstChild.nodeType === Node.TEXT_NODE && parentNode.firstChild.nodeValue.indexOf('\\t') !== -1;\n    }\n  }\n  if (!mustPreventNative) {\n    // Check the old and new \"fingerprints\" of the current block to determine\n    // whether this insertion requires any addition or removal of text nodes,\n    // in which case we would prevent the native character insertion.\n    var originalFingerprint = BlockTree.getFingerprint(editorState.getBlockTree(anchorKey));\n    var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));\n    mustPreventNative = originalFingerprint !== newFingerprint;\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = mustPreventDefaultForCharacter(chars);\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\n  }\n\n  if (mustPreventNative) {\n    e.preventDefault();\n    editor.update(newEditorState);\n    return;\n  }\n\n  // We made it all the way! Let the browser do its thing and insert the char.\n  newEditorState = EditorState.set(newEditorState, {\n    nativelyRenderedContent: newEditorState.getCurrentContent()\n  });\n  // The native event is allowed to occur. To allow user onChange handlers to\n  // change the inserted text, we wait until the text is actually inserted\n  // before we actually update our state. That way when we rerender, the text\n  // we see in the DOM will already have been inserted properly.\n  editor._pendingStateFromBeforeInput = newEditorState;\n  setImmediate(function () {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n      editor.update(editor._pendingStateFromBeforeInput);\n      editor._pendingStateFromBeforeInput = undefined;\n    }\n  });\n}\n\nmodule.exports = editOnBeforeInput;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$nullthrows","~$module$node_modules$draft_js$lib$isEventHandled","~$module$node_modules$fbjs$lib$setImmediate","~$module$node_modules$draft_js$lib$getEntityKeyForSelection","~$shadow.js","~$module$node_modules$draft_js$lib$DraftModifier","~$module$node_modules$draft_js$lib$BlockTree","~$module$node_modules$draft_js$lib$EditorState","~$module$node_modules$draft_js$lib$isSelectionAtLeafStart","~$module$node_modules$fbjs$lib$UserAgent"]],"~:properties",["^5",["_pendingStateFromBeforeInput","nativelyRenderedContent","focusOffset"]],"~:compiled-at",1532351402144,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$editOnBeforeInput.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/editOnBeforeInput.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$editOnBeforeInput\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule editOnBeforeInput\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar BlockTree = require('./BlockTree');\\nvar DraftModifier = require('./DraftModifier');\\nvar EditorState = require('./EditorState');\\nvar UserAgent = require('fbjs/lib/UserAgent');\\n\\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\\nvar isEventHandled = require('./isEventHandled');\\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\\nvar nullthrows = require('fbjs/lib/nullthrows');\\nvar setImmediate = require('fbjs/lib/setImmediate');\\n\\n// When nothing is focused, Firefox regards two characters, `'` and `/`, as\\n// commands that should open and focus the \\\"quickfind\\\" search bar. This should\\n// *never* happen while a contenteditable is focused, but as of v28, it\\n// sometimes does, even when the keypress event target is the contenteditable.\\n// This breaks the input. Special case these characters to ensure that when\\n// they are typed, we prevent default on the event to make sure not to\\n// trigger quickfind.\\nvar FF_QUICKFIND_CHAR = \\\"'\\\";\\nvar FF_QUICKFIND_LINK_CHAR = '/';\\nvar isFirefox = UserAgent.isBrowser('Firefox');\\n\\nfunction mustPreventDefaultForCharacter(character) {\\n  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\\n}\\n\\n/**\\n * Replace the current selection with the specified text string, with the\\n * inline style and entity key applied to the newly inserted text.\\n */\\nfunction replaceText(editorState, text, inlineStyle, entityKey) {\\n  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\\n  return EditorState.push(editorState, contentState, 'insert-characters');\\n}\\n\\n/**\\n * When `onBeforeInput` executes, the browser is attempting to insert a\\n * character into the editor. Apply this character data to the document,\\n * allowing native insertion if possible.\\n *\\n * Native insertion is encouraged in order to limit re-rendering and to\\n * preserve spellcheck highlighting, which disappears or flashes if re-render\\n * occurs on the relevant text nodes.\\n */\\nfunction editOnBeforeInput(editor, e) {\\n  if (editor._pendingStateFromBeforeInput !== undefined) {\\n    editor.update(editor._pendingStateFromBeforeInput);\\n    editor._pendingStateFromBeforeInput = undefined;\\n  }\\n\\n  var editorState = editor._latestEditorState;\\n\\n  var chars = e.data;\\n\\n  // In some cases (ex: IE ideographic space insertion) no character data\\n  // is provided. There's nothing to do when this happens.\\n  if (!chars) {\\n    return;\\n  }\\n\\n  // Allow the top-level component to handle the insertion manually. This is\\n  // useful when triggering interesting behaviors for a character insertion,\\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\\n  // decorator, or setting a block to be a list item after typing '- ' at the\\n  // start of the block.\\n  if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState))) {\\n    e.preventDefault();\\n    return;\\n  }\\n\\n  // If selection is collapsed, conditionally allow native behavior. This\\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\\n  // is not collapsed, we will re-render.\\n  var selection = editorState.getSelection();\\n  var selectionStart = selection.getStartOffset();\\n  var selectionEnd = selection.getEndOffset();\\n  var anchorKey = selection.getAnchorKey();\\n\\n  if (!selection.isCollapsed()) {\\n    e.preventDefault();\\n\\n    // If the currently selected text matches what the user is trying to\\n    // replace it with, let's just update the `SelectionState`. If not, update\\n    // the `ContentState` with the new text.\\n    var currentlySelectedChars = editorState.getCurrentContent().getPlainText().slice(selectionStart, selectionEnd);\\n    if (chars === currentlySelectedChars) {\\n      editor.update(EditorState.forceSelection(editorState, selection.merge({\\n        focusOffset: selectionEnd\\n      })));\\n    } else {\\n      editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));\\n    }\\n    return;\\n  }\\n\\n  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));\\n\\n  // Bunch of different cases follow where we need to prevent native insertion.\\n  var mustPreventNative = false;\\n  if (!mustPreventNative) {\\n    // Browsers tend to insert text in weird places in the DOM when typing at\\n    // the start of a leaf, so we'll handle it ourselves.\\n    mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\\n  }\\n  if (!mustPreventNative) {\\n    // Chrome will also split up a node into two pieces if it contains a Tab\\n    // char, for no explicable reason. Seemingly caused by this commit:\\n    // https://chromium.googlesource.com/chromium/src/+/013ac5eaf3%5E%21/\\n    var nativeSelection = global.getSelection();\\n    // Selection is necessarily collapsed at this point due to earlier check.\\n    if (nativeSelection.anchorNode && nativeSelection.anchorNode.nodeType === Node.TEXT_NODE) {\\n      // See isTabHTMLSpanElement in chromium EditingUtilities.cpp.\\n      var parentNode = nativeSelection.anchorNode.parentNode;\\n      mustPreventNative = parentNode.nodeName === 'SPAN' && parentNode.firstChild.nodeType === Node.TEXT_NODE && parentNode.firstChild.nodeValue.indexOf('\\\\t') !== -1;\\n    }\\n  }\\n  if (!mustPreventNative) {\\n    // Check the old and new \\\"fingerprints\\\" of the current block to determine\\n    // whether this insertion requires any addition or removal of text nodes,\\n    // in which case we would prevent the native character insertion.\\n    var originalFingerprint = BlockTree.getFingerprint(editorState.getBlockTree(anchorKey));\\n    var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));\\n    mustPreventNative = originalFingerprint !== newFingerprint;\\n  }\\n  if (!mustPreventNative) {\\n    mustPreventNative = mustPreventDefaultForCharacter(chars);\\n  }\\n  if (!mustPreventNative) {\\n    mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\\n  }\\n\\n  if (mustPreventNative) {\\n    e.preventDefault();\\n    editor.update(newEditorState);\\n    return;\\n  }\\n\\n  // We made it all the way! Let the browser do its thing and insert the char.\\n  newEditorState = EditorState.set(newEditorState, {\\n    nativelyRenderedContent: newEditorState.getCurrentContent()\\n  });\\n  // The native event is allowed to occur. To allow user onChange handlers to\\n  // change the inserted text, we wait until the text is actually inserted\\n  // before we actually update our state. That way when we rerender, the text\\n  // we see in the DOM will already have been inserted properly.\\n  editor._pendingStateFromBeforeInput = newEditorState;\\n  setImmediate(function () {\\n    if (editor._pendingStateFromBeforeInput !== undefined) {\\n      editor.update(editor._pendingStateFromBeforeInput);\\n      editor._pendingStateFromBeforeInput = undefined;\\n    }\\n  });\\n}\\n\\nmodule.exports = editOnBeforeInput;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"replaceText\",\"editorState\",\"text\",\"inlineStyle\",\"entityKey\",\"contentState\",\"DraftModifier\",\"getCurrentContent\",\"getSelection\",\"EditorState\",\"push\",\"BlockTree\",\"UserAgent\",\"getEntityKeyForSelection\",\"isEventHandled\",\"isSelectionAtLeafStart\",\"nullthrows\",\"setImmediate\",\"isFirefox\",\"isBrowser\",\"editOnBeforeInput\",\"editor\",\"e\",\"undefined\",\"_pendingStateFromBeforeInput\",\"update\",\"_latestEditorState\",\"chars\",\"data\",\"props\",\"handleBeforeInput\",\"preventDefault\",\"selection\",\"selectionStart\",\"getStartOffset\",\"selectionEnd\",\"getEndOffset\",\"anchorKey\",\"getAnchorKey\",\"isCollapsed\",\"newEditorState\",\"getCurrentInlineStyle\",\"mustPreventNative\",\"_latestCommittedEditorState\",\"nativeSelection\",\"anchorNode\",\"nodeType\",\"Node\",\"TEXT_NODE\",\"parentNode\",\"nodeName\",\"firstChild\",\"nodeValue\",\"indexOf\",\"originalFingerprint\",\"getFingerprint\",\"getBlockTree\",\"newFingerprint\",\"FF_QUICKFIND_CHAR\",\"FF_QUICKFIND_LINK_CHAR\",\"getDirectionMap\",\"get\",\"set\",\"nativelyRenderedContent\",\"currentlySelectedChars\",\"getPlainText\",\"slice\",\"forceSelection\",\"merge\",\"focusOffset\"]\n}\n"]