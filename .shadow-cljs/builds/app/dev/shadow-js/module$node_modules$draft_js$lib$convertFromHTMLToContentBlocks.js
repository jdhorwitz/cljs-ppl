["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$convertFromHTMLToContentBlocks=function(global,process,require,module,exports,shadow$shims){function _defineProperty(obj,key,value){key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value;return obj}var _extends=_assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i],key;for(key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},\n_knownListItemDepthCl,_assign=require(\"module$node_modules$object_assign$index\"),CharacterMetadata=require(\"module$node_modules$draft_js$lib$CharacterMetadata\"),ContentBlock=require(\"module$node_modules$draft_js$lib$ContentBlock\"),ContentBlockNode=require(\"module$node_modules$draft_js$lib$ContentBlockNode\"),DefaultDraftBlockRenderMap=require(\"module$node_modules$draft_js$lib$DefaultDraftBlockRenderMap\"),DraftEntity=require(\"module$node_modules$draft_js$lib$DraftEntity\");global=require(\"module$node_modules$draft_js$lib$DraftFeatureFlags\");\nprocess=require(\"module$node_modules$immutable$dist$immutable\");var Set=require(\"module$node_modules$immutable$dist$immutable\").Set,URI=require(\"module$node_modules$fbjs$lib$URI\");exports=require(\"module$node_modules$fbjs$lib$cx\");var generateRandomKey=require(\"module$node_modules$draft_js$lib$generateRandomKey\"),getSafeBodyFromHTML=require(\"module$node_modules$draft_js$lib$getSafeBodyFromHTML\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\"),sanitizeDraftText=require(\"module$node_modules$draft_js$lib$sanitizeDraftText\"),\nexperimentalTreeDataSupport=global.draft_tree_data_support,List=process.List,OrderedSet=process.OrderedSet,REGEX_CR=/\\r/g,REGEX_LF=/\\n/g,REGEX_NBSP=/&nbsp;/g,REGEX_CARRIAGE=/&#13;?/g,REGEX_ZWS=/&#8203;?/g,boldValues=\"bold bolder 500 600 700 800 900\".split(\" \"),notBoldValues=\"light lighter 100 200 300 400\".split(\" \"),inlineTags={b:\"BOLD\",code:\"CODE\",del:\"STRIKETHROUGH\",em:\"ITALIC\",i:\"ITALIC\",s:\"STRIKETHROUGH\",strike:\"STRIKETHROUGH\",strong:\"BOLD\",u:\"UNDERLINE\"},knownListItemDepthClasses=(_knownListItemDepthCl=\n{},_defineProperty(_knownListItemDepthCl,exports(\"public/DraftStyleDefault/depth0\"),0),_defineProperty(_knownListItemDepthCl,exports(\"public/DraftStyleDefault/depth1\"),1),_defineProperty(_knownListItemDepthCl,exports(\"public/DraftStyleDefault/depth2\"),2),_defineProperty(_knownListItemDepthCl,exports(\"public/DraftStyleDefault/depth3\"),3),_defineProperty(_knownListItemDepthCl,exports(\"public/DraftStyleDefault/depth4\"),4),_knownListItemDepthCl),anchorAttr=[\"className\",\"href\",\"rel\",\"target\",\"title\"],\nimgAttr=[\"alt\",\"className\",\"height\",\"src\",\"width\"],lastBlock=void 0,EMPTY_CHUNK={text:\"\",inlines:[],entities:[],blocks:[]},EMPTY_BLOCK={children:List(),depth:0,key:\"\",type:\"\"},getListBlockType=function(tag,lastList){return\"li\"===tag?\"ol\"===lastList?\"ordered-list-item\":\"unordered-list-item\":null},getBlockMapSupportedTags=function(blockRenderMap){var unstyledElement=blockRenderMap.get(\"unstyled\").element,tags=Set([]);blockRenderMap.forEach(function(draftBlock){draftBlock.aliasedElements&&draftBlock.aliasedElements.forEach(function(tag){tags=\ntags.add(tag)});tags=tags.add(draftBlock.element)});return tags.filter(function(tag){return tag&&tag!==unstyledElement}).toArray().sort()},getMultiMatchedType=function(tag,lastList,multiMatchExtractor){for(var ii=0;ii<multiMatchExtractor.length;ii++){var matchType=multiMatchExtractor[ii](tag,lastList);if(matchType)return matchType}return null},getBlockTypeForTag=function(tag,lastList,blockRenderMap){blockRenderMap=blockRenderMap.filter(function(draftBlock){return draftBlock.element===tag||draftBlock.wrapper===\ntag||draftBlock.aliasedElements&&draftBlock.aliasedElements.some(function(alias){return alias===tag})}).keySeq().toSet().toArray().sort();switch(blockRenderMap.length){case 0:return\"unstyled\";case 1:return blockRenderMap[0];default:return getMultiMatchedType(tag,lastList,[getListBlockType])||\"unstyled\"}},processInlineTag=function(tag,node,currentStyle){(tag=inlineTags[tag])?currentStyle=currentStyle.add(tag).toOrderedSet():node instanceof HTMLElement&&(currentStyle=currentStyle.withMutations(function(style){var fontWeight=\nnode.style.fontWeight,fontStyle=node.style.fontStyle,textDecoration=node.style.textDecoration;0<=boldValues.indexOf(fontWeight)?style.add(\"BOLD\"):0<=notBoldValues.indexOf(fontWeight)&&style.remove(\"BOLD\");\"italic\"===fontStyle?style.add(\"ITALIC\"):\"normal\"===fontStyle&&style.remove(\"ITALIC\");\"underline\"===textDecoration&&style.add(\"UNDERLINE\");\"line-through\"===textDecoration&&style.add(\"STRIKETHROUGH\");\"none\"===textDecoration&&(style.remove(\"UNDERLINE\"),style.remove(\"STRIKETHROUGH\"))}).toOrderedSet());\nreturn currentStyle},joinChunks=function(A,B,experimentalHasNestedBlocks){var lastInA=A.text.slice(-1),firstInB=B.text.slice(0,1);\"\\r\"!==lastInA||\"\\r\"!==firstInB||experimentalHasNestedBlocks||(A.text=A.text.slice(0,-1),A.inlines.pop(),A.entities.pop(),A.blocks.pop());if(\"\\r\"===lastInA){if(\" \"===B.text||\"\\n\"===B.text)return A;if(\" \"===firstInB||\"\\n\"===firstInB)B.text=B.text.slice(1),B.inlines.shift(),B.entities.shift()}return{text:A.text+B.text,inlines:A.inlines.concat(B.inlines),entities:A.entities.concat(B.entities),\nblocks:A.blocks.concat(B.blocks)}},containsSemanticBlockMarkup=function(html,blockTags){return blockTags.some(function(tag){return-1!==html.indexOf(\"\\x3c\"+tag)})},hasValidLinkText=function(link){link instanceof HTMLAnchorElement?void 0:invariant(!1,\"Link must be an HTMLAnchorElement.\");link=link.protocol;return\"http:\"===link||\"https:\"===link||\"mailto:\"===link},getWhitespaceChunk=function(inEntity){var entities=Array(1);inEntity&&(entities[0]=inEntity);return _extends({},EMPTY_CHUNK,{text:\" \",inlines:[OrderedSet()],\nentities:entities})},getSoftNewlineChunk=function(){return _extends({},EMPTY_CHUNK,{text:\"\\n\",inlines:[OrderedSet()],entities:Array(1)})},getChunkedBlock=function(){return _extends({},EMPTY_BLOCK,0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getBlockDividerChunk=function(block,depth){var parentKey=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return{text:\"\\r\",inlines:[OrderedSet()],entities:Array(1),blocks:[getChunkedBlock({parent:parentKey,key:generateRandomKey(),type:block,\ndepth:Math.max(0,Math.min(4,depth))})]}},getListItemDepth=function(node){var depth=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;Object.keys(knownListItemDepthClasses).some(function(depthClass){node.classList.contains(depthClass)&&(depth=knownListItemDepthClasses[depthClass])});return depth},genFragment=function genFragment(entityMap,node,inlineStyle,lastList,inBlock,blockTags,depth,blockRenderMap,inEntity,parentKey){var lastLastBlock=lastBlock,nodeName=node.nodeName.toLowerCase(),newEntityMap=\nentityMap,nextBlockType=\"unstyled\",newBlock=!1,inBlockType=inBlock&&getBlockTypeForTag(inBlock,lastList,blockRenderMap),chunk=_extends({},EMPTY_CHUNK),newChunk=null,blockKey=void 0;if(\"#text\"===nodeName){blockTags=node.textContent;depth=blockTags.trim();if(lastList&&\"\"===depth&&node.parentElement&&(lastList=node.parentElement.nodeName.toLowerCase(),\"ol\"===lastList||\"ul\"===lastList))return{chunk:_extends({},EMPTY_CHUNK),entityMap:entityMap};if(\"\"===depth&&\"pre\"!==inBlock)return{chunk:getWhitespaceChunk(inEntity),\nentityMap:entityMap};\"pre\"!==inBlock&&(blockTags=blockTags.replace(REGEX_LF,\" \"));lastBlock=nodeName;return{chunk:{text:blockTags,inlines:Array(blockTags.length).fill(inlineStyle),entities:Array(blockTags.length).fill(inEntity),blocks:[]},entityMap:entityMap}}lastBlock=nodeName;if(\"br\"===nodeName)return\"br\"!==lastLastBlock||inBlock&&\"unstyled\"!==inBlockType?{chunk:getSoftNewlineChunk(),entityMap:entityMap}:{chunk:getBlockDividerChunk(\"unstyled\",depth,parentKey),entityMap:entityMap};if(\"img\"===nodeName&&\nnode instanceof HTMLImageElement&&node.attributes.getNamedItem(\"src\")&&node.attributes.getNamedItem(\"src\").value){var entityConfig={};imgAttr.forEach(function(attr){var imageAttribute=node.getAttribute(attr);imageAttribute&&(entityConfig[attr]=imageAttribute)});node.textContent=\"\\ud83d\\udcf7\";inEntity=DraftEntity.__create(\"IMAGE\",\"MUTABLE\",entityConfig||{})}inlineStyle=processInlineTag(nodeName,node,inlineStyle);if(\"ul\"===nodeName||\"ol\"===nodeName)lastList&&(depth+=1),lastList=nodeName;!experimentalTreeDataSupport&&\n\"li\"===nodeName&&node instanceof HTMLElement&&(depth=getListItemDepth(node,depth));entityMap=getBlockTypeForTag(nodeName,lastList,blockRenderMap);newChunk=lastList&&\"li\"===inBlock&&\"li\"===nodeName;lastLastBlock=(!inBlock||experimentalTreeDataSupport)&&-1!==blockTags.indexOf(nodeName);if(newChunk||lastLastBlock)chunk=getBlockDividerChunk(entityMap,depth,parentKey),blockKey=chunk.blocks[0].key,inBlock=nodeName,newBlock=!experimentalTreeDataSupport;newChunk&&(nextBlockType=\"ul\"===lastList?\"unordered-list-item\":\n\"ordered-list-item\");var child=node.firstChild;null!=child&&(nodeName=child.nodeName.toLowerCase());for(var entityId=null;child;)child instanceof HTMLAnchorElement&&child.href&&hasValidLinkText(child)?function(){var anchor=child,entityConfig={};anchorAttr.forEach(function(attr){var anchorAttribute=anchor.getAttribute(attr);anchorAttribute&&(entityConfig[attr]=anchorAttribute)});entityConfig.url=(new URI(anchor.href)).toString();entityId=DraftEntity.__create(\"LINK\",\"MUTABLE\",entityConfig||{})}():entityId=\nvoid 0,entityMap=genFragment(newEntityMap,child,inlineStyle,lastList,inBlock,blockTags,depth,blockRenderMap,entityId||inEntity,experimentalTreeDataSupport?blockKey:null),newEntityMap=entityMap.entityMap,newChunk=entityMap.chunk,chunk=joinChunks(chunk,newChunk,experimentalTreeDataSupport),entityMap=child.nextSibling,!parentKey&&entityMap&&0<=blockTags.indexOf(nodeName)&&inBlock&&(chunk=joinChunks(chunk,getSoftNewlineChunk())),entityMap&&(nodeName=entityMap.nodeName.toLowerCase()),child=entityMap;newBlock&&\n(chunk=joinChunks(chunk,getBlockDividerChunk(nextBlockType,depth,parentKey)));return{chunk:chunk,entityMap:newEntityMap}},convertChunkToContentBlocks=function(chunk){if(!chunk||!chunk.text||!Array.isArray(chunk.blocks))return null;var start=0,rawBlocks=chunk.blocks,rawInlines=chunk.inlines,rawEntities=chunk.entities,BlockNodeRecord=experimentalTreeDataSupport?ContentBlockNode:ContentBlock;return chunk.text.split(\"\\r\").reduce(function(acc,textBlock,index$jscomp$0){textBlock=sanitizeDraftText(textBlock);\nvar block$jscomp$0=rawBlocks[index$jscomp$0],end=start+textBlock.length,inlines=rawInlines.slice(start,end),entities=rawEntities.slice(start,end);inlines=List(inlines.map(function(style,index){style={style:style,entity:null};entities[index]&&(style.entity=entities[index]);return CharacterMetadata.create(style)}));start=end+1;end=block$jscomp$0.depth;var type=block$jscomp$0.type,parent=block$jscomp$0.parent;block$jscomp$0=block$jscomp$0.key||generateRandomKey();var parentTextNodeKey=null;if(parent){var parentIndex=\nacc.cacheRef[parent],parentRecord=acc.contentBlocks[parentIndex];if(parentRecord.getChildKeys().isEmpty()&&parentRecord.getText()){var parentCharacterList=parentRecord.getCharacterList(),parentText=parentRecord.getText();parentTextNodeKey=generateRandomKey();var textNode=new ContentBlockNode({key:parentTextNodeKey,text:parentText,characterList:parentCharacterList,parent:parent,nextSibling:block$jscomp$0});acc.contentBlocks.push(textNode);parentRecord=parentRecord.withMutations(function(block){block.set(\"characterList\",\nList()).set(\"text\",\"\").set(\"children\",parentRecord.children.push(textNode.getKey()))})}acc.contentBlocks[parentIndex]=parentRecord.set(\"children\",parentRecord.children.push(block$jscomp$0))}textBlock=new BlockNodeRecord({key:block$jscomp$0,parent:parent,type:type,depth:end,text:textBlock,characterList:inlines,prevSibling:parentTextNodeKey||(0===index$jscomp$0||rawBlocks[index$jscomp$0-1].parent!==parent?null:rawBlocks[index$jscomp$0-1].key),nextSibling:index$jscomp$0===rawBlocks.length-1||rawBlocks[index$jscomp$0+\n1].parent!==parent?null:rawBlocks[index$jscomp$0+1].key});acc.contentBlocks.push(textBlock);acc.cacheRef[textBlock.key]=index$jscomp$0;return acc},{cacheRef:{},contentBlocks:[]}).contentBlocks};module.exports=function(html$jscomp$0){var html=html$jscomp$0,DOMBuilder=1<arguments.length&&void 0!==arguments[1]?arguments[1]:getSafeBodyFromHTML;var chunkData=2<arguments.length&&void 0!==arguments[2]?arguments[2]:DefaultDraftBlockRenderMap;html=html.trim().replace(REGEX_CR,\"\").replace(REGEX_NBSP,\" \").replace(REGEX_CARRIAGE,\n\"\").replace(REGEX_ZWS,\"\");var supportedBlockTags=getBlockMapSupportedTags(chunkData);(DOMBuilder=DOMBuilder(html))?(lastBlock=null,html=containsSemanticBlockMarkup(html,supportedBlockTags)?supportedBlockTags:[\"div\"],html=genFragment(DraftEntity,DOMBuilder,OrderedSet(),\"ul\",null,html,-1,chunkData),chunkData=html.chunk,html=html.entityMap,0===chunkData.text.indexOf(\"\\r\")&&(chunkData={text:chunkData.text.slice(1),inlines:chunkData.inlines.slice(1),entities:chunkData.entities.slice(1),blocks:chunkData.blocks}),\n\"\\r\"===chunkData.text.slice(-1)&&(chunkData.text=chunkData.text.slice(0,-1),chunkData.inlines=chunkData.inlines.slice(0,-1),chunkData.entities=chunkData.entities.slice(0,-1),chunkData.blocks.pop()),0===chunkData.blocks.length&&chunkData.blocks.push(_extends({},EMPTY_CHUNK,{type:\"unstyled\",depth:0})),chunkData.text.split(\"\\r\").length===chunkData.blocks.length+1&&chunkData.blocks.unshift({type:\"unstyled\",depth:0}),chunkData={chunk:chunkData,entityMap:html}):chunkData=null;if(null==chunkData)return null;\nhtml=chunkData.entityMap;return{contentBlocks:convertChunkToContentBlocks(chunkData.chunk),entityMap:html}}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$convertFromHTMLToContentBlocks\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromHTMLToContentBlocks\n * @format\n * \n */\n\n'use strict';\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _knownListItemDepthCl,\n    _assign = require('object-assign');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DefaultDraftBlockRenderMap = require('./DefaultDraftBlockRenderMap');\nvar DraftEntity = require('./DraftEntity');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar Immutable = require('immutable');\n\nvar _require = require('immutable'),\n    Set = _require.Set;\n\nvar URI = require('fbjs/lib/URI');\n\nvar cx = require('fbjs/lib/cx');\nvar generateRandomKey = require('./generateRandomKey');\nvar getSafeBodyFromHTML = require('./getSafeBodyFromHTML');\nvar invariant = require('fbjs/lib/invariant');\nvar sanitizeDraftText = require('./sanitizeDraftText');\n\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\n\nvar List = Immutable.List,\n    OrderedSet = Immutable.OrderedSet;\n\n\nvar NBSP = '&nbsp;';\nvar SPACE = ' ';\n\n// Arbitrary max indent\nvar MAX_DEPTH = 4;\n\n// used for replacing characters in HTML\nvar REGEX_CR = new RegExp('\\r', 'g');\nvar REGEX_LF = new RegExp('\\n', 'g');\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\nvar REGEX_CARRIAGE = new RegExp('&#13;?', 'g');\nvar REGEX_ZWS = new RegExp('&#8203;?', 'g');\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\nvar boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];\nvar notBoldValues = ['light', 'lighter', '100', '200', '300', '400'];\n\n// Block tag flow is different because LIs do not have\n// a deterministic style ;_;\nvar inlineTags = {\n  b: 'BOLD',\n  code: 'CODE',\n  del: 'STRIKETHROUGH',\n  em: 'ITALIC',\n  i: 'ITALIC',\n  s: 'STRIKETHROUGH',\n  strike: 'STRIKETHROUGH',\n  strong: 'BOLD',\n  u: 'UNDERLINE'\n};\n\nvar knownListItemDepthClasses = (_knownListItemDepthCl = {}, _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth0'), 0), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth1'), 1), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth2'), 2), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth3'), 3), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth4'), 4), _knownListItemDepthCl);\n\nvar anchorAttr = ['className', 'href', 'rel', 'target', 'title'];\n\nvar imgAttr = ['alt', 'className', 'height', 'src', 'width'];\n\nvar lastBlock = void 0;\n\nvar EMPTY_CHUNK = {\n  text: '',\n  inlines: [],\n  entities: [],\n  blocks: []\n};\n\nvar EMPTY_BLOCK = {\n  children: List(),\n  depth: 0,\n  key: '',\n  type: ''\n};\n\nvar getListBlockType = function getListBlockType(tag, lastList) {\n  if (tag === 'li') {\n    return lastList === 'ol' ? 'ordered-list-item' : 'unordered-list-item';\n  }\n  return null;\n};\n\nvar getBlockMapSupportedTags = function getBlockMapSupportedTags(blockRenderMap) {\n  var unstyledElement = blockRenderMap.get('unstyled').element;\n  var tags = Set([]);\n\n  blockRenderMap.forEach(function (draftBlock) {\n    if (draftBlock.aliasedElements) {\n      draftBlock.aliasedElements.forEach(function (tag) {\n        tags = tags.add(tag);\n      });\n    }\n\n    tags = tags.add(draftBlock.element);\n  });\n\n  return tags.filter(function (tag) {\n    return tag && tag !== unstyledElement;\n  }).toArray().sort();\n};\n\n// custom element conversions\nvar getMultiMatchedType = function getMultiMatchedType(tag, lastList, multiMatchExtractor) {\n  for (var ii = 0; ii < multiMatchExtractor.length; ii++) {\n    var matchType = multiMatchExtractor[ii](tag, lastList);\n    if (matchType) {\n      return matchType;\n    }\n  }\n  return null;\n};\n\nvar getBlockTypeForTag = function getBlockTypeForTag(tag, lastList, blockRenderMap) {\n  var matchedTypes = blockRenderMap.filter(function (draftBlock) {\n    return draftBlock.element === tag || draftBlock.wrapper === tag || draftBlock.aliasedElements && draftBlock.aliasedElements.some(function (alias) {\n      return alias === tag;\n    });\n  }).keySeq().toSet().toArray().sort();\n\n  // if we dont have any matched type, return unstyled\n  // if we have one matched type return it\n  // if we have multi matched types use the multi-match function to gather type\n  switch (matchedTypes.length) {\n    case 0:\n      return 'unstyled';\n    case 1:\n      return matchedTypes[0];\n    default:\n      return getMultiMatchedType(tag, lastList, [getListBlockType]) || 'unstyled';\n  }\n};\n\nvar processInlineTag = function processInlineTag(tag, node, currentStyle) {\n  var styleToCheck = inlineTags[tag];\n  if (styleToCheck) {\n    currentStyle = currentStyle.add(styleToCheck).toOrderedSet();\n  } else if (node instanceof HTMLElement) {\n    var htmlElement = node;\n    currentStyle = currentStyle.withMutations(function (style) {\n      var fontWeight = htmlElement.style.fontWeight;\n      var fontStyle = htmlElement.style.fontStyle;\n      var textDecoration = htmlElement.style.textDecoration;\n\n      if (boldValues.indexOf(fontWeight) >= 0) {\n        style.add('BOLD');\n      } else if (notBoldValues.indexOf(fontWeight) >= 0) {\n        style.remove('BOLD');\n      }\n\n      if (fontStyle === 'italic') {\n        style.add('ITALIC');\n      } else if (fontStyle === 'normal') {\n        style.remove('ITALIC');\n      }\n\n      if (textDecoration === 'underline') {\n        style.add('UNDERLINE');\n      }\n      if (textDecoration === 'line-through') {\n        style.add('STRIKETHROUGH');\n      }\n      if (textDecoration === 'none') {\n        style.remove('UNDERLINE');\n        style.remove('STRIKETHROUGH');\n      }\n    }).toOrderedSet();\n  }\n  return currentStyle;\n};\n\nvar joinChunks = function joinChunks(A, B, experimentalHasNestedBlocks) {\n  // Sometimes two blocks will touch in the DOM and we need to strip the\n  // extra delimiter to preserve niceness.\n  var lastInA = A.text.slice(-1);\n  var firstInB = B.text.slice(0, 1);\n\n  if (lastInA === '\\r' && firstInB === '\\r' && !experimentalHasNestedBlocks) {\n    A.text = A.text.slice(0, -1);\n    A.inlines.pop();\n    A.entities.pop();\n    A.blocks.pop();\n  }\n\n  // Kill whitespace after blocks\n  if (lastInA === '\\r') {\n    if (B.text === SPACE || B.text === '\\n') {\n      return A;\n    } else if (firstInB === SPACE || firstInB === '\\n') {\n      B.text = B.text.slice(1);\n      B.inlines.shift();\n      B.entities.shift();\n    }\n  }\n\n  return {\n    text: A.text + B.text,\n    inlines: A.inlines.concat(B.inlines),\n    entities: A.entities.concat(B.entities),\n    blocks: A.blocks.concat(B.blocks)\n  };\n};\n\n/**\n * Check to see if we have anything like <p> <blockquote> <h1>... to create\n * block tags from. If we do, we can use those and ignore <div> tags. If we\n * don't, we can treat <div> tags as meaningful (unstyled) blocks.\n */\nvar containsSemanticBlockMarkup = function containsSemanticBlockMarkup(html, blockTags) {\n  return blockTags.some(function (tag) {\n    return html.indexOf('<' + tag) !== -1;\n  });\n};\n\nvar hasValidLinkText = function hasValidLinkText(link) {\n  !(link instanceof HTMLAnchorElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Link must be an HTMLAnchorElement.') : invariant(false) : void 0;\n  var protocol = link.protocol;\n  return protocol === 'http:' || protocol === 'https:' || protocol === 'mailto:';\n};\n\nvar getWhitespaceChunk = function getWhitespaceChunk(inEntity) {\n  var entities = new Array(1);\n  if (inEntity) {\n    entities[0] = inEntity;\n  }\n  return _extends({}, EMPTY_CHUNK, {\n    text: SPACE,\n    inlines: [OrderedSet()],\n    entities: entities\n  });\n};\n\nvar getSoftNewlineChunk = function getSoftNewlineChunk() {\n  return _extends({}, EMPTY_CHUNK, {\n    text: '\\n',\n    inlines: [OrderedSet()],\n    entities: new Array(1)\n  });\n};\n\nvar getChunkedBlock = function getChunkedBlock() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  return _extends({}, EMPTY_BLOCK, props);\n};\n\nvar getBlockDividerChunk = function getBlockDividerChunk(block, depth) {\n  var parentKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  return {\n    text: '\\r',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: [getChunkedBlock({\n      parent: parentKey,\n      key: generateRandomKey(),\n      type: block,\n      depth: Math.max(0, Math.min(MAX_DEPTH, depth))\n    })]\n  };\n};\n\n/**\n *  If we're pasting from one DraftEditor to another we can check to see if\n *  existing list item depth classes are being used and preserve this style\n */\nvar getListItemDepth = function getListItemDepth(node) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  Object.keys(knownListItemDepthClasses).some(function (depthClass) {\n    if (node.classList.contains(depthClass)) {\n      depth = knownListItemDepthClasses[depthClass];\n    }\n  });\n  return depth;\n};\n\nvar genFragment = function genFragment(entityMap, node, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, inEntity, parentKey) {\n  var lastLastBlock = lastBlock;\n  var nodeName = node.nodeName.toLowerCase();\n  var newEntityMap = entityMap;\n  var nextBlockType = 'unstyled';\n  var newBlock = false;\n  var inBlockType = inBlock && getBlockTypeForTag(inBlock, lastList, blockRenderMap);\n  var chunk = _extends({}, EMPTY_CHUNK);\n  var newChunk = null;\n  var blockKey = void 0;\n\n  // Base Case\n  if (nodeName === '#text') {\n    var _text = node.textContent;\n    var nodeTextContent = _text.trim();\n\n    // We should not create blocks for leading spaces that are\n    // existing around ol/ul and their children list items\n    if (lastList && nodeTextContent === '' && node.parentElement) {\n      var parentNodeName = node.parentElement.nodeName.toLowerCase();\n      if (parentNodeName === 'ol' || parentNodeName === 'ul') {\n        return { chunk: _extends({}, EMPTY_CHUNK), entityMap: entityMap };\n      }\n    }\n\n    if (nodeTextContent === '' && inBlock !== 'pre') {\n      return { chunk: getWhitespaceChunk(inEntity), entityMap: entityMap };\n    }\n    if (inBlock !== 'pre') {\n      // Can't use empty string because MSWord\n      _text = _text.replace(REGEX_LF, SPACE);\n    }\n\n    // save the last block so we can use it later\n    lastBlock = nodeName;\n\n    return {\n      chunk: {\n        text: _text,\n        inlines: Array(_text.length).fill(inlineStyle),\n        entities: Array(_text.length).fill(inEntity),\n        blocks: []\n      },\n      entityMap: entityMap\n    };\n  }\n\n  // save the last block so we can use it later\n  lastBlock = nodeName;\n\n  // BR tags\n  if (nodeName === 'br') {\n    if (lastLastBlock === 'br' && (!inBlock || inBlockType === 'unstyled')) {\n      return {\n        chunk: getBlockDividerChunk('unstyled', depth, parentKey),\n        entityMap: entityMap\n      };\n    }\n    return { chunk: getSoftNewlineChunk(), entityMap: entityMap };\n  }\n\n  // IMG tags\n  if (nodeName === 'img' && node instanceof HTMLImageElement && node.attributes.getNamedItem('src') && node.attributes.getNamedItem('src').value) {\n    var image = node;\n    var entityConfig = {};\n\n    imgAttr.forEach(function (attr) {\n      var imageAttribute = image.getAttribute(attr);\n      if (imageAttribute) {\n        entityConfig[attr] = imageAttribute;\n      }\n    });\n    // Forcing this node to have children because otherwise no entity will be\n    // created for this node.\n    // The child text node cannot just have a space or return as content -\n    // we strip those out.\n    // See https://github.com/facebook/draft-js/issues/231 for some context.\n    node.textContent = '\\uD83D\\uDCF7';\n\n    // TODO: update this when we remove DraftEntity entirely\n    inEntity = DraftEntity.__create('IMAGE', 'MUTABLE', entityConfig || {});\n  }\n\n  // Inline tags\n  inlineStyle = processInlineTag(nodeName, node, inlineStyle);\n\n  // Handle lists\n  if (nodeName === 'ul' || nodeName === 'ol') {\n    if (lastList) {\n      depth += 1;\n    }\n    lastList = nodeName;\n  }\n\n  if (!experimentalTreeDataSupport && nodeName === 'li' && node instanceof HTMLElement) {\n    depth = getListItemDepth(node, depth);\n  }\n\n  var blockType = getBlockTypeForTag(nodeName, lastList, blockRenderMap);\n  var inListBlock = lastList && inBlock === 'li' && nodeName === 'li';\n  var inBlockOrHasNestedBlocks = (!inBlock || experimentalTreeDataSupport) && blockTags.indexOf(nodeName) !== -1;\n\n  // Block Tags\n  if (inListBlock || inBlockOrHasNestedBlocks) {\n    chunk = getBlockDividerChunk(blockType, depth, parentKey);\n    blockKey = chunk.blocks[0].key;\n    inBlock = nodeName;\n    newBlock = !experimentalTreeDataSupport;\n  }\n\n  // this is required so that we can handle 'ul' and 'ol'\n  if (inListBlock) {\n    nextBlockType = lastList === 'ul' ? 'unordered-list-item' : 'ordered-list-item';\n  }\n\n  // Recurse through children\n  var child = node.firstChild;\n  if (child != null) {\n    nodeName = child.nodeName.toLowerCase();\n  }\n\n  var entityId = null;\n\n  while (child) {\n    if (child instanceof HTMLAnchorElement && child.href && hasValidLinkText(child)) {\n      (function () {\n        var anchor = child;\n        var entityConfig = {};\n\n        anchorAttr.forEach(function (attr) {\n          var anchorAttribute = anchor.getAttribute(attr);\n          if (anchorAttribute) {\n            entityConfig[attr] = anchorAttribute;\n          }\n        });\n\n        entityConfig.url = new URI(anchor.href).toString();\n        // TODO: update this when we remove DraftEntity completely\n        entityId = DraftEntity.__create('LINK', 'MUTABLE', entityConfig || {});\n      })();\n    } else {\n      entityId = undefined;\n    }\n\n    var _genFragment = genFragment(newEntityMap, child, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, entityId || inEntity, experimentalTreeDataSupport ? blockKey : null),\n        generatedChunk = _genFragment.chunk,\n        maybeUpdatedEntityMap = _genFragment.entityMap;\n\n    newChunk = generatedChunk;\n    newEntityMap = maybeUpdatedEntityMap;\n\n    chunk = joinChunks(chunk, newChunk, experimentalTreeDataSupport);\n    var sibling = child.nextSibling;\n\n    // Put in a newline to break up blocks inside blocks\n    if (!parentKey && sibling && blockTags.indexOf(nodeName) >= 0 && inBlock) {\n      chunk = joinChunks(chunk, getSoftNewlineChunk());\n    }\n    if (sibling) {\n      nodeName = sibling.nodeName.toLowerCase();\n    }\n    child = sibling;\n  }\n\n  if (newBlock) {\n    chunk = joinChunks(chunk, getBlockDividerChunk(nextBlockType, depth, parentKey));\n  }\n\n  return { chunk: chunk, entityMap: newEntityMap };\n};\n\nvar getChunkForHTML = function getChunkForHTML(html, DOMBuilder, blockRenderMap, entityMap) {\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, '').replace(REGEX_ZWS, '');\n\n  var supportedBlockTags = getBlockMapSupportedTags(blockRenderMap);\n\n  var safeBody = DOMBuilder(html);\n  if (!safeBody) {\n    return null;\n  }\n  lastBlock = null;\n\n  // Sometimes we aren't dealing with content that contains nice semantic\n  // tags. In this case, use divs to separate everything out into paragraphs\n  // and hope for the best.\n  var workingBlocks = containsSemanticBlockMarkup(html, supportedBlockTags) ? supportedBlockTags : ['div'];\n\n  // Start with -1 block depth to offset the fact that we are passing in a fake\n  // UL block to start with.\n  var fragment = genFragment(entityMap, safeBody, OrderedSet(), 'ul', null, workingBlocks, -1, blockRenderMap);\n\n  var chunk = fragment.chunk;\n  var newEntityMap = fragment.entityMap;\n\n  // join with previous block to prevent weirdness on paste\n  if (chunk.text.indexOf('\\r') === 0) {\n    chunk = {\n      text: chunk.text.slice(1),\n      inlines: chunk.inlines.slice(1),\n      entities: chunk.entities.slice(1),\n      blocks: chunk.blocks\n    };\n  }\n\n  // Kill block delimiter at the end\n  if (chunk.text.slice(-1) === '\\r') {\n    chunk.text = chunk.text.slice(0, -1);\n    chunk.inlines = chunk.inlines.slice(0, -1);\n    chunk.entities = chunk.entities.slice(0, -1);\n    chunk.blocks.pop();\n  }\n\n  // If we saw no block tags, put an unstyled one in\n  if (chunk.blocks.length === 0) {\n    chunk.blocks.push(_extends({}, EMPTY_CHUNK, {\n      type: 'unstyled',\n      depth: 0\n    }));\n  }\n\n  // Sometimes we start with text that isn't in a block, which is then\n  // followed by blocks. Need to fix up the blocks to add in\n  // an unstyled block for this content\n  if (chunk.text.split('\\r').length === chunk.blocks.length + 1) {\n    chunk.blocks.unshift({ type: 'unstyled', depth: 0 });\n  }\n\n  return { chunk: chunk, entityMap: newEntityMap };\n};\n\nvar convertChunkToContentBlocks = function convertChunkToContentBlocks(chunk) {\n  if (!chunk || !chunk.text || !Array.isArray(chunk.blocks)) {\n    return null;\n  }\n\n  var initialState = {\n    cacheRef: {},\n    contentBlocks: []\n  };\n\n  var start = 0;\n\n  var rawBlocks = chunk.blocks,\n      rawInlines = chunk.inlines,\n      rawEntities = chunk.entities;\n\n\n  var BlockNodeRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\n\n  return chunk.text.split('\\r').reduce(function (acc, textBlock, index) {\n    // Make absolutely certain that our text is acceptable.\n    textBlock = sanitizeDraftText(textBlock);\n\n    var block = rawBlocks[index];\n    var end = start + textBlock.length;\n    var inlines = rawInlines.slice(start, end);\n    var entities = rawEntities.slice(start, end);\n    var characterList = List(inlines.map(function (style, index) {\n      var data = { style: style, entity: null };\n      if (entities[index]) {\n        data.entity = entities[index];\n      }\n      return CharacterMetadata.create(data);\n    }));\n    start = end + 1;\n\n    var depth = block.depth,\n        type = block.type,\n        parent = block.parent;\n\n\n    var key = block.key || generateRandomKey();\n    var parentTextNodeKey = null; // will be used to store container text nodes\n\n    // childrens add themselves to their parents since we are iterating in order\n    if (parent) {\n      var parentIndex = acc.cacheRef[parent];\n      var parentRecord = acc.contentBlocks[parentIndex];\n\n      // if parent has text we need to split it into a separate unstyled element\n      if (parentRecord.getChildKeys().isEmpty() && parentRecord.getText()) {\n        var parentCharacterList = parentRecord.getCharacterList();\n        var parentText = parentRecord.getText();\n        parentTextNodeKey = generateRandomKey();\n\n        var textNode = new ContentBlockNode({\n          key: parentTextNodeKey,\n          text: parentText,\n          characterList: parentCharacterList,\n          parent: parent,\n          nextSibling: key\n        });\n\n        acc.contentBlocks.push(textNode);\n\n        parentRecord = parentRecord.withMutations(function (block) {\n          block.set('characterList', List()).set('text', '').set('children', parentRecord.children.push(textNode.getKey()));\n        });\n      }\n\n      acc.contentBlocks[parentIndex] = parentRecord.set('children', parentRecord.children.push(key));\n    }\n\n    var blockNode = new BlockNodeRecord({\n      key: key,\n      parent: parent,\n      type: type,\n      depth: depth,\n      text: textBlock,\n      characterList: characterList,\n      prevSibling: parentTextNodeKey || (index === 0 || rawBlocks[index - 1].parent !== parent ? null : rawBlocks[index - 1].key),\n      nextSibling: index === rawBlocks.length - 1 || rawBlocks[index + 1].parent !== parent ? null : rawBlocks[index + 1].key\n    });\n\n    // insert node\n    acc.contentBlocks.push(blockNode);\n\n    // cache ref for building links\n    acc.cacheRef[blockNode.key] = index;\n\n    return acc;\n  }, initialState).contentBlocks;\n};\n\nvar convertFromHTMLtoContentBlocks = function convertFromHTMLtoContentBlocks(html) {\n  var DOMBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;\n  var blockRenderMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultDraftBlockRenderMap;\n\n  // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\n  // arbitrary code in whatever environment you're running this in. For an\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n\n  // TODO: replace DraftEntity with an OrderedMap here\n  var chunkData = getChunkForHTML(html, DOMBuilder, blockRenderMap, DraftEntity);\n\n  if (chunkData == null) {\n    return null;\n  }\n\n  var chunk = chunkData.chunk,\n      entityMap = chunkData.entityMap;\n\n  var contentBlocks = convertChunkToContentBlocks(chunk);\n\n  return {\n    contentBlocks: contentBlocks,\n    entityMap: entityMap\n  };\n};\n\nmodule.exports = convertFromHTMLtoContentBlocks;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$URI","~$module$node_modules$object_assign$index","~$module$node_modules$draft_js$lib$ContentBlock","~$shadow.js","~$module$node_modules$draft_js$lib$DraftFeatureFlags","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$draft_js$lib$ContentBlockNode","~$module$node_modules$immutable$dist$immutable","~$module$node_modules$draft_js$lib$CharacterMetadata","~$module$node_modules$draft_js$lib$sanitizeDraftText","~$module$node_modules$fbjs$lib$cx","~$module$node_modules$draft_js$lib$generateRandomKey","~$module$node_modules$draft_js$lib$DefaultDraftBlockRenderMap","~$module$node_modules$draft_js$lib$getSafeBodyFromHTML","~$module$node_modules$draft_js$lib$DraftEntity"]],"~:properties",["^5",["s","url","entityMap","inlines","key","textContent","parent","children","em","strike","nextSibling","cacheRef","blocks","chunk","del","configurable","style","value","enumerable","contentBlocks","text","writable","characterList","i","type","b","depth","u","strong","entity","code","prevSibling","entities"]],"~:compiled-at",1532351402149,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$convertFromHTMLToContentBlocks.js\",\n\"lineCount\":27,\n\"mappings\":\"AAAAA,cAAA,gEAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAqBjJC,QAASA,gBAAe,CAACC,GAAD,CAAMC,GAAN,CAAWC,KAAX,CAAkB,CAAMD,GAAJ,GAAWD,IAAX,CAAkBG,MAAAC,eAAA,CAAsBJ,GAAtB,CAA2BC,GAA3B,CAAgC,CAAEC,MAAOA,KAAT,CAAgBG,WAAY,CAAA,CAA5B,CAAkCC,aAAc,CAAA,CAAhD,CAAsDC,SAAU,CAAA,CAAhE,CAAhC,CAAlB,CAAoIP,GAAA,CAAIC,GAAJ,CAApI,CAA+IC,KAAS,OAAOF,IAAjK,CAL1C,IAAIQ,SAAWC,OAAXD,EAAsB,QAAS,CAACE,MAAD,CAAS,CAAE,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,SAAAC,OAApB,CAAsCF,CAAA,EAAtC,CAA2C,CAAE,IAAIG,OAASF,SAAA,CAAUD,CAAV,CAAb,CAAoCV,GAAT,KAASA,GAAT,GAAgBa,OAAhB,CAA8BX,MAAAY,UAAAC,eAAAC,KAAA,CAAqCH,MAArC,CAA6Cb,GAA7C,CAAJ,GAAyDS,MAAA,CAAOT,GAAP,CAAzD,CAAuEa,MAAA,CAAOb,GAAP,CAAvE,CAAvD,CAAiJ,MAAOS,OAArM,CAA5C;AAEIQ,qBAFJ,CAGIT,QAAUd,OAAA,CAAQ,yCAAR,CAHd,CAOIwB,kBAAoBxB,OAAA,CAAQ,oDAAR,CAPxB,CAQIyB,aAAezB,OAAA,CAAQ,+CAAR,CARnB,CASI0B,iBAAmB1B,OAAA,CAAQ,mDAAR,CATvB,CAUI2B,2BAA6B3B,OAAA,CAAQ,6DAAR,CAVjC,CAWI4B,YAAc5B,OAAA,CAAQ,8CAAR,CACd6B,OAAAA,CAAoB7B,OAAA,CAAQ,oDAAR,CACpB8B;OAAAA,CAAY9B,OAAA,CAAQ,8CAAR,CAEhB,KACI+B,IADW/B,OAAAgC,CAAQ,8CAARA,CACLD,IADV,CAGIE,IAAMjC,OAAA,CAAQ,kCAAR,CAENkC,QAAAA,CAAKlC,OAAA,CAAQ,iCAAR,CACT,KAAImC,kBAAoBnC,OAAA,CAAQ,oDAAR,CAAxB,CACIoC,oBAAsBpC,OAAA,CAAQ,sDAAR,CAD1B,CAEIqC,UAAYrC,OAAA,CAAQ,wCAAR,CAFhB,CAGIsC,kBAAoBtC,OAAA,CAAQ,oDAAR,CAHxB;AAKIuC,4BAA8BV,MAAAW,wBALlC,CAOIC,KAAOX,OAAAW,KAPX,CAQIC,WAAaZ,OAAAY,WARjB,CAkBIC,SAAW,KAlBf,CAmBIC,SAAW,KAnBf,CAoBIC,WAAa,SApBjB,CAqBIC,eAAiB,SArBrB,CAsBIC,UAAY,WAtBhB,CAyBIC,WAAa,iCAAA,MAAA,CAAA,GAAA,CAzBjB,CA0BIC,cAAgB,+BAAA,MAAA,CAAA,GAAA,CA1BpB,CA8BIC,WAAa,CACfC,EAAG,MADY,CAEfC,KAAM,MAFS,CAGfC,IAAK,eAHU,CAIfC,GAAI,QAJW,CAKftC,EAAG,QALY,CAMfuC,EAAG,eANY,CAOfC,OAAQ,eAPO,CAQfC,OAAQ,MARO,CASfC,EAAG,WATY,CA9BjB,CA0CIC,2BAA6BpC,qBAAA;AAAwB,EAAxB,CAA4BnB,eAAA,CAAgBmB,qBAAhB,CAAuCW,OAAA,CAAG,iCAAH,CAAvC,CAA8E,CAA9E,CAA5B,CAA8G9B,eAAA,CAAgBmB,qBAAhB,CAAuCW,OAAA,CAAG,iCAAH,CAAvC,CAA8E,CAA9E,CAA9G,CAAgM9B,eAAA,CAAgBmB,qBAAhB,CAAuCW,OAAA,CAAG,iCAAH,CAAvC,CAA8E,CAA9E,CAAhM,CAAkR9B,eAAA,CAAgBmB,qBAAhB,CAAuCW,OAAA,CAAG,iCAAH,CAAvC,CAA8E,CAA9E,CAAlR,CAAoW9B,eAAA,CAAgBmB,qBAAhB,CAAuCW,OAAA,CAAG,iCAAH,CAAvC,CAA8E,CAA9E,CAApW,CAAsbX,qBAAndoC,CA1CJ,CA4CIC,WAAa,CAAC,WAAD,CAAc,MAAd,CAAsB,KAAtB,CAA6B,QAA7B,CAAuC,OAAvC,CA5CjB;AA8CIC,QAAU,CAAC,KAAD,CAAQ,WAAR,CAAqB,QAArB,CAA+B,KAA/B,CAAsC,OAAtC,CA9Cd,CAgDIC,UAAY,IAAK,EAhDrB,CAkDIC,YAAc,CAChBC,KAAM,EADU,CAEhBC,QAAS,EAFO,CAGhBC,SAAU,EAHM,CAIhBC,OAAQ,EAJQ,CAlDlB,CAyDIC,YAAc,CAChBC,SAAU5B,IAAA,EADM,CAEhB6B,MAAO,CAFS,CAGhBhE,IAAK,EAHW,CAIhBiE,KAAM,EAJU,CAzDlB,CAgEIC,iBAAmBA,QAAyB,CAACC,GAAD,CAAMC,QAAN,CAAgB,CAC9D,MAAY,IAAZ,GAAID,GAAJ,CACsB,IAAb,GAAAC,QAAA,CAAoB,mBAApB,CAA0C,qBADnD,CAGO,IAJuD,CAhEhE,CAuEIC,yBAA2BA,QAAiC,CAACC,cAAD,CAAiB,CAC/E,IAAIC,gBAAkBD,cAAAE,IAAA,CAAmB,UAAnB,CAAAC,QAAtB,CACIC,KAAOjD,GAAA,CAAI,EAAJ,CAEX6C,eAAAK,QAAA,CAAuB,QAAS,CAACC,UAAD,CAAa,CACvCA,UAAAC,gBAAJ,EACED,UAAAC,gBAAAF,QAAA,CAAmC,QAAS,CAACR,GAAD,CAAM,CAChDO,IAAA;AAAOA,IAAAI,IAAA,CAASX,GAAT,CADyC,CAAlD,CAKFO,KAAA,CAAOA,IAAAI,IAAA,CAASF,UAAAH,QAAT,CAPoC,CAA7C,CAUA,OAAOC,KAAAK,OAAA,CAAY,QAAS,CAACZ,GAAD,CAAM,CAChC,MAAOA,IAAP,EAAcA,GAAd,GAAsBI,eADU,CAA3B,CAAAS,QAAA,EAAAC,KAAA,EAdwE,CAvEjF,CA2FIC,oBAAsBA,QAA4B,CAACf,GAAD,CAAMC,QAAN,CAAgBe,mBAAhB,CAAqC,CACzF,IAAK,IAAIC,GAAK,CAAd,CAAiBA,EAAjB,CAAsBD,mBAAAvE,OAAtB,CAAkDwE,EAAA,EAAlD,CAAwD,CACtD,IAAIC,UAAYF,mBAAA,CAAoBC,EAApB,CAAA,CAAwBjB,GAAxB,CAA6BC,QAA7B,CAChB,IAAIiB,SAAJ,CACE,MAAOA,UAH6C,CAMxD,MAAO,KAPkF,CA3F3F,CAqGIC,mBAAqBA,QAA2B,CAACnB,GAAD,CAAMC,QAAN,CAAgBE,cAAhB,CAAgC,CAC9EiB,cAAAA,CAAejB,cAAAS,OAAA,CAAsB,QAAS,CAACH,UAAD,CAAa,CAC7D,MAAOA,WAAAH,QAAP,GAA8BN,GAA9B,EAAqCS,UAAAY,QAArC;AAA4DrB,GAA5D,EAAmES,UAAAC,gBAAnE,EAAiGD,UAAAC,gBAAAY,KAAA,CAAgC,QAAS,CAACC,KAAD,CAAQ,CAChJ,MAAOA,MAAP,GAAiBvB,GAD+H,CAAjD,CADpC,CAA5C,CAAAwB,OAAA,EAAAC,MAAA,EAAAZ,QAAA,EAAAC,KAAA,EASnB,QAAQM,cAAA3E,OAAR,EACE,KAAK,CAAL,CACE,MAAO,UACT,MAAK,CAAL,CACE,MAAO2E,eAAA,CAAa,CAAb,CACT,SACE,MAAOL,oBAAA,CAAoBf,GAApB,CAAyBC,QAAzB,CAAmC,CAACF,gBAAD,CAAnC,CAAP,EAAiE,UANrE,CAVkF,CArGpF,CAyHI2B,iBAAmBA,QAAyB,CAAC1B,GAAD,CAAM2B,IAAN,CAAYC,YAAZ,CAA0B,CAExE,CADIC,GACJ,CADmBpD,UAAA,CAAWuB,GAAX,CACnB,EACE4B,YADF,CACiBA,YAAAjB,IAAA,CAAiBkB,GAAjB,CAAAC,aAAA,EADjB,CAEWH,IAFX,WAE2BI,YAF3B,GAIEH,YAJF,CAIiBA,YAAAI,cAAA,CAA2B,QAAS,CAACC,KAAD,CAAQ,CACzD,IAAIC;AAFYP,IAECM,MAAAC,WAAjB,CACIC,UAHYR,IAGAM,MAAAE,UADhB,CAEIC,eAJYT,IAIKM,MAAAG,eAEiB,EAAtC,EAAI7D,UAAA8D,QAAA,CAAmBH,UAAnB,CAAJ,CACED,KAAAtB,IAAA,CAAU,MAAV,CADF,CAEgD,CAFhD,EAEWnC,aAAA6D,QAAA,CAAsBH,UAAtB,CAFX,EAGED,KAAAK,OAAA,CAAa,MAAb,CAGgB,SAAlB,GAAIH,SAAJ,CACEF,KAAAtB,IAAA,CAAU,QAAV,CADF,CAEyB,QAFzB,GAEWwB,SAFX,EAGEF,KAAAK,OAAA,CAAa,QAAb,CAGqB,YAAvB,GAAIF,cAAJ,EACEH,KAAAtB,IAAA,CAAU,WAAV,CAEqB,eAAvB,GAAIyB,cAAJ,EACEH,KAAAtB,IAAA,CAAU,eAAV,CAEqB,OAAvB,GAAIyB,cAAJ,GACEH,KAAAK,OAAA,CAAa,WAAb,CACA,CAAAL,KAAAK,OAAA,CAAa,eAAb,CAFF,CAvByD,CAA5C,CAAAR,aAAA,EAJjB,CAiCA;MAAOF,aAnCiE,CAzH1E,CA+JIW,WAAaA,QAAmB,CAACC,CAAD,CAAIC,CAAJ,CAAOC,2BAAP,CAAoC,CAGtE,IAAIC,QAAUH,CAAAjD,KAAAqD,MAAA,CAAc,EAAd,CAAd,CACIC,SAAWJ,CAAAlD,KAAAqD,MAAA,CAAa,CAAb,CAAgB,CAAhB,CAEC,KAAhB,GAAID,OAAJ,EAAqC,IAArC,GAAwBE,QAAxB,EAA8CH,2BAA9C,GACEF,CAAAjD,KAGA,CAHSiD,CAAAjD,KAAAqD,MAAA,CAAa,CAAb,CAAiB,EAAjB,CAGT,CAFAJ,CAAAhD,QAAAsD,IAAA,EAEA,CADAN,CAAA/C,SAAAqD,IAAA,EACA,CAAAN,CAAA9C,OAAAoD,IAAA,EAJF,CAQA,IAAgB,IAAhB,GAAIH,OAAJ,CAAsB,CACpB,GAlKQI,GAkKR,GAAIN,CAAAlD,KAAJ,EAAmC,IAAnC,GAAwBkD,CAAAlD,KAAxB,CACE,MAAOiD,EACF,IApKCO,GAoKD,GAAIF,QAAJ,EAAuC,IAAvC,GAA0BA,QAA1B,CACLJ,CAAAlD,KAEA,CAFSkD,CAAAlD,KAAAqD,MAAA,CAAa,CAAb,CAET,CADAH,CAAAjD,QAAAwD,MAAA,EACA,CAAAP,CAAAhD,SAAAuD,MAAA,EANkB,CAUtB,MAAO,CACLzD,KAAMiD,CAAAjD,KAANA,CAAekD,CAAAlD,KADV,CAELC,QAASgD,CAAAhD,QAAAyD,OAAA,CAAiBR,CAAAjD,QAAjB,CAFJ,CAGLC,SAAU+C,CAAA/C,SAAAwD,OAAA,CAAkBR,CAAAhD,SAAlB,CAHL;AAILC,OAAQ8C,CAAA9C,OAAAuD,OAAA,CAAgBR,CAAA/C,OAAhB,CAJH,CAxB+D,CA/JxE,CAoMIwD,4BAA8BA,QAAoC,CAACC,IAAD,CAAOC,SAAP,CAAkB,CACtF,MAAOA,UAAA9B,KAAA,CAAe,QAAS,CAACtB,GAAD,CAAM,CACnC,MAAoC,EAApC,GAAOmD,IAAAd,QAAA,CAAa,MAAb,CAAmBrC,GAAnB,CAD4B,CAA9B,CAD+E,CApMxF,CA0MIqD,iBAAmBA,QAAyB,CAACC,IAAD,CAAO,CACnDA,IAAF,WAAkBC,kBAAlB,CAA2J,IAAK,EAAhK,CAA+E3F,SAAA,CAAU,CAAA,CAAV,CAAiB,oCAAjB,CAC3E4F,KAAAA,CAAWF,IAAAE,SACf,OAAoB,OAApB,GAAOA,IAAP,EAA4C,QAA5C,GAA+BA,IAA/B,EAAqE,SAArE,GAAwDA,IAHH,CA1MvD,CAgNIC,mBAAqBA,QAA2B,CAACC,QAAD,CAAW,CAC7D,IAAIjE,SAAekE,KAAJ,CAAU,CAAV,CACXD,SAAJ,GACEjE,QAAA,CAAS,CAAT,CADF,CACgBiE,QADhB,CAGA,OAAOtH,SAAA,CAAS,EAAT,CAAakD,WAAb,CAA0B,CAC/BC,KA1MQwD,GAyMuB,CAE/BvD,QAAS,CAACvB,UAAA,EAAD,CAFsB;AAG/BwB,SAAUA,QAHqB,CAA1B,CALsD,CAhN/D,CA4NImE,oBAAsBA,QAA4B,EAAG,CACvD,MAAOxH,SAAA,CAAS,EAAT,CAAakD,WAAb,CAA0B,CAC/BC,KAAM,IADyB,CAE/BC,QAAS,CAACvB,UAAA,EAAD,CAFsB,CAG/BwB,SAAckE,KAAJ,CAAU,CAAV,CAHqB,CAA1B,CADgD,CA5NzD,CAoOIE,gBAAkBA,QAAwB,EAAG,CAG/C,MAAOzH,SAAA,CAAS,EAAT,CAAauD,WAAb,CAFwB,CAAnBmE,CAAAtH,SAAAC,OAAAqH,EAAyCC,IAAAA,EAAzCD,GAAwBtH,SAAA,CAAU,CAAV,CAAxBsH,CAAqDtH,SAAA,CAAU,CAAV,CAArDsH,CAAoE,EAEzE,CAHwC,CApOjD,CA0OIE,qBAAuBA,QAA6B,CAACC,KAAD,CAAQpE,KAAR,CAAe,CACrE,IAAIqE,UAA+B,CAAnB,CAAA1H,SAAAC,OAAA,EAAyCsH,IAAAA,EAAzC,GAAwBvH,SAAA,CAAU,CAAV,CAAxB,CAAqDA,SAAA,CAAU,CAAV,CAArD,CAAoE,IAEpF,OAAO,CACL+C,KAAM,IADD,CAELC,QAAS,CAACvB,UAAA,EAAD,CAFJ,CAGLwB,SAAckE,KAAJ,CAAU,CAAV,CAHL,CAILjE,OAAQ,CAACmE,eAAA,CAAgB,CACvBM,OAAQD,SADe,CAEvBrI,IAAK6B,iBAAA,EAFkB,CAGvBoC,KAAMmE,KAHiB;AAIvBpE,MAAOuE,IAAAC,IAAA,CAAS,CAAT,CAAYD,IAAAE,IAAA,CAtOTC,CAsOS,CAAoB1E,KAApB,CAAZ,CAJgB,CAAhB,CAAD,CAJH,CAH8D,CA1OvE,CA8PI2E,iBAAmBA,QAAyB,CAAC7C,IAAD,CAAO,CACrD,IAAI9B,MAA2B,CAAnB,CAAArD,SAAAC,OAAA,EAAyCsH,IAAAA,EAAzC,GAAwBvH,SAAA,CAAU,CAAV,CAAxB,CAAqDA,SAAA,CAAU,CAAV,CAArD,CAAoE,CAEhFT,OAAA0I,KAAA,CAAYvF,yBAAZ,CAAAoC,KAAA,CAA4C,QAAS,CAACoD,UAAD,CAAa,CAC5D/C,IAAAgD,UAAAC,SAAA,CAAwBF,UAAxB,CAAJ,GACE7E,KADF,CACUX,yBAAA,CAA0BwF,UAA1B,CADV,CADgE,CAAlE,CAKA,OAAO7E,MAR8C,CA9PvD,CAyQIgF,YAAcA,QAASA,YAAW,CAACC,SAAD,CAAYnD,IAAZ,CAAkBoD,WAAlB,CAA+B9E,QAA/B,CAAyC+E,OAAzC,CAAkD5B,SAAlD,CAA6DvD,KAA7D,CAAoEM,cAApE,CAAoFuD,QAApF,CAA8FQ,SAA9F,CAAyG,CAC7I,IAAIe,cAAgB5F,SAApB,CACI6F,SAAWvD,IAAAuD,SAAAC,YAAA,EADf,CAEIC;AAAeN,SAFnB,CAGIO,cAAgB,UAHpB,CAIIC,SAAW,CAAA,CAJf,CAKIC,YAAcP,OAAdO,EAAyBpE,kBAAA,CAAmB6D,OAAnB,CAA4B/E,QAA5B,CAAsCE,cAAtC,CAL7B,CAMIqF,MAAQpJ,QAAA,CAAS,EAAT,CAAakD,WAAb,CANZ,CAOImG,SAAW,IAPf,CAQIC,SAAW,IAAK,EAGpB,IAAiB,OAAjB,GAAIR,QAAJ,CAA0B,CACpBS,SAAAA,CAAQhE,IAAAiE,YACRC,MAAAA,CAAkBF,SAAAG,KAAA,EAItB,IAAI7F,QAAJ,EAAoC,EAApC,GAAgB4F,KAAhB,EAA0ClE,IAAAoE,cAA1C,GACMC,QACA,CADiBrE,IAAAoE,cAAAb,SAAAC,YAAA,EACjB,CAAmB,IAAnB,GAAAa,QAAA,EAA8C,IAA9C,GAA2BA,QAFjC,EAGI,MAAO,CAAER,MAAOpJ,QAAA,CAAS,EAAT,CAAakD,WAAb,CAAT,CAAoCwF,UAAWA,SAA/C,CAIX,IAAwB,EAAxB,GAAIe,KAAJ,EAA0C,KAA1C,GAA8Bb,OAA9B,CACE,MAAO,CAAEQ,MAAO/B,kBAAA,CAAmBC,QAAnB,CAAT;AAAuCoB,UAAWA,SAAlD,CAEO,MAAhB,GAAIE,OAAJ,GAEEW,SAFF,CAEUA,SAAAM,QAAA,CAAc9H,QAAd,CA3RF4E,GA2RE,CAFV,CAMA1D,UAAA,CAAY6F,QAEZ,OAAO,CACLM,MAAO,CACLjG,KAAMoG,SADD,CAELnG,QAASmE,KAAA,CAAMgC,SAAAlJ,OAAN,CAAAyJ,KAAA,CAAyBnB,WAAzB,CAFJ,CAGLtF,SAAUkE,KAAA,CAAMgC,SAAAlJ,OAAN,CAAAyJ,KAAA,CAAyBxC,QAAzB,CAHL,CAILhE,OAAQ,EAJH,CADF,CAOLoF,UAAWA,SAPN,CAxBiB,CAoC1BzF,SAAA,CAAY6F,QAGZ,IAAiB,IAAjB,GAAIA,QAAJ,CACE,MAAsB,IAAtB,GAAID,aAAJ,EAAgCD,OAAhC,EAA2D,UAA3D,GAA2CO,WAA3C,CAMO,CAAEC,MAAO5B,mBAAA,EAAT,CAAgCkB,UAAWA,SAA3C,CANP,CACS,CACLU,MAAOxB,oBAAA,CAAqB,UAArB,CAAiCnE,KAAjC,CAAwCqE,SAAxC,CADF,CAELY,UAAWA,SAFN,CASX,IAAiB,KAAjB,GAAII,QAAJ;AAA0BvD,IAA1B,WAA0CwE,iBAA1C,EAA8DxE,IAAAyE,WAAAC,aAAA,CAA6B,KAA7B,CAA9D,EAAqG1E,IAAAyE,WAAAC,aAAA,CAA6B,KAA7B,CAAAvK,MAArG,CAAgJ,CAE9I,IAAIwK,aAAe,EAEnBlH,QAAAoB,QAAA,CAAgB,QAAS,CAAC+F,IAAD,CAAO,CAC9B,IAAIC,eAJM7E,IAIW8E,aAAA,CAAmBF,IAAnB,CACjBC,eAAJ,GACEF,YAAA,CAAaC,IAAb,CADF,CACuBC,cADvB,CAF8B,CAAhC,CAWA7E,KAAAiE,YAAA,CAAmB,cAGnBlC,SAAA,CAAWvG,WAAAuJ,SAAA,CAAqB,OAArB,CAA8B,SAA9B,CAAyCJ,YAAzC,EAAyD,EAAzD,CAlBmI,CAsBhJvB,WAAA,CAAcrD,gBAAA,CAAiBwD,QAAjB,CAA2BvD,IAA3B,CAAiCoD,WAAjC,CAGd,IAAiB,IAAjB,GAAIG,QAAJ,EAAsC,IAAtC,GAAyBA,QAAzB,CACMjF,QAGJ,GAFEJ,KAEF,EAFW,CAEX,EAAAI,QAAA,CAAWiF,QAGT,EAACpH,2BAAL;AAAiD,IAAjD,GAAoCoH,QAApC,EAAyDvD,IAAzD,WAAyEI,YAAzE,GACElC,KADF,CACU2E,gBAAA,CAAiB7C,IAAjB,CAAuB9B,KAAvB,CADV,CAII8G,UAAAA,CAAYxF,kBAAA,CAAmB+D,QAAnB,CAA6BjF,QAA7B,CAAuCE,cAAvC,CACZyG,SAAAA,CAAc3G,QAAd2G,EAAsC,IAAtCA,GAA0B5B,OAA1B4B,EAA2D,IAA3DA,GAA8C1B,QAC9C2B,cAAAA,EAA4B,CAAC7B,OAA7B6B,EAAwC/I,2BAAxC+I,GAAyG,EAAzGA,GAAwEzD,SAAAf,QAAA,CAAkB6C,QAAlB,CAG5E,IAAI0B,QAAJ,EAAmBC,aAAnB,CACErB,KAGA,CAHQxB,oBAAA,CAAqB2C,SAArB,CAAgC9G,KAAhC,CAAuCqE,SAAvC,CAGR,CAFAwB,QAEA,CAFWF,KAAA9F,OAAA,CAAa,CAAb,CAAA7D,IAEX,CADAmJ,OACA,CADUE,QACV,CAAAI,QAAA,CAAW,CAACxH,2BAIV8I,SAAJ,GACEvB,aADF,CAC+B,IAAb,GAAApF,QAAA,CAAoB,qBAApB;AAA4C,mBAD9D,CAKA,KAAI6G,MAAQnF,IAAAoF,WACC,KAAb,EAAID,KAAJ,GACE5B,QADF,CACa4B,KAAA5B,SAAAC,YAAA,EADb,CAMA,KAFA,IAAI6B,SAAW,IAEf,CAAOF,KAAP,CAAA,CACMA,KAAJ,WAAqBvD,kBAArB,EAA0CuD,KAAAG,KAA1C,EAAwD5D,gBAAA,CAAiByD,KAAjB,CAAxD,CACG,QAAS,EAAG,CACX,IAAII,OAASJ,KAAb,CACIR,aAAe,EAEnBnH,WAAAqB,QAAA,CAAmB,QAAS,CAAC+F,IAAD,CAAO,CACjC,IAAIY,gBAAkBD,MAAAT,aAAA,CAAoBF,IAApB,CAClBY,gBAAJ,GACEb,YAAA,CAAaC,IAAb,CADF,CACuBY,eADvB,CAFiC,CAAnC,CAOAb,aAAAc,IAAA,CAAmBC,CAAA,IAAI7J,GAAJ,CAAQ0J,MAAAD,KAAR,CAAAI,UAAA,EAEnBL,SAAA,CAAW7J,WAAAuJ,SAAA,CAAqB,MAArB,CAA6B,SAA7B,CAAwCJ,YAAxC,EAAwD,EAAxD,CAbA,CAAb,EADF,CAiBEU,QAjBF;AAiBajD,IAAAA,EAoBb,CAjBIuD,SAiBJ,CAjBmBzC,WAAA,CAAYO,YAAZ,CAA0B0B,KAA1B,CAAiC/B,WAAjC,CAA8C9E,QAA9C,CAAwD+E,OAAxD,CAAiE5B,SAAjE,CAA4EvD,KAA5E,CAAmFM,cAAnF,CAAmG6G,QAAnG,EAA+GtD,QAA/G,CAAyH5F,2BAAA,CAA8B4H,QAA9B,CAAyC,IAAlK,CAiBnB,CAfI6B,YAeJ,CAf4BD,SAAAxC,UAe5B,CAbAW,QAaA,CAhBqB6B,SAAA9B,MAgBrB,CAVAA,KAUA,CAVQjD,UAAA,CAAWiD,KAAX,CAAkBC,QAAlB,CAA4B3H,2BAA5B,CAUR,CATI0J,SASJ,CATcV,KAAAW,YASd,CANI,CAACvD,SAML,EANkBsD,SAMlB,EAN4D,CAM5D,EAN6BpE,SAAAf,QAAA,CAAkB6C,QAAlB,CAM7B,EANiEF,OAMjE,GALEQ,KAKF,CALUjD,UAAA,CAAWiD,KAAX,CAAkB5B,mBAAA,EAAlB,CAKV,EAHI4D,SAGJ,GAFEtC,QAEF,CAFasC,SAAAtC,SAAAC,YAAA,EAEb,EAAA2B,KAAA,CAAQU,SAGNlC,SAAJ;CACEE,KADF,CACUjD,UAAA,CAAWiD,KAAX,CAAkBxB,oBAAA,CAAqBqB,aAArB,CAAoCxF,KAApC,CAA2CqE,SAA3C,CAAlB,CADV,CAIA,OAAO,CAAEsB,MAAOA,KAAT,CAAgBV,UAAWM,YAA3B,CAxKsI,CAzQ/I,CA+eIsC,4BAA8BA,QAAoC,CAAClC,KAAD,CAAQ,CAC5E,GAAI,CAACA,KAAL,EAAc,CAACA,KAAAjG,KAAf,EAA6B,CAACoE,KAAAgE,QAAA,CAAcnC,KAAA9F,OAAd,CAA9B,CACE,MAAO,KAQT,KAAIkI,MAAQ,CAAZ,CAEIC,UAAYrC,KAAA9F,OAFhB,CAGIoI,WAAatC,KAAAhG,QAHjB,CAIIuI,YAAcvC,KAAA/F,SAJlB,CAOIuI,gBAAkBlK,2BAAA,CAA8Bb,gBAA9B,CAAiDD,YAEvE,OAAOwI,MAAAjG,KAAA0I,MAAA,CAAiB,IAAjB,CAAAC,OAAA,CAA8B,QAAS,CAACC,GAAD,CAAMC,SAAN,CAAiBC,cAAjB,CAAwB,CAEpED,SAAA,CAAYvK,iBAAA,CAAkBuK,SAAlB,CAEZ;IAAInE,eAAQ4D,SAAA,CAAUQ,cAAV,CAAZ,CACIC,IAAMV,KAANU,CAAcF,SAAA3L,OADlB,CAEI+C,QAAUsI,UAAAlF,MAAA,CAAiBgF,KAAjB,CAAwBU,GAAxB,CAFd,CAGI7I,SAAWsI,WAAAnF,MAAA,CAAkBgF,KAAlB,CAAyBU,GAAzB,CACXC,QAAAA,CAAgBvK,IAAA,CAAKwB,OAAAgJ,IAAA,CAAY,QAAS,CAACvG,KAAD,CAAQoG,KAAR,CAAe,CACvDI,KAAAA,CAAO,CAAExG,MAAOA,KAAT,CAAgByG,OAAQ,IAAxB,CACPjJ,SAAA,CAAS4I,KAAT,CAAJ,GACEI,KAAAC,OADF,CACgBjJ,QAAA,CAAS4I,KAAT,CADhB,CAGA,OAAOtL,kBAAA4L,OAAA,CAAyBF,KAAzB,CALoD,CAApC,CAAL,CAOpBb,MAAA,CAAQU,GAAR,CAAc,CAEVzI,IAAAA,CAAQoE,cAAApE,MAjBwD,KAkBhEC,KAAOmE,cAAAnE,KAlByD,CAmBhEqE,OAASF,cAAAE,OAGTtI,eAAAA,CAAMoI,cAAApI,IAANA,EAAmB6B,iBAAA,EACvB,KAAIkL,kBAAoB,IAGxB,IAAIzE,MAAJ,CAAY,CACV,IAAI0E;AAAcV,GAAAW,SAAA,CAAa3E,MAAb,CAAlB,CACI4E,aAAeZ,GAAAa,cAAA,CAAkBH,WAAlB,CAGnB,IAAIE,YAAAE,aAAA,EAAAC,QAAA,EAAJ,EAA6CH,YAAAI,QAAA,EAA7C,CAAqE,CACnE,IAAIC,oBAAsBL,YAAAM,iBAAA,EAA1B,CACIC,WAAaP,YAAAI,QAAA,EACjBP,kBAAA,CAAoBlL,iBAAA,EAEpB,KAAI6L,SAAW,IAAItM,gBAAJ,CAAqB,CAClCpB,IAAK+M,iBAD6B,CAElCrJ,KAAM+J,UAF4B,CAGlCf,cAAea,mBAHmB,CAIlCjF,OAAQA,MAJ0B,CAKlCsD,YAAa5L,cALqB,CAArB,CAQfsM,IAAAa,cAAAQ,KAAA,CAAuBD,QAAvB,CAEAR,aAAA,CAAeA,YAAA/G,cAAA,CAA2B,QAAS,CAACiC,KAAD,CAAQ,CACzDA,KAAAwF,IAAA,CAAU,eAAV;AAA2BzL,IAAA,EAA3B,CAAAyL,IAAA,CAAuC,MAAvC,CAA+C,EAA/C,CAAAA,IAAA,CAAuD,UAAvD,CAAmEV,YAAAnJ,SAAA4J,KAAA,CAA2BD,QAAAG,OAAA,EAA3B,CAAnE,CADyD,CAA5C,CAfoD,CAoBrEvB,GAAAa,cAAA,CAAkBH,WAAlB,CAAA,CAAiCE,YAAAU,IAAA,CAAiB,UAAjB,CAA6BV,YAAAnJ,SAAA4J,KAAA,CAA2B3N,cAA3B,CAA7B,CAzBvB,CA4BR8N,SAAAA,CAAY,IAAI3B,eAAJ,CAAoB,CAClCnM,IAAKA,cAD6B,CAElCsI,OAAQA,MAF0B,CAGlCrE,KAAMA,IAH4B,CAIlCD,MAAOA,GAJ2B,CAKlCN,KAAM6I,SAL4B,CAMlCG,cAAeA,OANmB,CAOlCqB,YAAahB,iBAAbgB,GAA6C,CAAV,GAAAvB,cAAA,EAAeR,SAAA,CAAUQ,cAAV,CAAkB,CAAlB,CAAAlE,OAAf,GAA+CA,MAA/C,CAAwD,IAAxD,CAA+D0D,SAAA,CAAUQ,cAAV,CAAkB,CAAlB,CAAAxM,IAAlG+N,CAPkC,CAQlCnC,YAAaY,cAAA,GAAUR,SAAApL,OAAV,CAA6B,CAA7B,EAAkCoL,SAAA,CAAUQ,cAAV;AAAkB,CAAlB,CAAAlE,OAAlC,GAAkEA,MAAlE,CAA2E,IAA3E,CAAkF0D,SAAA,CAAUQ,cAAV,CAAkB,CAAlB,CAAAxM,IAR7D,CAApB,CAYhBsM,IAAAa,cAAAQ,KAAA,CAAuBG,SAAvB,CAGAxB,IAAAW,SAAA,CAAaa,SAAA9N,IAAb,CAAA,CAA8BwM,cAE9B,OAAOF,IAvE6D,CAA/D,CAdY0B,CACjBf,SAAU,EADOe,CAEjBb,cAAe,EAFEa,CAcZ,CAAAb,cAnBqE,CAwH9ExN,OAAAC,QAAA,CA1BqCqO,QAAuC,CAAC3G,aAAD,CAAO,CASjDA,IAAAA,KAAAA,aAAAA,CAAM4G,WARF,CAAnBA,CAAAvN,SAAAC,OAAAsN,EAAyChG,IAAAA,EAAzCgG,GAAwBvN,SAAA,CAAU,CAAV,CAAxBuN,CAAqDvN,SAAA,CAAU,CAAV,CAArDuN,CAAoEpM,mBAQnCwC,KAAAA,UAPV,CAAnBA,CAAA3D,SAAAC,OAAA0D,EAAyC4D,IAAAA,EAAzC5D,GAAwB3D,SAAA,CAAU,CAAV,CAAxB2D,CAAqD3D,SAAA,CAAU,CAAV,CAArD2D,CAAoEjD,0BA1JzFiG,KAAA,CAAOA,IAAA2C,KAAA,EAAAG,QAAA,CAAoB/H,QAApB,CAA8B,EAA9B,CAAA+H,QAAA,CAA0C7H,UAA1C,CAzaG2E,GAyaH,CAAAkD,QAAA,CAAqE5H,cAArE;AAAqF,EAArF,CAAA4H,QAAA,CAAiG3H,SAAjG,CAA4G,EAA5G,CAEP,KAAI0L,mBAAqB9J,wBAAA,CAAyBC,SAAzB,CAGzB,EADI8J,UACJ,CADeF,UAAA,CAAW5G,IAAX,CACf,GAGA9D,SA+CA,CA/CY,IA+CZ,CA1CI6K,IA0CJ,CA1CoBhH,2BAAA,CAA4BC,IAA5B,CAAkC6G,kBAAlC,CAAA,CAAwDA,kBAAxD,CAA6E,CAAC,KAAD,CA0CjG,CAtCIG,IAsCJ,CAtCetF,WAAA,CAgJmD1H,WAhJnD,CAAuB8M,UAAvB,CAAiChM,UAAA,EAAjC,CAA+C,IAA/C,CAAqD,IAArD,CAA2DiM,IAA3D,CAA2E,EAA3E,CAA8E/J,SAA9E,CAsCf,CApCIqF,SAoCJ,CApCY2E,IAAA3E,MAoCZ,CAnCIJ,IAmCJ,CAnCmB+E,IAAArF,UAmCnB,CAhCiC,CAgCjC,GAhCIU,SAAAjG,KAAA8C,QAAA,CAAmB,IAAnB,CAgCJ,GA/BEmD,SA+BF,CA/BU,CACNjG,KAAMiG,SAAAjG,KAAAqD,MAAA,CAAiB,CAAjB,CADA,CAENpD,QAASgG,SAAAhG,QAAAoD,MAAA,CAAoB,CAApB,CAFH,CAGNnD,SAAU+F,SAAA/F,SAAAmD,MAAA,CAAqB,CAArB,CAHJ,CAINlD,OAAQ8F,SAAA9F,OAJF,CA+BV;AAtB6B,IAsB7B,GAtBI8F,SAAAjG,KAAAqD,MAAA,CAAkB,EAAlB,CAsBJ,GArBE4C,SAAAjG,KAGA,CAHaiG,SAAAjG,KAAAqD,MAAA,CAAiB,CAAjB,CAAqB,EAArB,CAGb,CAFA4C,SAAAhG,QAEA,CAFgBgG,SAAAhG,QAAAoD,MAAA,CAAoB,CAApB,CAAwB,EAAxB,CAEhB,CADA4C,SAAA/F,SACA,CADiB+F,SAAA/F,SAAAmD,MAAA,CAAqB,CAArB,CAAyB,EAAzB,CACjB,CAAA4C,SAAA9F,OAAAoD,IAAA,EAkBF,EAd4B,CAc5B,GAdI0C,SAAA9F,OAAAjD,OAcJ,EAbE+I,SAAA9F,OAAA8J,KAAA,CAAkBpN,QAAA,CAAS,EAAT,CAAakD,WAAb,CAA0B,CAC1CQ,KAAM,UADoC,CAE1CD,MAAO,CAFmC,CAA1B,CAAlB,CAaF,CAJI2F,SAAAjG,KAAA0I,MAAA,CAAiB,IAAjB,CAAAxL,OAIJ,GAJsC+I,SAAA9F,OAAAjD,OAItC,CAJ4D,CAI5D,EAHE+I,SAAA9F,OAAA0K,QAAA,CAAqB,CAAEtK,KAAM,UAAR,CAAoBD,MAAO,CAA3B,CAArB,CAGF,CAAA,SAAA,CAAO,CAAE2F,MAAOA,SAAT,CAAgBV,UAAWM,IAA3B,CAlDP,EACE,SADF,CACS,IA6JT,IAAiB,IAAjB,EAAIiF,SAAJ,CACE,MAAO,KAILvF;IAAAA,CAAYuF,SAAAvF,UAIhB,OAAO,CACLkE,cAHkBtB,2BAAAsB,CAHRqB,SAAA7E,MAGQwD,CAEb,CAELlE,UAAWA,IAFN,CApB0E,CAlnB8D;\",\n\"sources\":[\"node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$convertFromHTMLToContentBlocks\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule convertFromHTMLToContentBlocks\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\\n\\nvar _knownListItemDepthCl,\\n    _assign = require('object-assign');\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nvar CharacterMetadata = require('./CharacterMetadata');\\nvar ContentBlock = require('./ContentBlock');\\nvar ContentBlockNode = require('./ContentBlockNode');\\nvar DefaultDraftBlockRenderMap = require('./DefaultDraftBlockRenderMap');\\nvar DraftEntity = require('./DraftEntity');\\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\\nvar Immutable = require('immutable');\\n\\nvar _require = require('immutable'),\\n    Set = _require.Set;\\n\\nvar URI = require('fbjs/lib/URI');\\n\\nvar cx = require('fbjs/lib/cx');\\nvar generateRandomKey = require('./generateRandomKey');\\nvar getSafeBodyFromHTML = require('./getSafeBodyFromHTML');\\nvar invariant = require('fbjs/lib/invariant');\\nvar sanitizeDraftText = require('./sanitizeDraftText');\\n\\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\\n\\nvar List = Immutable.List,\\n    OrderedSet = Immutable.OrderedSet;\\n\\n\\nvar NBSP = '&nbsp;';\\nvar SPACE = ' ';\\n\\n// Arbitrary max indent\\nvar MAX_DEPTH = 4;\\n\\n// used for replacing characters in HTML\\nvar REGEX_CR = new RegExp('\\\\r', 'g');\\nvar REGEX_LF = new RegExp('\\\\n', 'g');\\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\\nvar REGEX_CARRIAGE = new RegExp('&#13;?', 'g');\\nvar REGEX_ZWS = new RegExp('&#8203;?', 'g');\\n\\n// https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\\nvar boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];\\nvar notBoldValues = ['light', 'lighter', '100', '200', '300', '400'];\\n\\n// Block tag flow is different because LIs do not have\\n// a deterministic style ;_;\\nvar inlineTags = {\\n  b: 'BOLD',\\n  code: 'CODE',\\n  del: 'STRIKETHROUGH',\\n  em: 'ITALIC',\\n  i: 'ITALIC',\\n  s: 'STRIKETHROUGH',\\n  strike: 'STRIKETHROUGH',\\n  strong: 'BOLD',\\n  u: 'UNDERLINE'\\n};\\n\\nvar knownListItemDepthClasses = (_knownListItemDepthCl = {}, _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth0'), 0), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth1'), 1), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth2'), 2), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth3'), 3), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth4'), 4), _knownListItemDepthCl);\\n\\nvar anchorAttr = ['className', 'href', 'rel', 'target', 'title'];\\n\\nvar imgAttr = ['alt', 'className', 'height', 'src', 'width'];\\n\\nvar lastBlock = void 0;\\n\\nvar EMPTY_CHUNK = {\\n  text: '',\\n  inlines: [],\\n  entities: [],\\n  blocks: []\\n};\\n\\nvar EMPTY_BLOCK = {\\n  children: List(),\\n  depth: 0,\\n  key: '',\\n  type: ''\\n};\\n\\nvar getListBlockType = function getListBlockType(tag, lastList) {\\n  if (tag === 'li') {\\n    return lastList === 'ol' ? 'ordered-list-item' : 'unordered-list-item';\\n  }\\n  return null;\\n};\\n\\nvar getBlockMapSupportedTags = function getBlockMapSupportedTags(blockRenderMap) {\\n  var unstyledElement = blockRenderMap.get('unstyled').element;\\n  var tags = Set([]);\\n\\n  blockRenderMap.forEach(function (draftBlock) {\\n    if (draftBlock.aliasedElements) {\\n      draftBlock.aliasedElements.forEach(function (tag) {\\n        tags = tags.add(tag);\\n      });\\n    }\\n\\n    tags = tags.add(draftBlock.element);\\n  });\\n\\n  return tags.filter(function (tag) {\\n    return tag && tag !== unstyledElement;\\n  }).toArray().sort();\\n};\\n\\n// custom element conversions\\nvar getMultiMatchedType = function getMultiMatchedType(tag, lastList, multiMatchExtractor) {\\n  for (var ii = 0; ii < multiMatchExtractor.length; ii++) {\\n    var matchType = multiMatchExtractor[ii](tag, lastList);\\n    if (matchType) {\\n      return matchType;\\n    }\\n  }\\n  return null;\\n};\\n\\nvar getBlockTypeForTag = function getBlockTypeForTag(tag, lastList, blockRenderMap) {\\n  var matchedTypes = blockRenderMap.filter(function (draftBlock) {\\n    return draftBlock.element === tag || draftBlock.wrapper === tag || draftBlock.aliasedElements && draftBlock.aliasedElements.some(function (alias) {\\n      return alias === tag;\\n    });\\n  }).keySeq().toSet().toArray().sort();\\n\\n  // if we dont have any matched type, return unstyled\\n  // if we have one matched type return it\\n  // if we have multi matched types use the multi-match function to gather type\\n  switch (matchedTypes.length) {\\n    case 0:\\n      return 'unstyled';\\n    case 1:\\n      return matchedTypes[0];\\n    default:\\n      return getMultiMatchedType(tag, lastList, [getListBlockType]) || 'unstyled';\\n  }\\n};\\n\\nvar processInlineTag = function processInlineTag(tag, node, currentStyle) {\\n  var styleToCheck = inlineTags[tag];\\n  if (styleToCheck) {\\n    currentStyle = currentStyle.add(styleToCheck).toOrderedSet();\\n  } else if (node instanceof HTMLElement) {\\n    var htmlElement = node;\\n    currentStyle = currentStyle.withMutations(function (style) {\\n      var fontWeight = htmlElement.style.fontWeight;\\n      var fontStyle = htmlElement.style.fontStyle;\\n      var textDecoration = htmlElement.style.textDecoration;\\n\\n      if (boldValues.indexOf(fontWeight) >= 0) {\\n        style.add('BOLD');\\n      } else if (notBoldValues.indexOf(fontWeight) >= 0) {\\n        style.remove('BOLD');\\n      }\\n\\n      if (fontStyle === 'italic') {\\n        style.add('ITALIC');\\n      } else if (fontStyle === 'normal') {\\n        style.remove('ITALIC');\\n      }\\n\\n      if (textDecoration === 'underline') {\\n        style.add('UNDERLINE');\\n      }\\n      if (textDecoration === 'line-through') {\\n        style.add('STRIKETHROUGH');\\n      }\\n      if (textDecoration === 'none') {\\n        style.remove('UNDERLINE');\\n        style.remove('STRIKETHROUGH');\\n      }\\n    }).toOrderedSet();\\n  }\\n  return currentStyle;\\n};\\n\\nvar joinChunks = function joinChunks(A, B, experimentalHasNestedBlocks) {\\n  // Sometimes two blocks will touch in the DOM and we need to strip the\\n  // extra delimiter to preserve niceness.\\n  var lastInA = A.text.slice(-1);\\n  var firstInB = B.text.slice(0, 1);\\n\\n  if (lastInA === '\\\\r' && firstInB === '\\\\r' && !experimentalHasNestedBlocks) {\\n    A.text = A.text.slice(0, -1);\\n    A.inlines.pop();\\n    A.entities.pop();\\n    A.blocks.pop();\\n  }\\n\\n  // Kill whitespace after blocks\\n  if (lastInA === '\\\\r') {\\n    if (B.text === SPACE || B.text === '\\\\n') {\\n      return A;\\n    } else if (firstInB === SPACE || firstInB === '\\\\n') {\\n      B.text = B.text.slice(1);\\n      B.inlines.shift();\\n      B.entities.shift();\\n    }\\n  }\\n\\n  return {\\n    text: A.text + B.text,\\n    inlines: A.inlines.concat(B.inlines),\\n    entities: A.entities.concat(B.entities),\\n    blocks: A.blocks.concat(B.blocks)\\n  };\\n};\\n\\n/**\\n * Check to see if we have anything like <p> <blockquote> <h1>... to create\\n * block tags from. If we do, we can use those and ignore <div> tags. If we\\n * don't, we can treat <div> tags as meaningful (unstyled) blocks.\\n */\\nvar containsSemanticBlockMarkup = function containsSemanticBlockMarkup(html, blockTags) {\\n  return blockTags.some(function (tag) {\\n    return html.indexOf('<' + tag) !== -1;\\n  });\\n};\\n\\nvar hasValidLinkText = function hasValidLinkText(link) {\\n  !(link instanceof HTMLAnchorElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Link must be an HTMLAnchorElement.') : invariant(false) : void 0;\\n  var protocol = link.protocol;\\n  return protocol === 'http:' || protocol === 'https:' || protocol === 'mailto:';\\n};\\n\\nvar getWhitespaceChunk = function getWhitespaceChunk(inEntity) {\\n  var entities = new Array(1);\\n  if (inEntity) {\\n    entities[0] = inEntity;\\n  }\\n  return _extends({}, EMPTY_CHUNK, {\\n    text: SPACE,\\n    inlines: [OrderedSet()],\\n    entities: entities\\n  });\\n};\\n\\nvar getSoftNewlineChunk = function getSoftNewlineChunk() {\\n  return _extends({}, EMPTY_CHUNK, {\\n    text: '\\\\n',\\n    inlines: [OrderedSet()],\\n    entities: new Array(1)\\n  });\\n};\\n\\nvar getChunkedBlock = function getChunkedBlock() {\\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n  return _extends({}, EMPTY_BLOCK, props);\\n};\\n\\nvar getBlockDividerChunk = function getBlockDividerChunk(block, depth) {\\n  var parentKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\\n\\n  return {\\n    text: '\\\\r',\\n    inlines: [OrderedSet()],\\n    entities: new Array(1),\\n    blocks: [getChunkedBlock({\\n      parent: parentKey,\\n      key: generateRandomKey(),\\n      type: block,\\n      depth: Math.max(0, Math.min(MAX_DEPTH, depth))\\n    })]\\n  };\\n};\\n\\n/**\\n *  If we're pasting from one DraftEditor to another we can check to see if\\n *  existing list item depth classes are being used and preserve this style\\n */\\nvar getListItemDepth = function getListItemDepth(node) {\\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n\\n  Object.keys(knownListItemDepthClasses).some(function (depthClass) {\\n    if (node.classList.contains(depthClass)) {\\n      depth = knownListItemDepthClasses[depthClass];\\n    }\\n  });\\n  return depth;\\n};\\n\\nvar genFragment = function genFragment(entityMap, node, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, inEntity, parentKey) {\\n  var lastLastBlock = lastBlock;\\n  var nodeName = node.nodeName.toLowerCase();\\n  var newEntityMap = entityMap;\\n  var nextBlockType = 'unstyled';\\n  var newBlock = false;\\n  var inBlockType = inBlock && getBlockTypeForTag(inBlock, lastList, blockRenderMap);\\n  var chunk = _extends({}, EMPTY_CHUNK);\\n  var newChunk = null;\\n  var blockKey = void 0;\\n\\n  // Base Case\\n  if (nodeName === '#text') {\\n    var _text = node.textContent;\\n    var nodeTextContent = _text.trim();\\n\\n    // We should not create blocks for leading spaces that are\\n    // existing around ol/ul and their children list items\\n    if (lastList && nodeTextContent === '' && node.parentElement) {\\n      var parentNodeName = node.parentElement.nodeName.toLowerCase();\\n      if (parentNodeName === 'ol' || parentNodeName === 'ul') {\\n        return { chunk: _extends({}, EMPTY_CHUNK), entityMap: entityMap };\\n      }\\n    }\\n\\n    if (nodeTextContent === '' && inBlock !== 'pre') {\\n      return { chunk: getWhitespaceChunk(inEntity), entityMap: entityMap };\\n    }\\n    if (inBlock !== 'pre') {\\n      // Can't use empty string because MSWord\\n      _text = _text.replace(REGEX_LF, SPACE);\\n    }\\n\\n    // save the last block so we can use it later\\n    lastBlock = nodeName;\\n\\n    return {\\n      chunk: {\\n        text: _text,\\n        inlines: Array(_text.length).fill(inlineStyle),\\n        entities: Array(_text.length).fill(inEntity),\\n        blocks: []\\n      },\\n      entityMap: entityMap\\n    };\\n  }\\n\\n  // save the last block so we can use it later\\n  lastBlock = nodeName;\\n\\n  // BR tags\\n  if (nodeName === 'br') {\\n    if (lastLastBlock === 'br' && (!inBlock || inBlockType === 'unstyled')) {\\n      return {\\n        chunk: getBlockDividerChunk('unstyled', depth, parentKey),\\n        entityMap: entityMap\\n      };\\n    }\\n    return { chunk: getSoftNewlineChunk(), entityMap: entityMap };\\n  }\\n\\n  // IMG tags\\n  if (nodeName === 'img' && node instanceof HTMLImageElement && node.attributes.getNamedItem('src') && node.attributes.getNamedItem('src').value) {\\n    var image = node;\\n    var entityConfig = {};\\n\\n    imgAttr.forEach(function (attr) {\\n      var imageAttribute = image.getAttribute(attr);\\n      if (imageAttribute) {\\n        entityConfig[attr] = imageAttribute;\\n      }\\n    });\\n    // Forcing this node to have children because otherwise no entity will be\\n    // created for this node.\\n    // The child text node cannot just have a space or return as content -\\n    // we strip those out.\\n    // See https://github.com/facebook/draft-js/issues/231 for some context.\\n    node.textContent = '\\\\uD83D\\\\uDCF7';\\n\\n    // TODO: update this when we remove DraftEntity entirely\\n    inEntity = DraftEntity.__create('IMAGE', 'MUTABLE', entityConfig || {});\\n  }\\n\\n  // Inline tags\\n  inlineStyle = processInlineTag(nodeName, node, inlineStyle);\\n\\n  // Handle lists\\n  if (nodeName === 'ul' || nodeName === 'ol') {\\n    if (lastList) {\\n      depth += 1;\\n    }\\n    lastList = nodeName;\\n  }\\n\\n  if (!experimentalTreeDataSupport && nodeName === 'li' && node instanceof HTMLElement) {\\n    depth = getListItemDepth(node, depth);\\n  }\\n\\n  var blockType = getBlockTypeForTag(nodeName, lastList, blockRenderMap);\\n  var inListBlock = lastList && inBlock === 'li' && nodeName === 'li';\\n  var inBlockOrHasNestedBlocks = (!inBlock || experimentalTreeDataSupport) && blockTags.indexOf(nodeName) !== -1;\\n\\n  // Block Tags\\n  if (inListBlock || inBlockOrHasNestedBlocks) {\\n    chunk = getBlockDividerChunk(blockType, depth, parentKey);\\n    blockKey = chunk.blocks[0].key;\\n    inBlock = nodeName;\\n    newBlock = !experimentalTreeDataSupport;\\n  }\\n\\n  // this is required so that we can handle 'ul' and 'ol'\\n  if (inListBlock) {\\n    nextBlockType = lastList === 'ul' ? 'unordered-list-item' : 'ordered-list-item';\\n  }\\n\\n  // Recurse through children\\n  var child = node.firstChild;\\n  if (child != null) {\\n    nodeName = child.nodeName.toLowerCase();\\n  }\\n\\n  var entityId = null;\\n\\n  while (child) {\\n    if (child instanceof HTMLAnchorElement && child.href && hasValidLinkText(child)) {\\n      (function () {\\n        var anchor = child;\\n        var entityConfig = {};\\n\\n        anchorAttr.forEach(function (attr) {\\n          var anchorAttribute = anchor.getAttribute(attr);\\n          if (anchorAttribute) {\\n            entityConfig[attr] = anchorAttribute;\\n          }\\n        });\\n\\n        entityConfig.url = new URI(anchor.href).toString();\\n        // TODO: update this when we remove DraftEntity completely\\n        entityId = DraftEntity.__create('LINK', 'MUTABLE', entityConfig || {});\\n      })();\\n    } else {\\n      entityId = undefined;\\n    }\\n\\n    var _genFragment = genFragment(newEntityMap, child, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, entityId || inEntity, experimentalTreeDataSupport ? blockKey : null),\\n        generatedChunk = _genFragment.chunk,\\n        maybeUpdatedEntityMap = _genFragment.entityMap;\\n\\n    newChunk = generatedChunk;\\n    newEntityMap = maybeUpdatedEntityMap;\\n\\n    chunk = joinChunks(chunk, newChunk, experimentalTreeDataSupport);\\n    var sibling = child.nextSibling;\\n\\n    // Put in a newline to break up blocks inside blocks\\n    if (!parentKey && sibling && blockTags.indexOf(nodeName) >= 0 && inBlock) {\\n      chunk = joinChunks(chunk, getSoftNewlineChunk());\\n    }\\n    if (sibling) {\\n      nodeName = sibling.nodeName.toLowerCase();\\n    }\\n    child = sibling;\\n  }\\n\\n  if (newBlock) {\\n    chunk = joinChunks(chunk, getBlockDividerChunk(nextBlockType, depth, parentKey));\\n  }\\n\\n  return { chunk: chunk, entityMap: newEntityMap };\\n};\\n\\nvar getChunkForHTML = function getChunkForHTML(html, DOMBuilder, blockRenderMap, entityMap) {\\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, '').replace(REGEX_ZWS, '');\\n\\n  var supportedBlockTags = getBlockMapSupportedTags(blockRenderMap);\\n\\n  var safeBody = DOMBuilder(html);\\n  if (!safeBody) {\\n    return null;\\n  }\\n  lastBlock = null;\\n\\n  // Sometimes we aren't dealing with content that contains nice semantic\\n  // tags. In this case, use divs to separate everything out into paragraphs\\n  // and hope for the best.\\n  var workingBlocks = containsSemanticBlockMarkup(html, supportedBlockTags) ? supportedBlockTags : ['div'];\\n\\n  // Start with -1 block depth to offset the fact that we are passing in a fake\\n  // UL block to start with.\\n  var fragment = genFragment(entityMap, safeBody, OrderedSet(), 'ul', null, workingBlocks, -1, blockRenderMap);\\n\\n  var chunk = fragment.chunk;\\n  var newEntityMap = fragment.entityMap;\\n\\n  // join with previous block to prevent weirdness on paste\\n  if (chunk.text.indexOf('\\\\r') === 0) {\\n    chunk = {\\n      text: chunk.text.slice(1),\\n      inlines: chunk.inlines.slice(1),\\n      entities: chunk.entities.slice(1),\\n      blocks: chunk.blocks\\n    };\\n  }\\n\\n  // Kill block delimiter at the end\\n  if (chunk.text.slice(-1) === '\\\\r') {\\n    chunk.text = chunk.text.slice(0, -1);\\n    chunk.inlines = chunk.inlines.slice(0, -1);\\n    chunk.entities = chunk.entities.slice(0, -1);\\n    chunk.blocks.pop();\\n  }\\n\\n  // If we saw no block tags, put an unstyled one in\\n  if (chunk.blocks.length === 0) {\\n    chunk.blocks.push(_extends({}, EMPTY_CHUNK, {\\n      type: 'unstyled',\\n      depth: 0\\n    }));\\n  }\\n\\n  // Sometimes we start with text that isn't in a block, which is then\\n  // followed by blocks. Need to fix up the blocks to add in\\n  // an unstyled block for this content\\n  if (chunk.text.split('\\\\r').length === chunk.blocks.length + 1) {\\n    chunk.blocks.unshift({ type: 'unstyled', depth: 0 });\\n  }\\n\\n  return { chunk: chunk, entityMap: newEntityMap };\\n};\\n\\nvar convertChunkToContentBlocks = function convertChunkToContentBlocks(chunk) {\\n  if (!chunk || !chunk.text || !Array.isArray(chunk.blocks)) {\\n    return null;\\n  }\\n\\n  var initialState = {\\n    cacheRef: {},\\n    contentBlocks: []\\n  };\\n\\n  var start = 0;\\n\\n  var rawBlocks = chunk.blocks,\\n      rawInlines = chunk.inlines,\\n      rawEntities = chunk.entities;\\n\\n\\n  var BlockNodeRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\\n\\n  return chunk.text.split('\\\\r').reduce(function (acc, textBlock, index) {\\n    // Make absolutely certain that our text is acceptable.\\n    textBlock = sanitizeDraftText(textBlock);\\n\\n    var block = rawBlocks[index];\\n    var end = start + textBlock.length;\\n    var inlines = rawInlines.slice(start, end);\\n    var entities = rawEntities.slice(start, end);\\n    var characterList = List(inlines.map(function (style, index) {\\n      var data = { style: style, entity: null };\\n      if (entities[index]) {\\n        data.entity = entities[index];\\n      }\\n      return CharacterMetadata.create(data);\\n    }));\\n    start = end + 1;\\n\\n    var depth = block.depth,\\n        type = block.type,\\n        parent = block.parent;\\n\\n\\n    var key = block.key || generateRandomKey();\\n    var parentTextNodeKey = null; // will be used to store container text nodes\\n\\n    // childrens add themselves to their parents since we are iterating in order\\n    if (parent) {\\n      var parentIndex = acc.cacheRef[parent];\\n      var parentRecord = acc.contentBlocks[parentIndex];\\n\\n      // if parent has text we need to split it into a separate unstyled element\\n      if (parentRecord.getChildKeys().isEmpty() && parentRecord.getText()) {\\n        var parentCharacterList = parentRecord.getCharacterList();\\n        var parentText = parentRecord.getText();\\n        parentTextNodeKey = generateRandomKey();\\n\\n        var textNode = new ContentBlockNode({\\n          key: parentTextNodeKey,\\n          text: parentText,\\n          characterList: parentCharacterList,\\n          parent: parent,\\n          nextSibling: key\\n        });\\n\\n        acc.contentBlocks.push(textNode);\\n\\n        parentRecord = parentRecord.withMutations(function (block) {\\n          block.set('characterList', List()).set('text', '').set('children', parentRecord.children.push(textNode.getKey()));\\n        });\\n      }\\n\\n      acc.contentBlocks[parentIndex] = parentRecord.set('children', parentRecord.children.push(key));\\n    }\\n\\n    var blockNode = new BlockNodeRecord({\\n      key: key,\\n      parent: parent,\\n      type: type,\\n      depth: depth,\\n      text: textBlock,\\n      characterList: characterList,\\n      prevSibling: parentTextNodeKey || (index === 0 || rawBlocks[index - 1].parent !== parent ? null : rawBlocks[index - 1].key),\\n      nextSibling: index === rawBlocks.length - 1 || rawBlocks[index + 1].parent !== parent ? null : rawBlocks[index + 1].key\\n    });\\n\\n    // insert node\\n    acc.contentBlocks.push(blockNode);\\n\\n    // cache ref for building links\\n    acc.cacheRef[blockNode.key] = index;\\n\\n    return acc;\\n  }, initialState).contentBlocks;\\n};\\n\\nvar convertFromHTMLtoContentBlocks = function convertFromHTMLtoContentBlocks(html) {\\n  var DOMBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;\\n  var blockRenderMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultDraftBlockRenderMap;\\n\\n  // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\\n  // arbitrary code in whatever environment you're running this in. For an\\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\\n\\n  // TODO: replace DraftEntity with an OrderedMap here\\n  var chunkData = getChunkForHTML(html, DOMBuilder, blockRenderMap, DraftEntity);\\n\\n  if (chunkData == null) {\\n    return null;\\n  }\\n\\n  var chunk = chunkData.chunk,\\n      entityMap = chunkData.entityMap;\\n\\n  var contentBlocks = convertChunkToContentBlocks(chunk);\\n\\n  return {\\n    contentBlocks: contentBlocks,\\n    entityMap: entityMap\\n  };\\n};\\n\\nmodule.exports = convertFromHTMLtoContentBlocks;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_defineProperty\",\"obj\",\"key\",\"value\",\"Object\",\"defineProperty\",\"enumerable\",\"configurable\",\"writable\",\"_extends\",\"_assign\",\"target\",\"i\",\"arguments\",\"length\",\"source\",\"prototype\",\"hasOwnProperty\",\"call\",\"_knownListItemDepthCl\",\"CharacterMetadata\",\"ContentBlock\",\"ContentBlockNode\",\"DefaultDraftBlockRenderMap\",\"DraftEntity\",\"DraftFeatureFlags\",\"Immutable\",\"Set\",\"_require\",\"URI\",\"cx\",\"generateRandomKey\",\"getSafeBodyFromHTML\",\"invariant\",\"sanitizeDraftText\",\"experimentalTreeDataSupport\",\"draft_tree_data_support\",\"List\",\"OrderedSet\",\"REGEX_CR\",\"REGEX_LF\",\"REGEX_NBSP\",\"REGEX_CARRIAGE\",\"REGEX_ZWS\",\"boldValues\",\"notBoldValues\",\"inlineTags\",\"b\",\"code\",\"del\",\"em\",\"s\",\"strike\",\"strong\",\"u\",\"knownListItemDepthClasses\",\"anchorAttr\",\"imgAttr\",\"lastBlock\",\"EMPTY_CHUNK\",\"text\",\"inlines\",\"entities\",\"blocks\",\"EMPTY_BLOCK\",\"children\",\"depth\",\"type\",\"getListBlockType\",\"tag\",\"lastList\",\"getBlockMapSupportedTags\",\"blockRenderMap\",\"unstyledElement\",\"get\",\"element\",\"tags\",\"forEach\",\"draftBlock\",\"aliasedElements\",\"add\",\"filter\",\"toArray\",\"sort\",\"getMultiMatchedType\",\"multiMatchExtractor\",\"ii\",\"matchType\",\"getBlockTypeForTag\",\"matchedTypes\",\"wrapper\",\"some\",\"alias\",\"keySeq\",\"toSet\",\"processInlineTag\",\"node\",\"currentStyle\",\"styleToCheck\",\"toOrderedSet\",\"HTMLElement\",\"withMutations\",\"style\",\"fontWeight\",\"fontStyle\",\"textDecoration\",\"indexOf\",\"remove\",\"joinChunks\",\"A\",\"B\",\"experimentalHasNestedBlocks\",\"lastInA\",\"slice\",\"firstInB\",\"pop\",\"SPACE\",\"shift\",\"concat\",\"containsSemanticBlockMarkup\",\"html\",\"blockTags\",\"hasValidLinkText\",\"link\",\"HTMLAnchorElement\",\"protocol\",\"getWhitespaceChunk\",\"inEntity\",\"Array\",\"getSoftNewlineChunk\",\"getChunkedBlock\",\"props\",\"undefined\",\"getBlockDividerChunk\",\"block\",\"parentKey\",\"parent\",\"Math\",\"max\",\"min\",\"MAX_DEPTH\",\"getListItemDepth\",\"keys\",\"depthClass\",\"classList\",\"contains\",\"genFragment\",\"entityMap\",\"inlineStyle\",\"inBlock\",\"lastLastBlock\",\"nodeName\",\"toLowerCase\",\"newEntityMap\",\"nextBlockType\",\"newBlock\",\"inBlockType\",\"chunk\",\"newChunk\",\"blockKey\",\"_text\",\"textContent\",\"nodeTextContent\",\"trim\",\"parentElement\",\"parentNodeName\",\"replace\",\"fill\",\"HTMLImageElement\",\"attributes\",\"getNamedItem\",\"entityConfig\",\"attr\",\"imageAttribute\",\"getAttribute\",\"__create\",\"blockType\",\"inListBlock\",\"inBlockOrHasNestedBlocks\",\"child\",\"firstChild\",\"entityId\",\"href\",\"anchor\",\"anchorAttribute\",\"url\",\"toString\",\"_genFragment\",\"maybeUpdatedEntityMap\",\"sibling\",\"nextSibling\",\"convertChunkToContentBlocks\",\"isArray\",\"start\",\"rawBlocks\",\"rawInlines\",\"rawEntities\",\"BlockNodeRecord\",\"split\",\"reduce\",\"acc\",\"textBlock\",\"index\",\"end\",\"characterList\",\"map\",\"data\",\"entity\",\"create\",\"parentTextNodeKey\",\"parentIndex\",\"cacheRef\",\"parentRecord\",\"contentBlocks\",\"getChildKeys\",\"isEmpty\",\"getText\",\"parentCharacterList\",\"getCharacterList\",\"parentText\",\"textNode\",\"push\",\"set\",\"getKey\",\"blockNode\",\"prevSibling\",\"initialState\",\"convertFromHTMLtoContentBlocks\",\"DOMBuilder\",\"supportedBlockTags\",\"safeBody\",\"workingBlocks\",\"fragment\",\"unshift\",\"chunkData\"]\n}\n"]