["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/removeEntitiesAtEdges.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$removeEntitiesAtEdges=function(global,process,require,module,exports,shadow$shims){function getRemovalRange(characters,key,offset){var removalRange;findRangesImmutable(characters,function(a,b){return a.getEntity()===b.getEntity()},function(element){return element.getEntity()===key},function(start,end){start<=offset&&end>=offset&&(removalRange={start:start,end:end})});\"object\"!==typeof removalRange?invariant(!1,\"Removal range must exist within character list.\"):\nvoid 0;return removalRange}function removeForBlock(entityMap,block,offset){var chars=block.getCharacterList(),charBefore=0<offset?chars.get(offset-1):void 0,charAfter=offset<chars.count()?chars.get(offset):void 0;charBefore=charBefore?charBefore.getEntity():void 0;if((charAfter=charAfter?charAfter.getEntity():void 0)&&charAfter===charBefore&&\"MUTABLE\"!==entityMap.__get(charAfter).getMutability()){offset=getRemovalRange(chars,charAfter,offset);entityMap=offset.start;for(offset=offset.end;entityMap<\noffset;)charAfter=chars.get(entityMap),chars=chars.set(entityMap,CharacterMetadata.applyEntity(charAfter,null)),entityMap++;return block.set(\"characterList\",chars)}return block}var CharacterMetadata=require(\"module$node_modules$draft_js$lib$CharacterMetadata\"),findRangesImmutable=require(\"module$node_modules$draft_js$lib$findRangesImmutable\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\");module.exports=function(contentState,selectionState){var blockMap=contentState.getBlockMap(),entityMap=\ncontentState.getEntityMap(),updatedBlocks={},startKey=selectionState.getStartKey(),startOffset=selectionState.getStartOffset(),startBlock=blockMap.get(startKey);startOffset=removeForBlock(entityMap,startBlock,startOffset);startOffset!==startBlock&&(updatedBlocks[startKey]=startOffset);startBlock=selectionState.getEndKey();var endOffset=selectionState.getEndOffset(),endBlock=blockMap.get(startBlock);startKey===startBlock&&(endBlock=startOffset);entityMap=removeForBlock(entityMap,endBlock,endOffset);\nentityMap!==endBlock&&(updatedBlocks[startBlock]=entityMap);return Object.keys(updatedBlocks).length?contentState.merge({blockMap:blockMap.merge(updatedBlocks),selectionAfter:selectionState}):contentState.set(\"selectionAfter\",selectionState)}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$removeEntitiesAtEdges\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule removeEntitiesAtEdges\n * @format\n * \n */\n\n'use strict';\n\nvar CharacterMetadata = require('./CharacterMetadata');\n\nvar findRangesImmutable = require('./findRangesImmutable');\nvar invariant = require('fbjs/lib/invariant');\n\nfunction removeEntitiesAtEdges(contentState, selectionState) {\n  var blockMap = contentState.getBlockMap();\n  var entityMap = contentState.getEntityMap();\n\n  var updatedBlocks = {};\n\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var startBlock = blockMap.get(startKey);\n  var updatedStart = removeForBlock(entityMap, startBlock, startOffset);\n\n  if (updatedStart !== startBlock) {\n    updatedBlocks[startKey] = updatedStart;\n  }\n\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n  var endBlock = blockMap.get(endKey);\n  if (startKey === endKey) {\n    endBlock = updatedStart;\n  }\n\n  var updatedEnd = removeForBlock(entityMap, endBlock, endOffset);\n\n  if (updatedEnd !== endBlock) {\n    updatedBlocks[endKey] = updatedEnd;\n  }\n\n  if (!Object.keys(updatedBlocks).length) {\n    return contentState.set('selectionAfter', selectionState);\n  }\n\n  return contentState.merge({\n    blockMap: blockMap.merge(updatedBlocks),\n    selectionAfter: selectionState\n  });\n}\n\nfunction getRemovalRange(characters, key, offset) {\n  var removalRange;\n  findRangesImmutable(characters, function (a, b) {\n    return a.getEntity() === b.getEntity();\n  }, function (element) {\n    return element.getEntity() === key;\n  }, function (start, end) {\n    if (start <= offset && end >= offset) {\n      removalRange = { start: start, end: end };\n    }\n  });\n  !(typeof removalRange === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Removal range must exist within character list.') : invariant(false) : void 0;\n  return removalRange;\n}\n\nfunction removeForBlock(entityMap, block, offset) {\n  var chars = block.getCharacterList();\n  var charBefore = offset > 0 ? chars.get(offset - 1) : undefined;\n  var charAfter = offset < chars.count() ? chars.get(offset) : undefined;\n  var entityBeforeCursor = charBefore ? charBefore.getEntity() : undefined;\n  var entityAfterCursor = charAfter ? charAfter.getEntity() : undefined;\n\n  if (entityAfterCursor && entityAfterCursor === entityBeforeCursor) {\n    var entity = entityMap.__get(entityAfterCursor);\n    if (entity.getMutability() !== 'MUTABLE') {\n      var _getRemovalRange = getRemovalRange(chars, entityAfterCursor, offset),\n          start = _getRemovalRange.start,\n          end = _getRemovalRange.end;\n\n      var current;\n      while (start < end) {\n        current = chars.get(start);\n        chars = chars.set(start, CharacterMetadata.applyEntity(current, null));\n        start++;\n      }\n      return block.set('characterList', chars);\n    }\n  }\n\n  return block;\n}\n\nmodule.exports = removeEntitiesAtEdges;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$draft_js$lib$CharacterMetadata","~$module$node_modules$draft_js$lib$findRangesImmutable"]],"~:properties",["^5",["selectionAfter","start","blockMap","end"]],"~:compiled-at",1532351402127,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$removeEntitiesAtEdges.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/removeEntitiesAtEdges.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$removeEntitiesAtEdges\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule removeEntitiesAtEdges\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar CharacterMetadata = require('./CharacterMetadata');\\n\\nvar findRangesImmutable = require('./findRangesImmutable');\\nvar invariant = require('fbjs/lib/invariant');\\n\\nfunction removeEntitiesAtEdges(contentState, selectionState) {\\n  var blockMap = contentState.getBlockMap();\\n  var entityMap = contentState.getEntityMap();\\n\\n  var updatedBlocks = {};\\n\\n  var startKey = selectionState.getStartKey();\\n  var startOffset = selectionState.getStartOffset();\\n  var startBlock = blockMap.get(startKey);\\n  var updatedStart = removeForBlock(entityMap, startBlock, startOffset);\\n\\n  if (updatedStart !== startBlock) {\\n    updatedBlocks[startKey] = updatedStart;\\n  }\\n\\n  var endKey = selectionState.getEndKey();\\n  var endOffset = selectionState.getEndOffset();\\n  var endBlock = blockMap.get(endKey);\\n  if (startKey === endKey) {\\n    endBlock = updatedStart;\\n  }\\n\\n  var updatedEnd = removeForBlock(entityMap, endBlock, endOffset);\\n\\n  if (updatedEnd !== endBlock) {\\n    updatedBlocks[endKey] = updatedEnd;\\n  }\\n\\n  if (!Object.keys(updatedBlocks).length) {\\n    return contentState.set('selectionAfter', selectionState);\\n  }\\n\\n  return contentState.merge({\\n    blockMap: blockMap.merge(updatedBlocks),\\n    selectionAfter: selectionState\\n  });\\n}\\n\\nfunction getRemovalRange(characters, key, offset) {\\n  var removalRange;\\n  findRangesImmutable(characters, function (a, b) {\\n    return a.getEntity() === b.getEntity();\\n  }, function (element) {\\n    return element.getEntity() === key;\\n  }, function (start, end) {\\n    if (start <= offset && end >= offset) {\\n      removalRange = { start: start, end: end };\\n    }\\n  });\\n  !(typeof removalRange === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Removal range must exist within character list.') : invariant(false) : void 0;\\n  return removalRange;\\n}\\n\\nfunction removeForBlock(entityMap, block, offset) {\\n  var chars = block.getCharacterList();\\n  var charBefore = offset > 0 ? chars.get(offset - 1) : undefined;\\n  var charAfter = offset < chars.count() ? chars.get(offset) : undefined;\\n  var entityBeforeCursor = charBefore ? charBefore.getEntity() : undefined;\\n  var entityAfterCursor = charAfter ? charAfter.getEntity() : undefined;\\n\\n  if (entityAfterCursor && entityAfterCursor === entityBeforeCursor) {\\n    var entity = entityMap.__get(entityAfterCursor);\\n    if (entity.getMutability() !== 'MUTABLE') {\\n      var _getRemovalRange = getRemovalRange(chars, entityAfterCursor, offset),\\n          start = _getRemovalRange.start,\\n          end = _getRemovalRange.end;\\n\\n      var current;\\n      while (start < end) {\\n        current = chars.get(start);\\n        chars = chars.set(start, CharacterMetadata.applyEntity(current, null));\\n        start++;\\n      }\\n      return block.set('characterList', chars);\\n    }\\n  }\\n\\n  return block;\\n}\\n\\nmodule.exports = removeEntitiesAtEdges;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getRemovalRange\",\"characters\",\"key\",\"offset\",\"removalRange\",\"findRangesImmutable\",\"a\",\"b\",\"getEntity\",\"element\",\"start\",\"end\",\"invariant\",\"removeForBlock\",\"entityMap\",\"block\",\"chars\",\"getCharacterList\",\"charBefore\",\"get\",\"undefined\",\"charAfter\",\"count\",\"entityBeforeCursor\",\"entityAfterCursor\",\"__get\",\"entity\",\"getMutability\",\"_getRemovalRange\",\"current\",\"set\",\"CharacterMetadata\",\"applyEntity\",\"removeEntitiesAtEdges\",\"contentState\",\"selectionState\",\"blockMap\",\"getBlockMap\",\"getEntityMap\",\"updatedBlocks\",\"startKey\",\"getStartKey\",\"startOffset\",\"getStartOffset\",\"startBlock\",\"updatedStart\",\"endKey\",\"getEndKey\",\"endOffset\",\"getEndOffset\",\"endBlock\",\"updatedEnd\",\"Object\",\"keys\",\"length\",\"merge\",\"selectionAfter\"]\n}\n"]