["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_memoizeCapped.js"],"~:js","shadow$provide.module$node_modules$lodash$_memoizeCapped=function(global,process,require,module,exports,shadow$shims){var memoize=require(\"module$node_modules$lodash$memoize\");module.exports=function(func){func=memoize(func,function(key){500===cache.size&&cache.clear();return key});var cache=func.cache;return func}}","~:source","shadow$provide[\"module$node_modules$lodash$_memoizeCapped\"] = function(global,process,require,module,exports,shadow$shims) {\nvar memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$memoize","~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1532351402009,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_memoizeCapped.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAC3H,IAAIC,QAAUJ,OAAA,CAAQ,oCAAR,CAyBdC,OAAAC,QAAA,CAZAG,QAAsB,CAACC,IAAD,CAAO,CACvBC,IAAAA,CAASH,OAAA,CAAQE,IAAR,CAAc,QAAQ,CAACE,GAAD,CAAM,CAXpBC,GAYnB,GAAIC,KAAAC,KAAJ,EACED,KAAAE,MAAA,EAEF,OAAOJ,IAJgC,CAA5B,CAOb,KAAIE,MAAQH,IAAAG,MACZ,OAAOH,KAToB,CAd8F;\",\n\"sources\":[\"node_modules/lodash/_memoizeCapped.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_memoizeCapped\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar memoize = require('./memoize');\\n\\n/** Used as the maximum memoize cache size. */\\nvar MAX_MEMOIZE_SIZE = 500;\\n\\n/**\\n * A specialized version of `_.memoize` which clears the memoized function's\\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\\n *\\n * @private\\n * @param {Function} func The function to have its output memoized.\\n * @returns {Function} Returns the new memoized function.\\n */\\nfunction memoizeCapped(func) {\\n  var result = memoize(func, function(key) {\\n    if (cache.size === MAX_MEMOIZE_SIZE) {\\n      cache.clear();\\n    }\\n    return key;\\n  });\\n\\n  var cache = result.cache;\\n  return result;\\n}\\n\\nmodule.exports = memoizeCapped;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"memoize\",\"memoizeCapped\",\"func\",\"result\",\"key\",\"MAX_MEMOIZE_SIZE\",\"cache\",\"size\",\"clear\"]\n}\n"]