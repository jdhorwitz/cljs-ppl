["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/UnicodeBidiService.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$UnicodeBidiService=function(global,process,require,module,exports,shadow$shims){var UnicodeBidi=require(\"module$node_modules$fbjs$lib$UnicodeBidi\"),UnicodeBidiDirection=require(\"module$node_modules$fbjs$lib$UnicodeBidiDirection\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\");global=function(){function UnicodeBidiService(defaultDir){if(!(this instanceof UnicodeBidiService))throw new TypeError(\"Cannot call a class as a function\");defaultDir?\nUnicodeBidiDirection.isStrong(defaultDir)?void 0:invariant(!1,\"Default direction must be a strong direction (LTR or RTL)\"):defaultDir=UnicodeBidiDirection.getGlobalDir();this._defaultDir=defaultDir;this.reset()}UnicodeBidiService.prototype.reset=function(){this._lastDir=this._defaultDir};UnicodeBidiService.prototype.getDirection=function(str){return this._lastDir=UnicodeBidi.getDirection(str,this._lastDir)};return UnicodeBidiService}();module.exports=global}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$UnicodeBidiService\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/**\n * Stateful API for text direction detection\n *\n * This class can be used in applications where you need to detect the\n * direction of a sequence of text blocks, where each direction shall be used\n * as the fallback direction for the next one.\n *\n * NOTE: A default direction, if not provided, is set based on the global\n *       direction, as defined by `UnicodeBidiDirection`.\n *\n * == Example ==\n * ```\n * var UnicodeBidiService = require('UnicodeBidiService');\n *\n * var bidiService = new UnicodeBidiService();\n *\n * ...\n *\n * bidiService.reset();\n * for (var para in paragraphs) {\n *   var dir = bidiService.getDirection(para);\n *   ...\n * }\n * ```\n *\n * Part of our implementation of Unicode Bidirectional Algorithm (UBA)\n * Unicode Standard Annex #9 (UAX9)\n * http://www.unicode.org/reports/tr9/\n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar UnicodeBidi = require('./UnicodeBidi');\nvar UnicodeBidiDirection = require('./UnicodeBidiDirection');\n\nvar invariant = require('./invariant');\n\nvar UnicodeBidiService = function () {\n\n  /**\n   * Stateful class for paragraph direction detection\n   *\n   * @param defaultDir  Default direction of the service\n   */\n  function UnicodeBidiService(defaultDir) {\n    _classCallCheck(this, UnicodeBidiService);\n\n    if (!defaultDir) {\n      defaultDir = UnicodeBidiDirection.getGlobalDir();\n    } else {\n      !UnicodeBidiDirection.isStrong(defaultDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Default direction must be a strong direction (LTR or RTL)') : invariant(false) : void 0;\n    }\n    this._defaultDir = defaultDir;\n    this.reset();\n  }\n\n  /**\n   * Reset the internal state\n   *\n   * Instead of creating a new instance, you can just reset() your instance\n   * everytime you start a new loop.\n   */\n\n\n  UnicodeBidiService.prototype.reset = function reset() {\n    this._lastDir = this._defaultDir;\n  };\n\n  /**\n   * Returns the direction of a block of text, and remembers it as the\n   * fall-back direction for the next paragraph.\n   *\n   * @param str  A text block, e.g. paragraph, table cell, tag\n   * @return     The resolved direction\n   */\n\n\n  UnicodeBidiService.prototype.getDirection = function getDirection(str) {\n    this._lastDir = UnicodeBidi.getDirection(str, this._lastDir);\n    return this._lastDir;\n  };\n\n  return UnicodeBidiService;\n}();\n\nmodule.exports = UnicodeBidiService;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$UnicodeBidi","~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$UnicodeBidiDirection"]],"~:properties",["^5",["reset","getDirection","_lastDir","_defaultDir"]],"~:compiled-at",1532351402132,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$UnicodeBidiService.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,gDAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA6CjI,IAAIC,YAAcJ,OAAA,CAAQ,0CAAR,CAAlB,CACIK,qBAAuBL,OAAA,CAAQ,mDAAR,CAD3B,CAGIM,UAAYN,OAAA,CAAQ,wCAAR,CAEZO,OAAAA,CAAqB,QAAS,EAAG,CAOnCA,QAASA,mBAAkB,CAACC,UAAD,CAAa,CAdQ,GAAI,EAelCC,IAfkC,WAe5BF,mBAf4B,CAAJ,CAA0C,KAAM,KAAIG,SAAJ,CAAc,mCAAd,CAAN,CAiBnFF,UAAL;AAGGH,oBAAAM,SAAA,CAA8BH,UAA9B,CAAD,CAAwL,IAAK,EAA7L,CAAqFF,SAAA,CAAU,CAAA,CAAV,CAAiB,2DAAjB,CAHvF,CACEE,UADF,CACeH,oBAAAO,aAAA,EAIf,KAAAC,YAAA,CAAmBL,UACnB,KAAAM,MAAA,EATsC,CAoBxCP,kBAAAQ,UAAAD,MAAA,CAAqCE,QAAc,EAAG,CACpD,IAAAC,SAAA,CAAgB,IAAAJ,YADoC,CAatDN,mBAAAQ,UAAAG,aAAA,CAA4CC,QAAqB,CAACC,GAAD,CAAM,CAErE,MADA,KAAAH,SACA,CADgBb,WAAAc,aAAA,CAAyBE,GAAzB,CAA8B,IAAAH,SAA9B,CADqD,CAKvE,OAAOV,mBA7C4B,CAAZ,EAgDzBN,OAAAC,QAAA,CAAiBK,MAlGgH;\",\n\"sources\":[\"node_modules/fbjs/lib/UnicodeBidiService.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$UnicodeBidiService\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n * @typechecks\\n * \\n */\\n\\n/**\\n * Stateful API for text direction detection\\n *\\n * This class can be used in applications where you need to detect the\\n * direction of a sequence of text blocks, where each direction shall be used\\n * as the fallback direction for the next one.\\n *\\n * NOTE: A default direction, if not provided, is set based on the global\\n *       direction, as defined by `UnicodeBidiDirection`.\\n *\\n * == Example ==\\n * ```\\n * var UnicodeBidiService = require('UnicodeBidiService');\\n *\\n * var bidiService = new UnicodeBidiService();\\n *\\n * ...\\n *\\n * bidiService.reset();\\n * for (var para in paragraphs) {\\n *   var dir = bidiService.getDirection(para);\\n *   ...\\n * }\\n * ```\\n *\\n * Part of our implementation of Unicode Bidirectional Algorithm (UBA)\\n * Unicode Standard Annex #9 (UAX9)\\n * http://www.unicode.org/reports/tr9/\\n */\\n\\n'use strict';\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar UnicodeBidi = require('./UnicodeBidi');\\nvar UnicodeBidiDirection = require('./UnicodeBidiDirection');\\n\\nvar invariant = require('./invariant');\\n\\nvar UnicodeBidiService = function () {\\n\\n  /**\\n   * Stateful class for paragraph direction detection\\n   *\\n   * @param defaultDir  Default direction of the service\\n   */\\n  function UnicodeBidiService(defaultDir) {\\n    _classCallCheck(this, UnicodeBidiService);\\n\\n    if (!defaultDir) {\\n      defaultDir = UnicodeBidiDirection.getGlobalDir();\\n    } else {\\n      !UnicodeBidiDirection.isStrong(defaultDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Default direction must be a strong direction (LTR or RTL)') : invariant(false) : void 0;\\n    }\\n    this._defaultDir = defaultDir;\\n    this.reset();\\n  }\\n\\n  /**\\n   * Reset the internal state\\n   *\\n   * Instead of creating a new instance, you can just reset() your instance\\n   * everytime you start a new loop.\\n   */\\n\\n\\n  UnicodeBidiService.prototype.reset = function reset() {\\n    this._lastDir = this._defaultDir;\\n  };\\n\\n  /**\\n   * Returns the direction of a block of text, and remembers it as the\\n   * fall-back direction for the next paragraph.\\n   *\\n   * @param str  A text block, e.g. paragraph, table cell, tag\\n   * @return     The resolved direction\\n   */\\n\\n\\n  UnicodeBidiService.prototype.getDirection = function getDirection(str) {\\n    this._lastDir = UnicodeBidi.getDirection(str, this._lastDir);\\n    return this._lastDir;\\n  };\\n\\n  return UnicodeBidiService;\\n}();\\n\\nmodule.exports = UnicodeBidiService;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"UnicodeBidi\",\"UnicodeBidiDirection\",\"invariant\",\"UnicodeBidiService\",\"defaultDir\",\"instance\",\"TypeError\",\"isStrong\",\"getGlobalDir\",\"_defaultDir\",\"reset\",\"prototype\",\"UnicodeBidiService.prototype.reset\",\"_lastDir\",\"getDirection\",\"UnicodeBidiService.prototype.getDirection\",\"str\"]\n}\n"]