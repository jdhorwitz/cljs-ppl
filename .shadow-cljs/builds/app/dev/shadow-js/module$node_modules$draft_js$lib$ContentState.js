["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/ContentState.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$ContentState=function(global,process,require,module,exports,shadow$shims){function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}});superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,\nsuperClass):subClass.__proto__=superClass)}var BlockMapBuilder=require(\"module$node_modules$draft_js$lib$BlockMapBuilder\"),CharacterMetadata=require(\"module$node_modules$draft_js$lib$CharacterMetadata\");global=require(\"module$node_modules$draft_js$lib$ContentBlock\");process=require(\"module$node_modules$draft_js$lib$ContentBlockNode\");var DraftEntity=require(\"module$node_modules$draft_js$lib$DraftEntity\");exports=require(\"module$node_modules$draft_js$lib$DraftFeatureFlags\");shadow$shims=require(\"module$node_modules$immutable$dist$immutable\");\nvar SelectionState=require(\"module$node_modules$draft_js$lib$SelectionState\"),generateRandomKey=require(\"module$node_modules$draft_js$lib$generateRandomKey\"),sanitizeDraftText=require(\"module$node_modules$draft_js$lib$sanitizeDraftText\"),List=shadow$shims.List;require=shadow$shims.Record;var Repeat=shadow$shims.Repeat,ContentBlockNodeRecord=exports.draft_tree_data_support?process:global;require=function(_ContentStateRecord){function ContentState(){if(!(this instanceof ContentState))throw new TypeError(\"Cannot call a class as a function\");\nvar call=_ContentStateRecord.apply(this,arguments);if(!this)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!call||\"object\"!==typeof call&&\"function\"!==typeof call?this:call}_inherits(ContentState,_ContentStateRecord);ContentState.prototype.getEntityMap=function(){return DraftEntity};ContentState.prototype.getBlockMap=function(){return this.get(\"blockMap\")};ContentState.prototype.getSelectionBefore=function(){return this.get(\"selectionBefore\")};ContentState.prototype.getSelectionAfter=\nfunction(){return this.get(\"selectionAfter\")};ContentState.prototype.getBlockForKey=function(key){return this.getBlockMap().get(key)};ContentState.prototype.getKeyBefore=function(key){return this.getBlockMap().reverse().keySeq().skipUntil(function(v){return v===key}).skip(1).first()};ContentState.prototype.getKeyAfter=function(key){return this.getBlockMap().keySeq().skipUntil(function(v){return v===key}).skip(1).first()};ContentState.prototype.getBlockAfter=function(key){return this.getBlockMap().skipUntil(function(_,\nk){return k===key}).skip(1).first()};ContentState.prototype.getBlockBefore=function(key){return this.getBlockMap().reverse().skipUntil(function(_,k){return k===key}).skip(1).first()};ContentState.prototype.getBlocksAsArray=function(){return this.getBlockMap().toArray()};ContentState.prototype.getFirstBlock=function(){return this.getBlockMap().first()};ContentState.prototype.getLastBlock=function(){return this.getBlockMap().last()};ContentState.prototype.getPlainText=function(delimiter){return this.getBlockMap().map(function(block){return block?\nblock.getText():\"\"}).join(delimiter||\"\\n\")};ContentState.prototype.getLastCreatedEntityKey=function(){return DraftEntity.__getLastCreatedEntityKey()};ContentState.prototype.hasText=function(){var blockMap=this.getBlockMap();return 1<blockMap.size||0<blockMap.first().getLength()};ContentState.prototype.createEntity=function(type,mutability,data){DraftEntity.__create(type,mutability,data);return this};ContentState.prototype.mergeEntityData=function(key,toMerge){DraftEntity.__mergeData(key,toMerge);\nreturn this};ContentState.prototype.replaceEntityData=function(key,newData){DraftEntity.__replaceData(key,newData);return this};ContentState.prototype.addEntity=function(instance){DraftEntity.__add(instance);return this};ContentState.prototype.getEntity=function(key){return DraftEntity.__get(key)};ContentState.createFromBlockArray=function(blocks,entityMap){blocks=Array.isArray(blocks)?blocks:blocks.contentBlocks;blocks=BlockMapBuilder.createFromArray(blocks);var selectionState=blocks.isEmpty()?new SelectionState:\nSelectionState.createEmpty(blocks.first().getKey());return new ContentState({blockMap:blocks,entityMap:entityMap||DraftEntity,selectionBefore:selectionState,selectionAfter:selectionState})};ContentState.createFromText=function(text){var blocks=text.split(1<arguments.length&&void 0!==arguments[1]?arguments[1]:/\\r\\n?|\\n/g).map(function(block){block=sanitizeDraftText(block);return new ContentBlockNodeRecord({key:generateRandomKey(),text:block,type:\"unstyled\",characterList:List(Repeat(CharacterMetadata.EMPTY,\nblock.length))})});return ContentState.createFromBlockArray(blocks)};return ContentState}(require({entityMap:null,blockMap:null,selectionBefore:null,selectionAfter:null}));module.exports=require}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$ContentState\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ContentState\n * @format\n * \n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftEntity = require('./DraftEntity');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar sanitizeDraftText = require('./sanitizeDraftText');\n\nvar List = Immutable.List,\n    Record = Immutable.Record,\n    Repeat = Immutable.Repeat;\n\n\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\n\nvar defaultRecord = {\n  entityMap: null,\n  blockMap: null,\n  selectionBefore: null,\n  selectionAfter: null\n};\n\nvar ContentBlockNodeRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\n\nvar ContentStateRecord = Record(defaultRecord);\n\nvar ContentState = function (_ContentStateRecord) {\n  _inherits(ContentState, _ContentStateRecord);\n\n  function ContentState() {\n    _classCallCheck(this, ContentState);\n\n    return _possibleConstructorReturn(this, _ContentStateRecord.apply(this, arguments));\n  }\n\n  ContentState.prototype.getEntityMap = function getEntityMap() {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity;\n  };\n\n  ContentState.prototype.getBlockMap = function getBlockMap() {\n    return this.get('blockMap');\n  };\n\n  ContentState.prototype.getSelectionBefore = function getSelectionBefore() {\n    return this.get('selectionBefore');\n  };\n\n  ContentState.prototype.getSelectionAfter = function getSelectionAfter() {\n    return this.get('selectionAfter');\n  };\n\n  ContentState.prototype.getBlockForKey = function getBlockForKey(key) {\n    var block = this.getBlockMap().get(key);\n    return block;\n  };\n\n  ContentState.prototype.getKeyBefore = function getKeyBefore(key) {\n    return this.getBlockMap().reverse().keySeq().skipUntil(function (v) {\n      return v === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getKeyAfter = function getKeyAfter(key) {\n    return this.getBlockMap().keySeq().skipUntil(function (v) {\n      return v === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getBlockAfter = function getBlockAfter(key) {\n    return this.getBlockMap().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getBlockBefore = function getBlockBefore(key) {\n    return this.getBlockMap().reverse().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getBlocksAsArray = function getBlocksAsArray() {\n    return this.getBlockMap().toArray();\n  };\n\n  ContentState.prototype.getFirstBlock = function getFirstBlock() {\n    return this.getBlockMap().first();\n  };\n\n  ContentState.prototype.getLastBlock = function getLastBlock() {\n    return this.getBlockMap().last();\n  };\n\n  ContentState.prototype.getPlainText = function getPlainText(delimiter) {\n    return this.getBlockMap().map(function (block) {\n      return block ? block.getText() : '';\n    }).join(delimiter || '\\n');\n  };\n\n  ContentState.prototype.getLastCreatedEntityKey = function getLastCreatedEntityKey() {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity.__getLastCreatedEntityKey();\n  };\n\n  ContentState.prototype.hasText = function hasText() {\n    var blockMap = this.getBlockMap();\n    return blockMap.size > 1 || blockMap.first().getLength() > 0;\n  };\n\n  ContentState.prototype.createEntity = function createEntity(type, mutability, data) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__create(type, mutability, data);\n    return this;\n  };\n\n  ContentState.prototype.mergeEntityData = function mergeEntityData(key, toMerge) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__mergeData(key, toMerge);\n    return this;\n  };\n\n  ContentState.prototype.replaceEntityData = function replaceEntityData(key, newData) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__replaceData(key, newData);\n    return this;\n  };\n\n  ContentState.prototype.addEntity = function addEntity(instance) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__add(instance);\n    return this;\n  };\n\n  ContentState.prototype.getEntity = function getEntity(key) {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity.__get(key);\n  };\n\n  ContentState.createFromBlockArray = function createFromBlockArray(\n  // TODO: update flow type when we completely deprecate the old entity API\n  blocks, entityMap) {\n    // TODO: remove this when we completely deprecate the old entity API\n    var theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;\n    var blockMap = BlockMapBuilder.createFromArray(theBlocks);\n    var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n    return new ContentState({\n      blockMap: blockMap,\n      entityMap: entityMap || DraftEntity,\n      selectionBefore: selectionState,\n      selectionAfter: selectionState\n    });\n  };\n\n  ContentState.createFromText = function createFromText(text) {\n    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\\r\\n?|\\n/g;\n\n    var strings = text.split(delimiter);\n    var blocks = strings.map(function (block) {\n      block = sanitizeDraftText(block);\n      return new ContentBlockNodeRecord({\n        key: generateRandomKey(),\n        text: block,\n        type: 'unstyled',\n        characterList: List(Repeat(CharacterMetadata.EMPTY, block.length))\n      });\n    });\n    return ContentState.createFromBlockArray(blocks);\n  };\n\n  return ContentState;\n}(ContentStateRecord);\n\nmodule.exports = ContentState;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$draft_js$lib$ContentBlock","~$module$node_modules$draft_js$lib$BlockMapBuilder","~$shadow.js","~$module$node_modules$draft_js$lib$DraftFeatureFlags","~$module$node_modules$draft_js$lib$SelectionState","~$module$node_modules$draft_js$lib$ContentBlockNode","~$module$node_modules$immutable$dist$immutable","~$module$node_modules$draft_js$lib$CharacterMetadata","~$module$node_modules$draft_js$lib$sanitizeDraftText","~$module$node_modules$draft_js$lib$generateRandomKey","~$module$node_modules$draft_js$lib$DraftEntity"]],"~:properties",["^5",["createEntity","getKeyAfter","getBlockAfter","selectionBefore","getEntity","entityMap","getLastCreatedEntityKey","prototype","getBlocksAsArray","selectionAfter","hasText","key","getBlockBefore","getSelectionAfter","createFromBlockArray","getEntityMap","configurable","value","enumerable","getPlainText","replaceEntityData","getFirstBlock","text","mergeEntityData","writable","createFromText","getBlockMap","addEntity","characterList","blockMap","type","__proto__","getKeyBefore","getBlockForKey","getSelectionBefore","constructor","getLastBlock"]],"~:compiled-at",1532351402131,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$ContentState.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/ContentState.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$ContentState\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule ContentState\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar BlockMapBuilder = require('./BlockMapBuilder');\\nvar CharacterMetadata = require('./CharacterMetadata');\\nvar ContentBlock = require('./ContentBlock');\\nvar ContentBlockNode = require('./ContentBlockNode');\\nvar DraftEntity = require('./DraftEntity');\\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\\nvar Immutable = require('immutable');\\nvar SelectionState = require('./SelectionState');\\n\\nvar generateRandomKey = require('./generateRandomKey');\\nvar sanitizeDraftText = require('./sanitizeDraftText');\\n\\nvar List = Immutable.List,\\n    Record = Immutable.Record,\\n    Repeat = Immutable.Repeat;\\n\\n\\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\\n\\nvar defaultRecord = {\\n  entityMap: null,\\n  blockMap: null,\\n  selectionBefore: null,\\n  selectionAfter: null\\n};\\n\\nvar ContentBlockNodeRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\\n\\nvar ContentStateRecord = Record(defaultRecord);\\n\\nvar ContentState = function (_ContentStateRecord) {\\n  _inherits(ContentState, _ContentStateRecord);\\n\\n  function ContentState() {\\n    _classCallCheck(this, ContentState);\\n\\n    return _possibleConstructorReturn(this, _ContentStateRecord.apply(this, arguments));\\n  }\\n\\n  ContentState.prototype.getEntityMap = function getEntityMap() {\\n    // TODO: update this when we fully remove DraftEntity\\n    return DraftEntity;\\n  };\\n\\n  ContentState.prototype.getBlockMap = function getBlockMap() {\\n    return this.get('blockMap');\\n  };\\n\\n  ContentState.prototype.getSelectionBefore = function getSelectionBefore() {\\n    return this.get('selectionBefore');\\n  };\\n\\n  ContentState.prototype.getSelectionAfter = function getSelectionAfter() {\\n    return this.get('selectionAfter');\\n  };\\n\\n  ContentState.prototype.getBlockForKey = function getBlockForKey(key) {\\n    var block = this.getBlockMap().get(key);\\n    return block;\\n  };\\n\\n  ContentState.prototype.getKeyBefore = function getKeyBefore(key) {\\n    return this.getBlockMap().reverse().keySeq().skipUntil(function (v) {\\n      return v === key;\\n    }).skip(1).first();\\n  };\\n\\n  ContentState.prototype.getKeyAfter = function getKeyAfter(key) {\\n    return this.getBlockMap().keySeq().skipUntil(function (v) {\\n      return v === key;\\n    }).skip(1).first();\\n  };\\n\\n  ContentState.prototype.getBlockAfter = function getBlockAfter(key) {\\n    return this.getBlockMap().skipUntil(function (_, k) {\\n      return k === key;\\n    }).skip(1).first();\\n  };\\n\\n  ContentState.prototype.getBlockBefore = function getBlockBefore(key) {\\n    return this.getBlockMap().reverse().skipUntil(function (_, k) {\\n      return k === key;\\n    }).skip(1).first();\\n  };\\n\\n  ContentState.prototype.getBlocksAsArray = function getBlocksAsArray() {\\n    return this.getBlockMap().toArray();\\n  };\\n\\n  ContentState.prototype.getFirstBlock = function getFirstBlock() {\\n    return this.getBlockMap().first();\\n  };\\n\\n  ContentState.prototype.getLastBlock = function getLastBlock() {\\n    return this.getBlockMap().last();\\n  };\\n\\n  ContentState.prototype.getPlainText = function getPlainText(delimiter) {\\n    return this.getBlockMap().map(function (block) {\\n      return block ? block.getText() : '';\\n    }).join(delimiter || '\\\\n');\\n  };\\n\\n  ContentState.prototype.getLastCreatedEntityKey = function getLastCreatedEntityKey() {\\n    // TODO: update this when we fully remove DraftEntity\\n    return DraftEntity.__getLastCreatedEntityKey();\\n  };\\n\\n  ContentState.prototype.hasText = function hasText() {\\n    var blockMap = this.getBlockMap();\\n    return blockMap.size > 1 || blockMap.first().getLength() > 0;\\n  };\\n\\n  ContentState.prototype.createEntity = function createEntity(type, mutability, data) {\\n    // TODO: update this when we fully remove DraftEntity\\n    DraftEntity.__create(type, mutability, data);\\n    return this;\\n  };\\n\\n  ContentState.prototype.mergeEntityData = function mergeEntityData(key, toMerge) {\\n    // TODO: update this when we fully remove DraftEntity\\n    DraftEntity.__mergeData(key, toMerge);\\n    return this;\\n  };\\n\\n  ContentState.prototype.replaceEntityData = function replaceEntityData(key, newData) {\\n    // TODO: update this when we fully remove DraftEntity\\n    DraftEntity.__replaceData(key, newData);\\n    return this;\\n  };\\n\\n  ContentState.prototype.addEntity = function addEntity(instance) {\\n    // TODO: update this when we fully remove DraftEntity\\n    DraftEntity.__add(instance);\\n    return this;\\n  };\\n\\n  ContentState.prototype.getEntity = function getEntity(key) {\\n    // TODO: update this when we fully remove DraftEntity\\n    return DraftEntity.__get(key);\\n  };\\n\\n  ContentState.createFromBlockArray = function createFromBlockArray(\\n  // TODO: update flow type when we completely deprecate the old entity API\\n  blocks, entityMap) {\\n    // TODO: remove this when we completely deprecate the old entity API\\n    var theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;\\n    var blockMap = BlockMapBuilder.createFromArray(theBlocks);\\n    var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\\n    return new ContentState({\\n      blockMap: blockMap,\\n      entityMap: entityMap || DraftEntity,\\n      selectionBefore: selectionState,\\n      selectionAfter: selectionState\\n    });\\n  };\\n\\n  ContentState.createFromText = function createFromText(text) {\\n    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\\\\r\\\\n?|\\\\n/g;\\n\\n    var strings = text.split(delimiter);\\n    var blocks = strings.map(function (block) {\\n      block = sanitizeDraftText(block);\\n      return new ContentBlockNodeRecord({\\n        key: generateRandomKey(),\\n        text: block,\\n        type: 'unstyled',\\n        characterList: List(Repeat(CharacterMetadata.EMPTY, block.length))\\n      });\\n    });\\n    return ContentState.createFromBlockArray(blocks);\\n  };\\n\\n  return ContentState;\\n}(ContentStateRecord);\\n\\nmodule.exports = ContentState;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"prototype\",\"Object\",\"create\",\"constructor\",\"value\",\"enumerable\",\"writable\",\"configurable\",\"setPrototypeOf\",\"__proto__\",\"BlockMapBuilder\",\"CharacterMetadata\",\"ContentBlock\",\"ContentBlockNode\",\"DraftEntity\",\"DraftFeatureFlags\",\"Immutable\",\"SelectionState\",\"generateRandomKey\",\"sanitizeDraftText\",\"List\",\"Record\",\"Repeat\",\"ContentBlockNodeRecord\",\"draft_tree_data_support\",\"ContentState\",\"_ContentStateRecord\",\"instance\",\"apply\",\"arguments\",\"self\",\"ReferenceError\",\"call\",\"getEntityMap\",\"ContentState.prototype.getEntityMap\",\"getBlockMap\",\"ContentState.prototype.getBlockMap\",\"get\",\"getSelectionBefore\",\"ContentState.prototype.getSelectionBefore\",\"getSelectionAfter\",\"ContentState.prototype.getSelectionAfter\",\"getBlockForKey\",\"ContentState.prototype.getBlockForKey\",\"key\",\"block\",\"getKeyBefore\",\"ContentState.prototype.getKeyBefore\",\"reverse\",\"keySeq\",\"skipUntil\",\"v\",\"skip\",\"first\",\"getKeyAfter\",\"ContentState.prototype.getKeyAfter\",\"getBlockAfter\",\"ContentState.prototype.getBlockAfter\",\"_\",\"k\",\"getBlockBefore\",\"ContentState.prototype.getBlockBefore\",\"getBlocksAsArray\",\"ContentState.prototype.getBlocksAsArray\",\"toArray\",\"getFirstBlock\",\"ContentState.prototype.getFirstBlock\",\"getLastBlock\",\"ContentState.prototype.getLastBlock\",\"last\",\"getPlainText\",\"ContentState.prototype.getPlainText\",\"delimiter\",\"map\",\"getText\",\"join\",\"getLastCreatedEntityKey\",\"ContentState.prototype.getLastCreatedEntityKey\",\"__getLastCreatedEntityKey\",\"hasText\",\"ContentState.prototype.hasText\",\"blockMap\",\"size\",\"getLength\",\"createEntity\",\"ContentState.prototype.createEntity\",\"type\",\"mutability\",\"data\",\"__create\",\"mergeEntityData\",\"ContentState.prototype.mergeEntityData\",\"toMerge\",\"__mergeData\",\"replaceEntityData\",\"ContentState.prototype.replaceEntityData\",\"newData\",\"__replaceData\",\"addEntity\",\"ContentState.prototype.addEntity\",\"__add\",\"getEntity\",\"ContentState.prototype.getEntity\",\"__get\",\"createFromBlockArray\",\"ContentState.createFromBlockArray\",\"blocks\",\"entityMap\",\"theBlocks\",\"Array\",\"isArray\",\"contentBlocks\",\"createFromArray\",\"selectionState\",\"isEmpty\",\"createEmpty\",\"getKey\",\"selectionBefore\",\"selectionAfter\",\"createFromText\",\"ContentState.createFromText\",\"text\",\"split\",\"strings\",\"length\",\"undefined\",\"characterList\",\"EMPTY\",\"ContentStateRecord\",\"defaultRecord\"]\n}\n"]