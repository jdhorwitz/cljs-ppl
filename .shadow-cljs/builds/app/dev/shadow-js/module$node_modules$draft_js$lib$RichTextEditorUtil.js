["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/RichTextEditorUtil.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$RichTextEditorUtil=function(global,process,require,module,exports,shadow$shims){var DraftModifier=require(\"module$node_modules$draft_js$lib$DraftModifier\"),EditorState=require(\"module$node_modules$draft_js$lib$EditorState\");require(\"module$node_modules$draft_js$lib$SelectionState\");var adjustBlockDepthForContentState=require(\"module$node_modules$draft_js$lib$adjustBlockDepthForContentState\"),nullthrows=require(\"module$node_modules$fbjs$lib$nullthrows\"),\nRichTextEditorUtil={currentBlockContainsLink:function(editorState){var selection=editorState.getSelection();editorState=editorState.getCurrentContent();var entityMap=editorState.getEntityMap();return editorState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(),selection.getEndOffset()).some(function(v){v=v.getEntity();return!!v&&\"LINK\"===entityMap.__get(v).getType()})},getCurrentBlockType:function(editorState){var selection=editorState.getSelection();return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType()},\ngetDataObjectForLinkURL:function(uri){return{url:uri.toString()}},handleKeyCommand:function(editorState,command){switch(command){case \"bold\":return RichTextEditorUtil.toggleInlineStyle(editorState,\"BOLD\");case \"italic\":return RichTextEditorUtil.toggleInlineStyle(editorState,\"ITALIC\");case \"underline\":return RichTextEditorUtil.toggleInlineStyle(editorState,\"UNDERLINE\");case \"code\":return RichTextEditorUtil.toggleCode(editorState);case \"backspace\":case \"backspace-word\":case \"backspace-to-start-of-line\":return RichTextEditorUtil.onBackspace(editorState);\ncase \"delete\":case \"delete-word\":case \"delete-to-end-of-block\":return RichTextEditorUtil.onDelete(editorState);default:return null}},insertSoftNewline:function(editorState){var contentState=DraftModifier.insertText(editorState.getCurrentContent(),editorState.getSelection(),\"\\n\",editorState.getCurrentInlineStyle(),null);editorState=EditorState.push(editorState,contentState,\"insert-characters\");return EditorState.forceSelection(editorState,contentState.getSelectionAfter())},onBackspace:function(editorState){var selection=\neditorState.getSelection();if(!selection.isCollapsed()||selection.getAnchorOffset()||selection.getFocusOffset())return null;var content=editorState.getCurrentContent(),startKey=selection.getStartKey();return(startKey=content.getBlockBefore(startKey))&&\"atomic\"===startKey.getType()&&(startKey=content.getBlockMap()[\"delete\"](startKey.getKey()),selection=content.merge({blockMap:startKey,selectionAfter:selection}),selection!==content)?EditorState.push(editorState,selection,\"remove-range\"):(content=RichTextEditorUtil.tryToRemoveBlockStyle(editorState))?\nEditorState.push(editorState,content,\"change-block-type\"):null},onDelete:function(editorState){var selection=editorState.getSelection();if(!selection.isCollapsed())return null;var content=editorState.getCurrentContent(),startKey=selection.getStartKey(),length=content.getBlockForKey(startKey).getLength();if(selection.getStartOffset()<length)return null;startKey=content.getBlockAfter(startKey);if(!startKey||\"atomic\"!==startKey.getType())return null;selection=selection.merge({focusKey:startKey.getKey(),\nfocusOffset:startKey.getLength()});selection=DraftModifier.removeRange(content,selection,\"forward\");return selection!==content?EditorState.push(editorState,selection,\"remove-range\"):null},onTab:function(event,editorState,maxDepth){var selection=editorState.getSelection(),key=selection.getAnchorKey();if(key!==selection.getFocusKey())return editorState;var content=editorState.getCurrentContent(),block=content.getBlockForKey(key),type=block.getType();if(\"unordered-list-item\"!==type&&\"ordered-list-item\"!==\ntype)return editorState;event.preventDefault();key=content.getBlockBefore(key);if(!key)return editorState;type=key.getType();if(\"unordered-list-item\"!==type&&\"ordered-list-item\"!==type)return editorState;block=block.getDepth();if(!event.shiftKey&&block===maxDepth)return editorState;maxDepth=Math.min(key.getDepth()+1,maxDepth);event=adjustBlockDepthForContentState(content,selection,event.shiftKey?-1:1,maxDepth);return EditorState.push(editorState,event,\"adjust-depth\")},toggleBlockType:function(editorState,\nblockType){var selection=editorState.getSelection(),startKey=selection.getStartKey(),endKey=selection.getEndKey(),content=editorState.getCurrentContent(),target=selection;if(startKey!==endKey&&0===selection.getEndOffset()){var blockBefore=nullthrows(content.getBlockBefore(endKey));endKey=blockBefore.getKey();target=target.merge({anchorKey:startKey,anchorOffset:selection.getStartOffset(),focusKey:endKey,focusOffset:blockBefore.getLength(),isBackward:!1})}if(content.getBlockMap().skipWhile(function(_,\nk){return k!==startKey}).reverse().skipWhile(function(_,k){return k!==endKey}).some(function(v){return\"atomic\"===v.getType()}))return editorState;blockType=content.getBlockForKey(startKey).getType()===blockType?\"unstyled\":blockType;return EditorState.push(editorState,DraftModifier.setBlockType(content,target,blockType),\"change-block-type\")},toggleCode:function(editorState){var selection=editorState.getSelection(),anchorKey=selection.getAnchorKey(),focusKey=selection.getFocusKey();return selection.isCollapsed()||\nanchorKey!==focusKey?RichTextEditorUtil.toggleBlockType(editorState,\"code-block\"):RichTextEditorUtil.toggleInlineStyle(editorState,\"CODE\")},toggleInlineStyle:function(editorState,inlineStyle){var selection=editorState.getSelection(),currentStyle=editorState.getCurrentInlineStyle();if(selection.isCollapsed())return EditorState.setInlineStyleOverride(editorState,currentStyle.has(inlineStyle)?currentStyle.remove(inlineStyle):currentStyle.add(inlineStyle));var content=editorState.getCurrentContent();\ninlineStyle=currentStyle.has(inlineStyle)?DraftModifier.removeInlineStyle(content,selection,inlineStyle):DraftModifier.applyInlineStyle(content,selection,inlineStyle);return EditorState.push(editorState,inlineStyle,\"change-inline-style\")},toggleLink:function(editorState,targetSelection,entityKey){targetSelection=DraftModifier.applyEntity(editorState.getCurrentContent(),targetSelection,entityKey);return EditorState.push(editorState,targetSelection,\"apply-entity\")},tryToRemoveBlockStyle:function(editorState){var selection=\neditorState.getSelection(),offset=selection.getAnchorOffset();if(selection.isCollapsed()&&0===offset){offset=selection.getAnchorKey();editorState=editorState.getCurrentContent();var block=editorState.getBlockForKey(offset),firstBlock=editorState.getFirstBlock();if(0<block.getLength()&&block!==firstBlock)return null;block=block.getType();offset=editorState.getBlockBefore(offset);if(\"code-block\"===block&&offset&&\"code-block\"===offset.getType()&&0!==offset.getLength())return null;if(\"unstyled\"!==block)return DraftModifier.setBlockType(editorState,\nselection,\"unstyled\")}return null}};module.exports=RichTextEditorUtil}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$RichTextEditorUtil\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RichTextEditorUtil\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar SelectionState = require('./SelectionState');\n\nvar adjustBlockDepthForContentState = require('./adjustBlockDepthForContentState');\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nvar RichTextEditorUtil = {\n  currentBlockContainsLink: function currentBlockContainsLink(editorState) {\n    var selection = editorState.getSelection();\n    var contentState = editorState.getCurrentContent();\n    var entityMap = contentState.getEntityMap();\n    return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function (v) {\n      var entity = v.getEntity();\n      return !!entity && entityMap.__get(entity).getType() === 'LINK';\n    });\n  },\n\n  getCurrentBlockType: function getCurrentBlockType(editorState) {\n    var selection = editorState.getSelection();\n    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  },\n\n  getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {\n    return { url: uri.toString() };\n  },\n\n  handleKeyCommand: function handleKeyCommand(editorState, command) {\n    switch (command) {\n      case 'bold':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');\n      case 'italic':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');\n      case 'underline':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');\n      case 'code':\n        return RichTextEditorUtil.toggleCode(editorState);\n      case 'backspace':\n      case 'backspace-word':\n      case 'backspace-to-start-of-line':\n        return RichTextEditorUtil.onBackspace(editorState);\n      case 'delete':\n      case 'delete-word':\n      case 'delete-to-end-of-block':\n        return RichTextEditorUtil.onDelete(editorState);\n      default:\n        // they may have custom editor commands; ignore those\n        return null;\n    }\n  },\n\n  insertSoftNewline: function insertSoftNewline(editorState) {\n    var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), '\\n', editorState.getCurrentInlineStyle(), null);\n\n    var newEditorState = EditorState.push(editorState, contentState, 'insert-characters');\n\n    return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());\n  },\n\n  /**\n   * For collapsed selections at the start of styled blocks, backspace should\n   * just remove the existing style.\n   */\n  onBackspace: function onBackspace(editorState) {\n    var selection = editorState.getSelection();\n    if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n      return null;\n    }\n\n    // First, try to remove a preceding atomic block.\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var blockBefore = content.getBlockBefore(startKey);\n\n    if (blockBefore && blockBefore.getType() === 'atomic') {\n      var blockMap = content.getBlockMap()['delete'](blockBefore.getKey());\n      var withoutAtomicBlock = content.merge({\n        blockMap: blockMap,\n        selectionAfter: selection\n      });\n      if (withoutAtomicBlock !== content) {\n        return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n      }\n    }\n\n    // If that doesn't succeed, try to remove the current block style.\n    var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);\n\n    if (withoutBlockStyle) {\n      return EditorState.push(editorState, withoutBlockStyle, 'change-block-type');\n    }\n\n    return null;\n  },\n\n  onDelete: function onDelete(editorState) {\n    var selection = editorState.getSelection();\n    if (!selection.isCollapsed()) {\n      return null;\n    }\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var block = content.getBlockForKey(startKey);\n    var length = block.getLength();\n\n    // The cursor is somewhere within the text. Behave normally.\n    if (selection.getStartOffset() < length) {\n      return null;\n    }\n\n    var blockAfter = content.getBlockAfter(startKey);\n\n    if (!blockAfter || blockAfter.getType() !== 'atomic') {\n      return null;\n    }\n\n    var atomicBlockTarget = selection.merge({\n      focusKey: blockAfter.getKey(),\n      focusOffset: blockAfter.getLength()\n    });\n\n    var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, 'forward');\n\n    if (withoutAtomicBlock !== content) {\n      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n    }\n\n    return null;\n  },\n\n  onTab: function onTab(event, editorState, maxDepth) {\n    var selection = editorState.getSelection();\n    var key = selection.getAnchorKey();\n    if (key !== selection.getFocusKey()) {\n      return editorState;\n    }\n\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(key);\n    var type = block.getType();\n    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {\n      return editorState;\n    }\n\n    event.preventDefault();\n\n    // Only allow indenting one level beyond the block above, and only if\n    // the block above is a list item as well.\n    var blockAbove = content.getBlockBefore(key);\n    if (!blockAbove) {\n      return editorState;\n    }\n\n    var typeAbove = blockAbove.getType();\n    if (typeAbove !== 'unordered-list-item' && typeAbove !== 'ordered-list-item') {\n      return editorState;\n    }\n\n    var depth = block.getDepth();\n    if (!event.shiftKey && depth === maxDepth) {\n      return editorState;\n    }\n\n    maxDepth = Math.min(blockAbove.getDepth() + 1, maxDepth);\n\n    var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1, maxDepth);\n\n    return EditorState.push(editorState, withAdjustment, 'adjust-depth');\n  },\n\n  toggleBlockType: function toggleBlockType(editorState, blockType) {\n    var selection = editorState.getSelection();\n    var startKey = selection.getStartKey();\n    var endKey = selection.getEndKey();\n    var content = editorState.getCurrentContent();\n    var target = selection;\n\n    // Triple-click can lead to a selection that includes offset 0 of the\n    // following block. The `SelectionState` for this case is accurate, but\n    // we should avoid toggling block type for the trailing block because it\n    // is a confusing interaction.\n    if (startKey !== endKey && selection.getEndOffset() === 0) {\n      var blockBefore = nullthrows(content.getBlockBefore(endKey));\n      endKey = blockBefore.getKey();\n      target = target.merge({\n        anchorKey: startKey,\n        anchorOffset: selection.getStartOffset(),\n        focusKey: endKey,\n        focusOffset: blockBefore.getLength(),\n        isBackward: false\n      });\n    }\n\n    var hasAtomicBlock = content.getBlockMap().skipWhile(function (_, k) {\n      return k !== startKey;\n    }).reverse().skipWhile(function (_, k) {\n      return k !== endKey;\n    }).some(function (v) {\n      return v.getType() === 'atomic';\n    });\n\n    if (hasAtomicBlock) {\n      return editorState;\n    }\n\n    var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? 'unstyled' : blockType;\n\n    return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), 'change-block-type');\n  },\n\n  toggleCode: function toggleCode(editorState) {\n    var selection = editorState.getSelection();\n    var anchorKey = selection.getAnchorKey();\n    var focusKey = selection.getFocusKey();\n\n    if (selection.isCollapsed() || anchorKey !== focusKey) {\n      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');\n    }\n\n    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');\n  },\n\n  /**\n   * Toggle the specified inline style for the selection. If the\n   * user's selection is collapsed, apply or remove the style for the\n   * internal state. If it is not collapsed, apply the change directly\n   * to the document state.\n   */\n  toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {\n    var selection = editorState.getSelection();\n    var currentStyle = editorState.getCurrentInlineStyle();\n\n    // If the selection is collapsed, toggle the specified style on or off and\n    // set the result as the new inline style override. This will then be\n    // used as the inline style for the next character to be inserted.\n    if (selection.isCollapsed()) {\n      return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));\n    }\n\n    // If characters are selected, immediately apply or remove the\n    // inline style on the document state itself.\n    var content = editorState.getCurrentContent();\n    var newContent;\n\n    // If the style is already present for the selection range, remove it.\n    // Otherwise, apply it.\n    if (currentStyle.has(inlineStyle)) {\n      newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);\n    } else {\n      newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);\n    }\n\n    return EditorState.push(editorState, newContent, 'change-inline-style');\n  },\n\n  toggleLink: function toggleLink(editorState, targetSelection, entityKey) {\n    var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);\n\n    return EditorState.push(editorState, withoutLink, 'apply-entity');\n  },\n\n  /**\n   * When a collapsed cursor is at the start of the first styled block, or\n   * an empty styled block, changes block to 'unstyled'. Returns null if\n   * block or selection does not meet that criteria.\n   */\n  tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {\n    var selection = editorState.getSelection();\n    var offset = selection.getAnchorOffset();\n    if (selection.isCollapsed() && offset === 0) {\n      var key = selection.getAnchorKey();\n      var content = editorState.getCurrentContent();\n      var block = content.getBlockForKey(key);\n\n      var firstBlock = content.getFirstBlock();\n      if (block.getLength() > 0 && block !== firstBlock) {\n        return null;\n      }\n\n      var type = block.getType();\n      var blockBefore = content.getBlockBefore(key);\n      if (type === 'code-block' && blockBefore && blockBefore.getType() === 'code-block' && blockBefore.getLength() !== 0) {\n        return null;\n      }\n\n      if (type !== 'unstyled') {\n        return DraftModifier.setBlockType(content, selection, 'unstyled');\n      }\n    }\n    return null;\n  }\n};\n\nmodule.exports = RichTextEditorUtil;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$nullthrows","~$shadow.js","~$module$node_modules$draft_js$lib$DraftModifier","~$module$node_modules$draft_js$lib$SelectionState","~$module$node_modules$draft_js$lib$EditorState","~$module$node_modules$draft_js$lib$adjustBlockDepthForContentState"]],"~:properties",["^5",["url","anchorOffset","toggleLink","toggleCode","isBackward","toggleBlockType","selectionAfter","onTab","toggleInlineStyle","onDelete","getCurrentBlockType","anchorKey","currentBlockContainsLink","focusKey","focusOffset","tryToRemoveBlockStyle","blockMap","handleKeyCommand","insertSoftNewline","getDataObjectForLinkURL","onBackspace"]],"~:compiled-at",1532351402150,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$RichTextEditorUtil.js\",\n\"lineCount\":14,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/RichTextEditorUtil.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$RichTextEditorUtil\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule RichTextEditorUtil\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar DraftModifier = require('./DraftModifier');\\nvar EditorState = require('./EditorState');\\nvar SelectionState = require('./SelectionState');\\n\\nvar adjustBlockDepthForContentState = require('./adjustBlockDepthForContentState');\\nvar nullthrows = require('fbjs/lib/nullthrows');\\n\\nvar RichTextEditorUtil = {\\n  currentBlockContainsLink: function currentBlockContainsLink(editorState) {\\n    var selection = editorState.getSelection();\\n    var contentState = editorState.getCurrentContent();\\n    var entityMap = contentState.getEntityMap();\\n    return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function (v) {\\n      var entity = v.getEntity();\\n      return !!entity && entityMap.__get(entity).getType() === 'LINK';\\n    });\\n  },\\n\\n  getCurrentBlockType: function getCurrentBlockType(editorState) {\\n    var selection = editorState.getSelection();\\n    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\\n  },\\n\\n  getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {\\n    return { url: uri.toString() };\\n  },\\n\\n  handleKeyCommand: function handleKeyCommand(editorState, command) {\\n    switch (command) {\\n      case 'bold':\\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');\\n      case 'italic':\\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');\\n      case 'underline':\\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');\\n      case 'code':\\n        return RichTextEditorUtil.toggleCode(editorState);\\n      case 'backspace':\\n      case 'backspace-word':\\n      case 'backspace-to-start-of-line':\\n        return RichTextEditorUtil.onBackspace(editorState);\\n      case 'delete':\\n      case 'delete-word':\\n      case 'delete-to-end-of-block':\\n        return RichTextEditorUtil.onDelete(editorState);\\n      default:\\n        // they may have custom editor commands; ignore those\\n        return null;\\n    }\\n  },\\n\\n  insertSoftNewline: function insertSoftNewline(editorState) {\\n    var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), '\\\\n', editorState.getCurrentInlineStyle(), null);\\n\\n    var newEditorState = EditorState.push(editorState, contentState, 'insert-characters');\\n\\n    return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());\\n  },\\n\\n  /**\\n   * For collapsed selections at the start of styled blocks, backspace should\\n   * just remove the existing style.\\n   */\\n  onBackspace: function onBackspace(editorState) {\\n    var selection = editorState.getSelection();\\n    if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\\n      return null;\\n    }\\n\\n    // First, try to remove a preceding atomic block.\\n    var content = editorState.getCurrentContent();\\n    var startKey = selection.getStartKey();\\n    var blockBefore = content.getBlockBefore(startKey);\\n\\n    if (blockBefore && blockBefore.getType() === 'atomic') {\\n      var blockMap = content.getBlockMap()['delete'](blockBefore.getKey());\\n      var withoutAtomicBlock = content.merge({\\n        blockMap: blockMap,\\n        selectionAfter: selection\\n      });\\n      if (withoutAtomicBlock !== content) {\\n        return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\\n      }\\n    }\\n\\n    // If that doesn't succeed, try to remove the current block style.\\n    var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);\\n\\n    if (withoutBlockStyle) {\\n      return EditorState.push(editorState, withoutBlockStyle, 'change-block-type');\\n    }\\n\\n    return null;\\n  },\\n\\n  onDelete: function onDelete(editorState) {\\n    var selection = editorState.getSelection();\\n    if (!selection.isCollapsed()) {\\n      return null;\\n    }\\n\\n    var content = editorState.getCurrentContent();\\n    var startKey = selection.getStartKey();\\n    var block = content.getBlockForKey(startKey);\\n    var length = block.getLength();\\n\\n    // The cursor is somewhere within the text. Behave normally.\\n    if (selection.getStartOffset() < length) {\\n      return null;\\n    }\\n\\n    var blockAfter = content.getBlockAfter(startKey);\\n\\n    if (!blockAfter || blockAfter.getType() !== 'atomic') {\\n      return null;\\n    }\\n\\n    var atomicBlockTarget = selection.merge({\\n      focusKey: blockAfter.getKey(),\\n      focusOffset: blockAfter.getLength()\\n    });\\n\\n    var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, 'forward');\\n\\n    if (withoutAtomicBlock !== content) {\\n      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\\n    }\\n\\n    return null;\\n  },\\n\\n  onTab: function onTab(event, editorState, maxDepth) {\\n    var selection = editorState.getSelection();\\n    var key = selection.getAnchorKey();\\n    if (key !== selection.getFocusKey()) {\\n      return editorState;\\n    }\\n\\n    var content = editorState.getCurrentContent();\\n    var block = content.getBlockForKey(key);\\n    var type = block.getType();\\n    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {\\n      return editorState;\\n    }\\n\\n    event.preventDefault();\\n\\n    // Only allow indenting one level beyond the block above, and only if\\n    // the block above is a list item as well.\\n    var blockAbove = content.getBlockBefore(key);\\n    if (!blockAbove) {\\n      return editorState;\\n    }\\n\\n    var typeAbove = blockAbove.getType();\\n    if (typeAbove !== 'unordered-list-item' && typeAbove !== 'ordered-list-item') {\\n      return editorState;\\n    }\\n\\n    var depth = block.getDepth();\\n    if (!event.shiftKey && depth === maxDepth) {\\n      return editorState;\\n    }\\n\\n    maxDepth = Math.min(blockAbove.getDepth() + 1, maxDepth);\\n\\n    var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1, maxDepth);\\n\\n    return EditorState.push(editorState, withAdjustment, 'adjust-depth');\\n  },\\n\\n  toggleBlockType: function toggleBlockType(editorState, blockType) {\\n    var selection = editorState.getSelection();\\n    var startKey = selection.getStartKey();\\n    var endKey = selection.getEndKey();\\n    var content = editorState.getCurrentContent();\\n    var target = selection;\\n\\n    // Triple-click can lead to a selection that includes offset 0 of the\\n    // following block. The `SelectionState` for this case is accurate, but\\n    // we should avoid toggling block type for the trailing block because it\\n    // is a confusing interaction.\\n    if (startKey !== endKey && selection.getEndOffset() === 0) {\\n      var blockBefore = nullthrows(content.getBlockBefore(endKey));\\n      endKey = blockBefore.getKey();\\n      target = target.merge({\\n        anchorKey: startKey,\\n        anchorOffset: selection.getStartOffset(),\\n        focusKey: endKey,\\n        focusOffset: blockBefore.getLength(),\\n        isBackward: false\\n      });\\n    }\\n\\n    var hasAtomicBlock = content.getBlockMap().skipWhile(function (_, k) {\\n      return k !== startKey;\\n    }).reverse().skipWhile(function (_, k) {\\n      return k !== endKey;\\n    }).some(function (v) {\\n      return v.getType() === 'atomic';\\n    });\\n\\n    if (hasAtomicBlock) {\\n      return editorState;\\n    }\\n\\n    var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? 'unstyled' : blockType;\\n\\n    return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), 'change-block-type');\\n  },\\n\\n  toggleCode: function toggleCode(editorState) {\\n    var selection = editorState.getSelection();\\n    var anchorKey = selection.getAnchorKey();\\n    var focusKey = selection.getFocusKey();\\n\\n    if (selection.isCollapsed() || anchorKey !== focusKey) {\\n      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');\\n    }\\n\\n    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');\\n  },\\n\\n  /**\\n   * Toggle the specified inline style for the selection. If the\\n   * user's selection is collapsed, apply or remove the style for the\\n   * internal state. If it is not collapsed, apply the change directly\\n   * to the document state.\\n   */\\n  toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {\\n    var selection = editorState.getSelection();\\n    var currentStyle = editorState.getCurrentInlineStyle();\\n\\n    // If the selection is collapsed, toggle the specified style on or off and\\n    // set the result as the new inline style override. This will then be\\n    // used as the inline style for the next character to be inserted.\\n    if (selection.isCollapsed()) {\\n      return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));\\n    }\\n\\n    // If characters are selected, immediately apply or remove the\\n    // inline style on the document state itself.\\n    var content = editorState.getCurrentContent();\\n    var newContent;\\n\\n    // If the style is already present for the selection range, remove it.\\n    // Otherwise, apply it.\\n    if (currentStyle.has(inlineStyle)) {\\n      newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);\\n    } else {\\n      newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);\\n    }\\n\\n    return EditorState.push(editorState, newContent, 'change-inline-style');\\n  },\\n\\n  toggleLink: function toggleLink(editorState, targetSelection, entityKey) {\\n    var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);\\n\\n    return EditorState.push(editorState, withoutLink, 'apply-entity');\\n  },\\n\\n  /**\\n   * When a collapsed cursor is at the start of the first styled block, or\\n   * an empty styled block, changes block to 'unstyled'. Returns null if\\n   * block or selection does not meet that criteria.\\n   */\\n  tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {\\n    var selection = editorState.getSelection();\\n    var offset = selection.getAnchorOffset();\\n    if (selection.isCollapsed() && offset === 0) {\\n      var key = selection.getAnchorKey();\\n      var content = editorState.getCurrentContent();\\n      var block = content.getBlockForKey(key);\\n\\n      var firstBlock = content.getFirstBlock();\\n      if (block.getLength() > 0 && block !== firstBlock) {\\n        return null;\\n      }\\n\\n      var type = block.getType();\\n      var blockBefore = content.getBlockBefore(key);\\n      if (type === 'code-block' && blockBefore && blockBefore.getType() === 'code-block' && blockBefore.getLength() !== 0) {\\n        return null;\\n      }\\n\\n      if (type !== 'unstyled') {\\n        return DraftModifier.setBlockType(content, selection, 'unstyled');\\n      }\\n    }\\n    return null;\\n  }\\n};\\n\\nmodule.exports = RichTextEditorUtil;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"DraftModifier\",\"EditorState\",\"adjustBlockDepthForContentState\",\"nullthrows\",\"RichTextEditorUtil\",\"currentBlockContainsLink\",\"editorState\",\"selection\",\"getSelection\",\"contentState\",\"getCurrentContent\",\"entityMap\",\"getEntityMap\",\"getBlockForKey\",\"getAnchorKey\",\"getCharacterList\",\"slice\",\"getStartOffset\",\"getEndOffset\",\"some\",\"v\",\"entity\",\"getEntity\",\"__get\",\"getType\",\"getCurrentBlockType\",\"getStartKey\",\"getDataObjectForLinkURL\",\"uri\",\"url\",\"toString\",\"handleKeyCommand\",\"command\",\"toggleInlineStyle\",\"toggleCode\",\"onBackspace\",\"onDelete\",\"insertSoftNewline\",\"insertText\",\"getCurrentInlineStyle\",\"newEditorState\",\"push\",\"forceSelection\",\"getSelectionAfter\",\"isCollapsed\",\"getAnchorOffset\",\"getFocusOffset\",\"content\",\"startKey\",\"blockBefore\",\"getBlockBefore\",\"blockMap\",\"getBlockMap\",\"getKey\",\"withoutAtomicBlock\",\"merge\",\"selectionAfter\",\"withoutBlockStyle\",\"tryToRemoveBlockStyle\",\"length\",\"block\",\"getLength\",\"blockAfter\",\"getBlockAfter\",\"atomicBlockTarget\",\"focusKey\",\"focusOffset\",\"removeRange\",\"onTab\",\"event\",\"maxDepth\",\"key\",\"getFocusKey\",\"type\",\"preventDefault\",\"blockAbove\",\"typeAbove\",\"depth\",\"getDepth\",\"shiftKey\",\"Math\",\"min\",\"withAdjustment\",\"toggleBlockType\",\"blockType\",\"endKey\",\"getEndKey\",\"target\",\"anchorKey\",\"anchorOffset\",\"isBackward\",\"skipWhile\",\"_\",\"k\",\"reverse\",\"hasAtomicBlock\",\"typeToSet\",\"setBlockType\",\"inlineStyle\",\"currentStyle\",\"setInlineStyleOverride\",\"has\",\"remove\",\"add\",\"newContent\",\"removeInlineStyle\",\"applyInlineStyle\",\"toggleLink\",\"targetSelection\",\"entityKey\",\"withoutLink\",\"applyEntity\",\"offset\",\"firstBlock\",\"getFirstBlock\"]\n}\n"]