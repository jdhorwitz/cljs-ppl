["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/removeTextWithStrategy.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$removeTextWithStrategy=function(global,process,require,module,exports,shadow$shims){var DraftModifier=require(\"module$node_modules$draft_js$lib$DraftModifier\");module.exports=function(editorState,strategy,direction){var selection=editorState.getSelection(),content=editorState.getCurrentContent(),target=selection;if(selection.isCollapsed()){if(\"forward\"===direction){if(editorState.isSelectionAtEndOfContent())return content}else if(editorState.isSelectionAtStartOfContent())return content;\ntarget=strategy(editorState);if(target===selection)return content}return DraftModifier.removeRange(content,target,direction)}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$removeTextWithStrategy\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule removeTextWithStrategy\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\n\n/**\n * For a collapsed selection state, remove text based on the specified strategy.\n * If the selection state is not collapsed, remove the entire selected range.\n */\nfunction removeTextWithStrategy(editorState, strategy, direction) {\n  var selection = editorState.getSelection();\n  var content = editorState.getCurrentContent();\n  var target = selection;\n  if (selection.isCollapsed()) {\n    if (direction === 'forward') {\n      if (editorState.isSelectionAtEndOfContent()) {\n        return content;\n      }\n    } else if (editorState.isSelectionAtStartOfContent()) {\n      return content;\n    }\n\n    target = strategy(editorState);\n    if (target === selection) {\n      return content;\n    }\n  }\n  return DraftModifier.removeRange(content, target, direction);\n}\n\nmodule.exports = removeTextWithStrategy;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$draft_js$lib$DraftModifier"]],"~:properties",["^5",[]],"~:compiled-at",1532351402146,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$removeTextWithStrategy.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBzI,IAAIC,cAAgBJ,OAAA,CAAQ,gDAAR,CA2BpBC,OAAAC,QAAA,CArBAG,QAA+B,CAACC,WAAD,CAAcC,QAAd,CAAwBC,SAAxB,CAAmC,CAChE,IAAIC,UAAYH,WAAAI,aAAA,EAAhB,CACIC,QAAUL,WAAAM,kBAAA,EADd,CAEIC,OAASJ,SACb,IAAIA,SAAAK,YAAA,EAAJ,CAA6B,CAC3B,GAAkB,SAAlB,GAAIN,SAAJ,CACE,IAAIF,WAAAS,0BAAA,EAAJ,CACE,MAAOJ,QADT,CADF,IAIO,IAAIL,WAAAU,4BAAA,EAAJ,CACL,MAAOL,QAGTE;MAAA,CAASN,QAAA,CAASD,WAAT,CACT,IAAIO,MAAJ,GAAeJ,SAAf,CACE,MAAOE,QAXkB,CAc7B,MAAOP,cAAAa,YAAA,CAA0BN,OAA1B,CAAmCE,MAAnC,CAA2CL,SAA3C,CAlByD,CAtBuE;\",\n\"sources\":[\"node_modules/draft-js/lib/removeTextWithStrategy.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$removeTextWithStrategy\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule removeTextWithStrategy\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar DraftModifier = require('./DraftModifier');\\n\\n/**\\n * For a collapsed selection state, remove text based on the specified strategy.\\n * If the selection state is not collapsed, remove the entire selected range.\\n */\\nfunction removeTextWithStrategy(editorState, strategy, direction) {\\n  var selection = editorState.getSelection();\\n  var content = editorState.getCurrentContent();\\n  var target = selection;\\n  if (selection.isCollapsed()) {\\n    if (direction === 'forward') {\\n      if (editorState.isSelectionAtEndOfContent()) {\\n        return content;\\n      }\\n    } else if (editorState.isSelectionAtStartOfContent()) {\\n      return content;\\n    }\\n\\n    target = strategy(editorState);\\n    if (target === selection) {\\n      return content;\\n    }\\n  }\\n  return DraftModifier.removeRange(content, target, direction);\\n}\\n\\nmodule.exports = removeTextWithStrategy;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"DraftModifier\",\"removeTextWithStrategy\",\"editorState\",\"strategy\",\"direction\",\"selection\",\"getSelection\",\"content\",\"getCurrentContent\",\"target\",\"isCollapsed\",\"isSelectionAtEndOfContent\",\"isSelectionAtStartOfContent\",\"removeRange\"]\n}\n"]