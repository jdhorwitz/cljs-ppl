["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/rc-tree-select/lib/util.js"],"~:js","shadow$provide.module$node_modules$rc_tree_select$lib$util=function(global,process,require,module,exports,shadow$shims){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}function toArray(data){return data?Array.isArray(data)?data:[data]:[]}function flatToHierarchy(positionList){if(!positionList.length)return[];var entrances={},posMap={};positionList=positionList.slice().map(function(entity){entity=(0,_extends3[\"default\"])({},entity,{fields:entity.pos.split(\"-\")});\ndelete entity.children;return entity});positionList.forEach(function(entity){posMap[entity.pos]=entity});positionList.sort(function(a,b){return a.fields.length-b.fields.length});positionList.forEach(function(entity){var parentPos=entity.fields.slice(0,-1).join(\"-\");(parentPos=posMap[parentPos])?(parentPos.children=parentPos.children||[],parentPos.children.push(entity)):entrances[entity.pos]=entity;delete entity.key;delete entity.fields});return Object.keys(entrances).map(function(key){return entrances[key]})}\nfunction isLabelInValue(props){var treeCheckStrictly=props.treeCheckStrictly;return props.treeCheckable&&treeCheckStrictly?!0:props.labelInValue||!1}function convertTreeToData(treeNodes){return _react2[\"default\"].Children.map(treeNodes||[],function(node){if(!_react2[\"default\"].isValidElement(node)||!node.type||!node.type.isTreeNode)return null;var key=node.key;node=node.props;return(0,_extends3[\"default\"])({},node,{key:key,children:convertTreeToData(node.children)})}).filter(function(data){return data})}\nfunction convertDataToEntities(treeData){function traverse(subTreeData,parentPos){return toArray(subTreeData).map(function(_ref2,index){var key=_ref2.key,title=_ref2.title,label=_ref2.label,value=_ref2.value,children=_ref2.children;_ref2=(0,_objectWithoutProperties3[\"default\"])(_ref2,[\"key\",\"title\",\"label\",\"value\",\"children\"]);index=parentPos+\"-\"+index;key={key:key,value:value,pos:index};key.key=key.key||value;key.key||0===key.key||(key.key=KEY_OF_VALUE_EMPTY);key.parent=posEntities[parentPos];key.parent&&\n(key.parent.children=key.parent.children||[],key.parent.children.push(key));valueEntities[value]=key;keyEntities[key.key]=key;posEntities[index]=key;title||!label||warnDeprecatedLabel||((0,_warning2[\"default\"])(!1,\"'label' in treeData is deprecated. Please use 'title' instead.\"),warnDeprecatedLabel=!0);title=_react2[\"default\"].createElement(_SelectNode2[\"default\"],(0,_extends3[\"default\"])({key:key.key},_ref2,{title:title||label,label:label,value:value}),traverse(children,index));return key.node=title})}\ntreeData=toArray(treeData);var valueEntities={},keyEntities={},posEntities={};return{treeNodes:traverse(treeData,\"0\"),valueEntities:valueEntities,keyEntities:keyEntities,posEntities:posEntities}}function cleanEntity(_ref3){var children=_ref3.children;_ref3={node:_ref3.node,pos:_ref3.pos};children&&(_ref3.children=children.map(cleanEntity));return _ref3}function getLabel(wrappedValue,entity,treeNodeLabelProp){return wrappedValue.label?wrappedValue.label:entity&&entity.node.props?entity.node.props[treeNodeLabelProp]:\nwrappedValue.value}exports.__esModule=!0;exports.UNSELECTABLE_ATTRIBUTE=exports.UNSELECTABLE_STYLE=void 0;global=require(\"module$node_modules$babel_runtime$helpers$objectWithoutProperties\");var _objectWithoutProperties3=_interopRequireDefault(global);global=require(\"module$node_modules$babel_runtime$helpers$extends\");var _extends3=_interopRequireDefault(global);exports.toTitle=function(title){return\"string\"===typeof title?title:null};exports.toArray=toArray;exports.createRef=function(){var func=function(node){func.current=\nnode};return func};exports.flatToHierarchy=flatToHierarchy;exports.resetAriaId=function(){ariaId=0};exports.generateAriaId=function(prefix){ariaId+=1;return prefix+\"_\"+ariaId};exports.isLabelInValue=isLabelInValue;exports.parseSimpleTreeData=function(treeData,_ref){var id=_ref.id,pId=_ref.pId,rootPId=_ref.rootPId,keyNodes={},rootNodeList=[];treeData.map(function(node){node=(0,_extends3[\"default\"])({},node);return keyNodes[node[id]]=node}).forEach(function(node){var parentKey=node[pId],parent=keyNodes[parentKey];\nparent&&(parent.children=parent.children||[],parent.children.push(node));(parentKey===rootPId||!parent&&null===rootPId)&&rootNodeList.push(node)});return rootNodeList};exports.convertTreeToData=convertTreeToData;exports.convertDataToEntities=convertDataToEntities;exports.isPosRelated=function(pos1,pos2){pos1=pos1.split(\"-\");pos2=pos2.split(\"-\");for(var minLen=Math.min(pos1.length,pos2.length),i=0;i<minLen;i+=1)if(pos1[i]!==pos2[i])return!1;return!0};exports.cleanEntity=cleanEntity;exports.getFilterTree=\nfunction(treeNodes,searchValue,filterFunc){function mapFilteredNodeToData(node){if(!node)return null;var match=!1;filterFunc(searchValue,node)&&(match=!0);var children=(_react2[\"default\"].Children.map(node.props.children,mapFilteredNodeToData)||[]).filter(function(n){return n});return children.length||match?(0,_extends3[\"default\"])({},node.props,{key:node.key,children:children}):null}return searchValue?convertDataToEntities(treeNodes.map(mapFilteredNodeToData).filter(function(node){return node})).treeNodes:\nnull};exports.formatInternalValue=function(value,props){value=toArray(value);return isLabelInValue(props)?value.map(function(val){return\"object\"===typeof val&&val?val:{value:\"\",label:\"\"}}):value.map(function(val){return{value:val}})};exports.getLabel=getLabel;exports.formatSelectorValue=function(valueList,props,valueEntities){var treeNodeLabelProp=props.treeNodeLabelProp,treeCheckStrictly=props.treeCheckStrictly,showCheckedStrategy=props.showCheckedStrategy;if(props.treeCheckable&&!treeCheckStrictly){var values=\n{};valueList.forEach(function(wrappedValue){values[wrappedValue.value]=wrappedValue});props=flatToHierarchy(valueList.map(function(_ref4){return valueEntities[_ref4.value]}));if(showCheckedStrategy===_strategies.SHOW_PARENT)return props.map(function(_ref5){_ref5=_ref5.node.props.value;return{label:getLabel(values[_ref5],valueEntities[_ref5],treeNodeLabelProp),value:_ref5}});if(showCheckedStrategy===_strategies.SHOW_CHILD){var targetValueList=[],traverse$jscomp$0=function traverse(_ref6){var value=\n_ref6.node.props.value;(_ref6=_ref6.children)&&0!==_ref6.length?_ref6.forEach(function(entity){traverse(entity)}):targetValueList.push({label:getLabel(values[value],valueEntities[value],treeNodeLabelProp),value:value})};props.forEach(function(entity){traverse$jscomp$0(entity)});return targetValueList}}return valueList.map(function(wrappedValue){return{label:getLabel(wrappedValue,valueEntities[wrappedValue.value],treeNodeLabelProp),value:wrappedValue.value}})};exports.calcUncheckConduct=function(keyList,\nuncheckedKey,keyEntities){function conductUp(conductKey){myKeyList=myKeyList.filter(function(key){return key!==conductKey});var parentEntity=keyEntities[conductKey].parent;parentEntity&&myKeyList.some(function(key){return key===parentEntity.key})&&conductUp(parentEntity.key)}function conductDown(conductKey){myKeyList=myKeyList.filter(function(key){return key!==conductKey});(keyEntities[conductKey].children||[]).forEach(function(childEntity){conductDown(childEntity.key)})}var myKeyList=keyList.slice();\nconductUp(uncheckedKey);conductDown(uncheckedKey);return myKeyList};global=require(\"module$node_modules$react$index\");var _react2=_interopRequireDefault(global);global=require(\"module$node_modules$warning$warning\");var _warning2=_interopRequireDefault(global);global=require(\"module$node_modules$rc_tree_select$lib$SelectNode\");var _SelectNode2=_interopRequireDefault(global),_strategies=require(\"module$node_modules$rc_tree_select$lib$strategies\"),KEY_OF_VALUE_EMPTY=\"RC_TREE_SELECT_KEY_OF_VALUE_EMPTY\",\nwarnDeprecatedLabel=!1;exports.UNSELECTABLE_STYLE={userSelect:\"none\",WebkitUserSelect:\"none\"};exports.UNSELECTABLE_ATTRIBUTE={unselectable:\"unselectable\"};var ariaId=0}","~:source","shadow$provide[\"module$node_modules$rc_tree_select$lib$util\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nexports.__esModule = true;\nexports.UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_STYLE = undefined;\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nexports.toTitle = toTitle;\nexports.toArray = toArray;\nexports.createRef = createRef;\nexports.flatToHierarchy = flatToHierarchy;\nexports.resetAriaId = resetAriaId;\nexports.generateAriaId = generateAriaId;\nexports.isLabelInValue = isLabelInValue;\nexports.parseSimpleTreeData = parseSimpleTreeData;\nexports.convertTreeToData = convertTreeToData;\nexports.convertDataToEntities = convertDataToEntities;\nexports.isPosRelated = isPosRelated;\nexports.cleanEntity = cleanEntity;\nexports.getFilterTree = getFilterTree;\nexports.formatInternalValue = formatInternalValue;\nexports.getLabel = getLabel;\nexports.formatSelectorValue = formatSelectorValue;\nexports.calcUncheckConduct = calcUncheckConduct;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _SelectNode = require('./SelectNode');\n\nvar _SelectNode2 = _interopRequireDefault(_SelectNode);\n\nvar _strategies = require('./strategies');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// When treeNode not provide key, and we will use value as key.\n// Some time value is empty, we should pass it instead.\nvar KEY_OF_VALUE_EMPTY = 'RC_TREE_SELECT_KEY_OF_VALUE_EMPTY';\n\nvar warnDeprecatedLabel = false;\n\n// =================== MISC ====================\nfunction toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n  return null;\n}\n\nfunction toArray(data) {\n  if (!data) return [];\n\n  return Array.isArray(data) ? data : [data];\n}\n\n// Shallow copy of React 16.3 createRef api\nfunction createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n  return func;\n}\n\n// =============== Legacy ===============\nvar UNSELECTABLE_STYLE = exports.UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\n\nvar UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\nfunction flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n\n  var entrances = {};\n\n  // Prepare the position map\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = (0, _extends3['default'])({}, entity, {\n      fields: entity.pos.split('-')\n    });\n    delete clone.children;\n    return clone;\n  });\n\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  });\n\n  // Create the hierarchy\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    }\n\n    // Some time position list provide `key`, we don't need it\n    delete entity.key;\n    delete entity.fields;\n  });\n\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n}\n\n// =============== Accessibility ===============\nvar ariaId = 0;\n\nfunction resetAriaId() {\n  ariaId = 0;\n}\n\nfunction generateAriaId(prefix) {\n  ariaId += 1;\n  return prefix + '_' + ariaId;\n}\n\nfunction isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue;\n\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n  return labelInValue || false;\n}\n\n// =================== Tree ====================\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n\n  var keyNodes = {};\n  var rootNodeList = [];\n\n  // Fill in the map\n  var nodeList = treeData.map(function (node) {\n    var clone = (0, _extends3['default'])({}, node);\n    var key = clone[id];\n    keyNodes[key] = clone;\n    return clone;\n  });\n\n  // Connect tree\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey];\n\n    // Fill parent\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    }\n\n    // Fill root tree node\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n\n  return rootNodeList;\n}\n\n/**\n * `Tree` use `key` to track state but it will changed by React.\n * We need convert it back to the data and re-generate by `key`.\n * This is will cause performance issue.\n */\nfunction convertTreeToData(treeNodes) {\n  return _react2['default'].Children.map(treeNodes || [], function (node) {\n    if (!_react2['default'].isValidElement(node) || !node.type || !node.type.isTreeNode) {\n      return null;\n    }\n\n    var key = node.key,\n        props = node.props;\n\n\n    return (0, _extends3['default'])({}, props, {\n      key: key,\n      children: convertTreeToData(props.children)\n    });\n  }).filter(function (data) {\n    return data;\n  });\n}\n\n/**\n * Convert `treeData` to TreeNode List contains the mapping data.\n */\nfunction convertDataToEntities(treeData) {\n  var list = toArray(treeData);\n\n  var valueEntities = {};\n  var keyEntities = {};\n  var posEntities = {};\n\n  function traverse(subTreeData, parentPos) {\n    var subList = toArray(subTreeData);\n\n    return subList.map(function (_ref2, index) {\n      var key = _ref2.key,\n          title = _ref2.title,\n          label = _ref2.label,\n          value = _ref2.value,\n          children = _ref2.children,\n          nodeProps = (0, _objectWithoutProperties3['default'])(_ref2, ['key', 'title', 'label', 'value', 'children']);\n\n      var pos = parentPos + '-' + index;\n\n      var entity = { key: key, value: value, pos: pos };\n\n      // This may cause some side effect, need additional check\n      entity.key = entity.key || value;\n      if (!entity.key && entity.key !== 0) {\n        entity.key = KEY_OF_VALUE_EMPTY;\n      }\n\n      // Fill children\n      entity.parent = posEntities[parentPos];\n      if (entity.parent) {\n        entity.parent.children = entity.parent.children || [];\n        entity.parent.children.push(entity);\n      }\n\n      // Fill entities\n      valueEntities[value] = entity;\n      keyEntities[entity.key] = entity;\n      posEntities[pos] = entity;\n\n      // Warning user not to use deprecated label prop.\n      if (!title && label && !warnDeprecatedLabel) {\n        (0, _warning2['default'])(false, '\\'label\\' in treeData is deprecated. Please use \\'title\\' instead.');\n        warnDeprecatedLabel = true;\n      }\n\n      var node = _react2['default'].createElement(\n        _SelectNode2['default'],\n        (0, _extends3['default'])({ key: entity.key }, nodeProps, { title: title || label, label: label, value: value }),\n        traverse(children, pos)\n      );\n\n      entity.node = node;\n\n      return node;\n    });\n  }\n\n  var treeNodes = traverse(list, '0');\n\n  return {\n    treeNodes: treeNodes,\n\n    valueEntities: valueEntities,\n    keyEntities: keyEntities,\n    posEntities: posEntities\n  };\n}\n\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\nfunction isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n\n  var minLen = Math.min(fields1.length, fields2.length);\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\nfunction cleanEntity(_ref3) {\n  var node = _ref3.node,\n      pos = _ref3.pos,\n      children = _ref3.children;\n\n  var instance = {\n    node: node,\n    pos: pos\n  };\n\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n\n  return instance;\n}\n\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n */\nfunction getFilterTree(treeNodes, searchValue, filterFunc) {\n  if (!searchValue) {\n    return null;\n  }\n\n  function mapFilteredNodeToData(node) {\n    if (!node) return null;\n\n    var match = false;\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n\n    var children = (_react2['default'].Children.map(node.props.children, mapFilteredNodeToData) || []).filter(function (n) {\n      return n;\n    });\n\n    if (children.length || match) {\n      return (0, _extends3['default'])({}, node.props, {\n        key: node.key,\n        children: children\n      });\n    }\n\n    return null;\n  }\n\n  return convertDataToEntities(treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  })).treeNodes;\n}\n\n// =================== Value ===================\n/**\n * Convert value to array format to make logic simplify.\n */\nfunction formatInternalValue(value, props) {\n  var valueList = toArray(value);\n\n  // Parse label in value\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if (typeof val !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n\n      return val;\n    });\n  }\n\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\n\nfunction getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n\n  if (entity && entity.node.props) {\n    return entity.node.props[treeNodeLabelProp];\n  }\n\n  // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n  return wrappedValue.value;\n}\n\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\nfunction formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      showCheckedStrategy = props.showCheckedStrategy;\n\n  // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref4) {\n      var value = _ref4.value;\n      return valueEntities[value];\n    }));\n\n    if (showCheckedStrategy === _strategies.SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref5) {\n        var value = _ref5.node.props.value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    } else if (showCheckedStrategy === _strategies.SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = [];\n\n      // Find the leaf children\n      var traverse = function traverse(_ref6) {\n        var value = _ref6.node.props.value,\n            children = _ref6.children;\n\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n\n      return targetValueList;\n    }\n  }\n\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n\n/**\n * When user search the tree, will not get correct tree checked status.\n * For checked key, use the `rc-tree` `calcCheckStateConduct` function.\n * For unchecked key, we need the calculate ourselves.\n */\nfunction calcUncheckConduct(keyList, uncheckedKey, keyEntities) {\n  var myKeyList = keyList.slice();\n\n  function conductUp(conductKey) {\n    myKeyList = myKeyList.filter(function (key) {\n      return key !== conductKey;\n    });\n\n    // Check if need conduct\n    var parentEntity = keyEntities[conductKey].parent;\n    if (parentEntity && myKeyList.some(function (key) {\n      return key === parentEntity.key;\n    })) {\n      conductUp(parentEntity.key);\n    }\n  }\n\n  function conductDown(conductKey) {\n    myKeyList = myKeyList.filter(function (key) {\n      return key !== conductKey;\n    });\n\n    (keyEntities[conductKey].children || []).forEach(function (childEntity) {\n      conductDown(childEntity.key);\n    });\n  }\n\n  conductUp(uncheckedKey);\n  conductDown(uncheckedKey);\n\n  return myKeyList;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$rc_tree_select$lib$SelectNode","~$module$node_modules$warning$warning","~$module$node_modules$babel_runtime$helpers$objectWithoutProperties","~$module$node_modules$rc_tree_select$lib$strategies","~$module$node_modules$babel_runtime$helpers$extends"]],"~:properties",["^5",["pos","isPosRelated","toTitle","formatInternalValue","label","key","parent","children","__esModule","userSelect","calcUncheckConduct","unselectable","posEntities","isLabelInValue","valueEntities","value","keyEntities","resetAriaId","convertDataToEntities","current","getLabel","title","convertTreeToData","parseSimpleTreeData","formatSelectorValue","fields","UNSELECTABLE_STYLE","UNSELECTABLE_ATTRIBUTE","WebkitUserSelect","flatToHierarchy","createRef","getFilterTree","treeNodes","cleanEntity","toArray","default","node","generateAriaId"]],"~:compiled-at",1532351402106,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$rc_tree_select$lib$util.js\",\n\"lineCount\":16,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/rc-tree-select/lib/util.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$rc_tree_select$lib$util\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nexports.__esModule = true;\\nexports.UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_STYLE = undefined;\\n\\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\\n\\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\\n\\nvar _extends2 = require('babel-runtime/helpers/extends');\\n\\nvar _extends3 = _interopRequireDefault(_extends2);\\n\\nexports.toTitle = toTitle;\\nexports.toArray = toArray;\\nexports.createRef = createRef;\\nexports.flatToHierarchy = flatToHierarchy;\\nexports.resetAriaId = resetAriaId;\\nexports.generateAriaId = generateAriaId;\\nexports.isLabelInValue = isLabelInValue;\\nexports.parseSimpleTreeData = parseSimpleTreeData;\\nexports.convertTreeToData = convertTreeToData;\\nexports.convertDataToEntities = convertDataToEntities;\\nexports.isPosRelated = isPosRelated;\\nexports.cleanEntity = cleanEntity;\\nexports.getFilterTree = getFilterTree;\\nexports.formatInternalValue = formatInternalValue;\\nexports.getLabel = getLabel;\\nexports.formatSelectorValue = formatSelectorValue;\\nexports.calcUncheckConduct = calcUncheckConduct;\\n\\nvar _react = require('react');\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nvar _warning = require('warning');\\n\\nvar _warning2 = _interopRequireDefault(_warning);\\n\\nvar _SelectNode = require('./SelectNode');\\n\\nvar _SelectNode2 = _interopRequireDefault(_SelectNode);\\n\\nvar _strategies = require('./strategies');\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\\n\\n// When treeNode not provide key, and we will use value as key.\\n// Some time value is empty, we should pass it instead.\\nvar KEY_OF_VALUE_EMPTY = 'RC_TREE_SELECT_KEY_OF_VALUE_EMPTY';\\n\\nvar warnDeprecatedLabel = false;\\n\\n// =================== MISC ====================\\nfunction toTitle(title) {\\n  if (typeof title === 'string') {\\n    return title;\\n  }\\n  return null;\\n}\\n\\nfunction toArray(data) {\\n  if (!data) return [];\\n\\n  return Array.isArray(data) ? data : [data];\\n}\\n\\n// Shallow copy of React 16.3 createRef api\\nfunction createRef() {\\n  var func = function setRef(node) {\\n    func.current = node;\\n  };\\n  return func;\\n}\\n\\n// =============== Legacy ===============\\nvar UNSELECTABLE_STYLE = exports.UNSELECTABLE_STYLE = {\\n  userSelect: 'none',\\n  WebkitUserSelect: 'none'\\n};\\n\\nvar UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_ATTRIBUTE = {\\n  unselectable: 'unselectable'\\n};\\n\\n/**\\n * Convert position list to hierarchy structure.\\n * This is little hack since use '-' to split the position.\\n */\\nfunction flatToHierarchy(positionList) {\\n  if (!positionList.length) {\\n    return [];\\n  }\\n\\n  var entrances = {};\\n\\n  // Prepare the position map\\n  var posMap = {};\\n  var parsedList = positionList.slice().map(function (entity) {\\n    var clone = (0, _extends3['default'])({}, entity, {\\n      fields: entity.pos.split('-')\\n    });\\n    delete clone.children;\\n    return clone;\\n  });\\n\\n  parsedList.forEach(function (entity) {\\n    posMap[entity.pos] = entity;\\n  });\\n\\n  parsedList.sort(function (a, b) {\\n    return a.fields.length - b.fields.length;\\n  });\\n\\n  // Create the hierarchy\\n  parsedList.forEach(function (entity) {\\n    var parentPos = entity.fields.slice(0, -1).join('-');\\n    var parentEntity = posMap[parentPos];\\n\\n    if (!parentEntity) {\\n      entrances[entity.pos] = entity;\\n    } else {\\n      parentEntity.children = parentEntity.children || [];\\n      parentEntity.children.push(entity);\\n    }\\n\\n    // Some time position list provide `key`, we don't need it\\n    delete entity.key;\\n    delete entity.fields;\\n  });\\n\\n  return Object.keys(entrances).map(function (key) {\\n    return entrances[key];\\n  });\\n}\\n\\n// =============== Accessibility ===============\\nvar ariaId = 0;\\n\\nfunction resetAriaId() {\\n  ariaId = 0;\\n}\\n\\nfunction generateAriaId(prefix) {\\n  ariaId += 1;\\n  return prefix + '_' + ariaId;\\n}\\n\\nfunction isLabelInValue(props) {\\n  var treeCheckable = props.treeCheckable,\\n      treeCheckStrictly = props.treeCheckStrictly,\\n      labelInValue = props.labelInValue;\\n\\n  if (treeCheckable && treeCheckStrictly) {\\n    return true;\\n  }\\n  return labelInValue || false;\\n}\\n\\n// =================== Tree ====================\\nfunction parseSimpleTreeData(treeData, _ref) {\\n  var id = _ref.id,\\n      pId = _ref.pId,\\n      rootPId = _ref.rootPId;\\n\\n  var keyNodes = {};\\n  var rootNodeList = [];\\n\\n  // Fill in the map\\n  var nodeList = treeData.map(function (node) {\\n    var clone = (0, _extends3['default'])({}, node);\\n    var key = clone[id];\\n    keyNodes[key] = clone;\\n    return clone;\\n  });\\n\\n  // Connect tree\\n  nodeList.forEach(function (node) {\\n    var parentKey = node[pId];\\n    var parent = keyNodes[parentKey];\\n\\n    // Fill parent\\n    if (parent) {\\n      parent.children = parent.children || [];\\n      parent.children.push(node);\\n    }\\n\\n    // Fill root tree node\\n    if (parentKey === rootPId || !parent && rootPId === null) {\\n      rootNodeList.push(node);\\n    }\\n  });\\n\\n  return rootNodeList;\\n}\\n\\n/**\\n * `Tree` use `key` to track state but it will changed by React.\\n * We need convert it back to the data and re-generate by `key`.\\n * This is will cause performance issue.\\n */\\nfunction convertTreeToData(treeNodes) {\\n  return _react2['default'].Children.map(treeNodes || [], function (node) {\\n    if (!_react2['default'].isValidElement(node) || !node.type || !node.type.isTreeNode) {\\n      return null;\\n    }\\n\\n    var key = node.key,\\n        props = node.props;\\n\\n\\n    return (0, _extends3['default'])({}, props, {\\n      key: key,\\n      children: convertTreeToData(props.children)\\n    });\\n  }).filter(function (data) {\\n    return data;\\n  });\\n}\\n\\n/**\\n * Convert `treeData` to TreeNode List contains the mapping data.\\n */\\nfunction convertDataToEntities(treeData) {\\n  var list = toArray(treeData);\\n\\n  var valueEntities = {};\\n  var keyEntities = {};\\n  var posEntities = {};\\n\\n  function traverse(subTreeData, parentPos) {\\n    var subList = toArray(subTreeData);\\n\\n    return subList.map(function (_ref2, index) {\\n      var key = _ref2.key,\\n          title = _ref2.title,\\n          label = _ref2.label,\\n          value = _ref2.value,\\n          children = _ref2.children,\\n          nodeProps = (0, _objectWithoutProperties3['default'])(_ref2, ['key', 'title', 'label', 'value', 'children']);\\n\\n      var pos = parentPos + '-' + index;\\n\\n      var entity = { key: key, value: value, pos: pos };\\n\\n      // This may cause some side effect, need additional check\\n      entity.key = entity.key || value;\\n      if (!entity.key && entity.key !== 0) {\\n        entity.key = KEY_OF_VALUE_EMPTY;\\n      }\\n\\n      // Fill children\\n      entity.parent = posEntities[parentPos];\\n      if (entity.parent) {\\n        entity.parent.children = entity.parent.children || [];\\n        entity.parent.children.push(entity);\\n      }\\n\\n      // Fill entities\\n      valueEntities[value] = entity;\\n      keyEntities[entity.key] = entity;\\n      posEntities[pos] = entity;\\n\\n      // Warning user not to use deprecated label prop.\\n      if (!title && label && !warnDeprecatedLabel) {\\n        (0, _warning2['default'])(false, '\\\\'label\\\\' in treeData is deprecated. Please use \\\\'title\\\\' instead.');\\n        warnDeprecatedLabel = true;\\n      }\\n\\n      var node = _react2['default'].createElement(\\n        _SelectNode2['default'],\\n        (0, _extends3['default'])({ key: entity.key }, nodeProps, { title: title || label, label: label, value: value }),\\n        traverse(children, pos)\\n      );\\n\\n      entity.node = node;\\n\\n      return node;\\n    });\\n  }\\n\\n  var treeNodes = traverse(list, '0');\\n\\n  return {\\n    treeNodes: treeNodes,\\n\\n    valueEntities: valueEntities,\\n    keyEntities: keyEntities,\\n    posEntities: posEntities\\n  };\\n}\\n\\n/**\\n * Detect if position has relation.\\n * e.g. 1-2 related with 1-2-3\\n * e.g. 1-3-2 related with 1\\n * e.g. 1-2 not related with 1-21\\n */\\nfunction isPosRelated(pos1, pos2) {\\n  var fields1 = pos1.split('-');\\n  var fields2 = pos2.split('-');\\n\\n  var minLen = Math.min(fields1.length, fields2.length);\\n  for (var i = 0; i < minLen; i += 1) {\\n    if (fields1[i] !== fields2[i]) {\\n      return false;\\n    }\\n  }\\n  return true;\\n}\\n\\n/**\\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\\n * We convert entity to { node, pos, children } format.\\n * This is legacy bug but we still need to do with it.\\n * @param entity\\n */\\nfunction cleanEntity(_ref3) {\\n  var node = _ref3.node,\\n      pos = _ref3.pos,\\n      children = _ref3.children;\\n\\n  var instance = {\\n    node: node,\\n    pos: pos\\n  };\\n\\n  if (children) {\\n    instance.children = children.map(cleanEntity);\\n  }\\n\\n  return instance;\\n}\\n\\n/**\\n * Get a filtered TreeNode list by provided treeNodes.\\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\\n * Such performance hungry!\\n */\\nfunction getFilterTree(treeNodes, searchValue, filterFunc) {\\n  if (!searchValue) {\\n    return null;\\n  }\\n\\n  function mapFilteredNodeToData(node) {\\n    if (!node) return null;\\n\\n    var match = false;\\n    if (filterFunc(searchValue, node)) {\\n      match = true;\\n    }\\n\\n    var children = (_react2['default'].Children.map(node.props.children, mapFilteredNodeToData) || []).filter(function (n) {\\n      return n;\\n    });\\n\\n    if (children.length || match) {\\n      return (0, _extends3['default'])({}, node.props, {\\n        key: node.key,\\n        children: children\\n      });\\n    }\\n\\n    return null;\\n  }\\n\\n  return convertDataToEntities(treeNodes.map(mapFilteredNodeToData).filter(function (node) {\\n    return node;\\n  })).treeNodes;\\n}\\n\\n// =================== Value ===================\\n/**\\n * Convert value to array format to make logic simplify.\\n */\\nfunction formatInternalValue(value, props) {\\n  var valueList = toArray(value);\\n\\n  // Parse label in value\\n  if (isLabelInValue(props)) {\\n    return valueList.map(function (val) {\\n      if (typeof val !== 'object' || !val) {\\n        return {\\n          value: '',\\n          label: ''\\n        };\\n      }\\n\\n      return val;\\n    });\\n  }\\n\\n  return valueList.map(function (val) {\\n    return {\\n      value: val\\n    };\\n  });\\n}\\n\\nfunction getLabel(wrappedValue, entity, treeNodeLabelProp) {\\n  if (wrappedValue.label) {\\n    return wrappedValue.label;\\n  }\\n\\n  if (entity && entity.node.props) {\\n    return entity.node.props[treeNodeLabelProp];\\n  }\\n\\n  // Since value without entity will be in missValueList.\\n  // This code will never reached, but we still need this in case.\\n  return wrappedValue.value;\\n}\\n\\n/**\\n * Convert internal state `valueList` to user needed value list.\\n * This will return an array list. You need check if is not multiple when return.\\n *\\n * `allCheckedNodes` is used for `treeCheckStrictly`\\n */\\nfunction formatSelectorValue(valueList, props, valueEntities) {\\n  var treeNodeLabelProp = props.treeNodeLabelProp,\\n      treeCheckable = props.treeCheckable,\\n      treeCheckStrictly = props.treeCheckStrictly,\\n      showCheckedStrategy = props.showCheckedStrategy;\\n\\n  // Will hide some value if `showCheckedStrategy` is set\\n\\n  if (treeCheckable && !treeCheckStrictly) {\\n    var values = {};\\n    valueList.forEach(function (wrappedValue) {\\n      values[wrappedValue.value] = wrappedValue;\\n    });\\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref4) {\\n      var value = _ref4.value;\\n      return valueEntities[value];\\n    }));\\n\\n    if (showCheckedStrategy === _strategies.SHOW_PARENT) {\\n      // Only get the parent checked value\\n      return hierarchyList.map(function (_ref5) {\\n        var value = _ref5.node.props.value;\\n        return {\\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\\n          value: value\\n        };\\n      });\\n    } else if (showCheckedStrategy === _strategies.SHOW_CHILD) {\\n      // Only get the children checked value\\n      var targetValueList = [];\\n\\n      // Find the leaf children\\n      var traverse = function traverse(_ref6) {\\n        var value = _ref6.node.props.value,\\n            children = _ref6.children;\\n\\n        if (!children || children.length === 0) {\\n          targetValueList.push({\\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\\n            value: value\\n          });\\n          return;\\n        }\\n\\n        children.forEach(function (entity) {\\n          traverse(entity);\\n        });\\n      };\\n\\n      hierarchyList.forEach(function (entity) {\\n        traverse(entity);\\n      });\\n\\n      return targetValueList;\\n    }\\n  }\\n\\n  return valueList.map(function (wrappedValue) {\\n    return {\\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\\n      value: wrappedValue.value\\n    };\\n  });\\n}\\n\\n/**\\n * When user search the tree, will not get correct tree checked status.\\n * For checked key, use the `rc-tree` `calcCheckStateConduct` function.\\n * For unchecked key, we need the calculate ourselves.\\n */\\nfunction calcUncheckConduct(keyList, uncheckedKey, keyEntities) {\\n  var myKeyList = keyList.slice();\\n\\n  function conductUp(conductKey) {\\n    myKeyList = myKeyList.filter(function (key) {\\n      return key !== conductKey;\\n    });\\n\\n    // Check if need conduct\\n    var parentEntity = keyEntities[conductKey].parent;\\n    if (parentEntity && myKeyList.some(function (key) {\\n      return key === parentEntity.key;\\n    })) {\\n      conductUp(parentEntity.key);\\n    }\\n  }\\n\\n  function conductDown(conductKey) {\\n    myKeyList = myKeyList.filter(function (key) {\\n      return key !== conductKey;\\n    });\\n\\n    (keyEntities[conductKey].children || []).forEach(function (childEntity) {\\n      conductDown(childEntity.key);\\n    });\\n  }\\n\\n  conductUp(uncheckedKey);\\n  conductDown(uncheckedKey);\\n\\n  return myKeyList;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"toArray\",\"data\",\"Array\",\"isArray\",\"flatToHierarchy\",\"positionList\",\"length\",\"entrances\",\"posMap\",\"parsedList\",\"slice\",\"map\",\"entity\",\"clone\",\"_extends3\",\"fields\",\"pos\",\"split\",\"children\",\"forEach\",\"sort\",\"a\",\"b\",\"parentPos\",\"join\",\"parentEntity\",\"push\",\"key\",\"Object\",\"keys\",\"isLabelInValue\",\"props\",\"treeCheckStrictly\",\"treeCheckable\",\"labelInValue\",\"convertTreeToData\",\"treeNodes\",\"_react2\",\"Children\",\"node\",\"isValidElement\",\"type\",\"isTreeNode\",\"filter\",\"convertDataToEntities\",\"treeData\",\"traverse\",\"subTreeData\",\"subList\",\"_ref2\",\"index\",\"title\",\"label\",\"value\",\"nodeProps\",\"_objectWithoutProperties3\",\"KEY_OF_VALUE_EMPTY\",\"parent\",\"posEntities\",\"valueEntities\",\"keyEntities\",\"warnDeprecatedLabel\",\"_warning2\",\"createElement\",\"_SelectNode2\",\"list\",\"cleanEntity\",\"_ref3\",\"instance\",\"getLabel\",\"wrappedValue\",\"treeNodeLabelProp\",\"UNSELECTABLE_ATTRIBUTE\",\"UNSELECTABLE_STYLE\",\"undefined\",\"_objectWithoutProperties2\",\"_extends2\",\"toTitle\",\"createRef\",\"func\",\"current\",\"resetAriaId\",\"ariaId\",\"generateAriaId\",\"prefix\",\"parseSimpleTreeData\",\"_ref\",\"id\",\"pId\",\"rootPId\",\"keyNodes\",\"rootNodeList\",\"nodeList\",\"parentKey\",\"isPosRelated\",\"pos1\",\"pos2\",\"fields1\",\"fields2\",\"minLen\",\"Math\",\"min\",\"i\",\"getFilterTree\",\"searchValue\",\"filterFunc\",\"mapFilteredNodeToData\",\"match\",\"n\",\"formatInternalValue\",\"valueList\",\"val\",\"formatSelectorValue\",\"showCheckedStrategy\",\"values\",\"hierarchyList\",\"_ref4\",\"_strategies\",\"SHOW_PARENT\",\"_ref5\",\"SHOW_CHILD\",\"targetValueList\",\"_ref6\",\"calcUncheckConduct\",\"keyList\",\"uncheckedKey\",\"conductUp\",\"conductKey\",\"myKeyList\",\"some\",\"conductDown\",\"childEntity\",\"_react\",\"_warning\",\"_SelectNode\",\"userSelect\",\"WebkitUserSelect\",\"unselectable\"]\n}\n"]