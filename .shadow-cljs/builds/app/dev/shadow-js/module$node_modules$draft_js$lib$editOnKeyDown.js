["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/editOnKeyDown.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$editOnKeyDown=function(global,process,require,module,exports,shadow$shims){function onKeyCommand(command,editorState){switch(command){case \"redo\":return EditorState.redo(editorState);case \"delete\":return keyCommandPlainDelete(editorState);case \"delete-word\":return keyCommandDeleteWord(editorState);case \"backspace\":return keyCommandPlainBackspace(editorState);case \"backspace-word\":return keyCommandBackspaceWord(editorState);case \"backspace-to-start-of-line\":return keyCommandBackspaceToStartOfLine(editorState);\ncase \"split-block\":return keyCommandInsertNewline(editorState);case \"transpose-characters\":return keyCommandTransposeCharacters(editorState);case \"move-selection-to-start-of-block\":return keyCommandMoveSelectionToStartOfBlock(editorState);case \"move-selection-to-end-of-block\":return keyCommandMoveSelectionToEndOfBlock(editorState);case \"secondary-cut\":return SecondaryClipboard.cut(editorState);case \"secondary-paste\":return SecondaryClipboard.paste(editorState);default:return editorState}}var DraftModifier=\nrequire(\"module$node_modules$draft_js$lib$DraftModifier\"),EditorState=require(\"module$node_modules$draft_js$lib$EditorState\");global=require(\"module$node_modules$draft_js$lib$KeyBindingUtil\");var Keys=require(\"module$node_modules$fbjs$lib$Keys\"),SecondaryClipboard=require(\"module$node_modules$draft_js$lib$SecondaryClipboard\");process=require(\"module$node_modules$fbjs$lib$UserAgent\");var isEventHandled=require(\"module$node_modules$draft_js$lib$isEventHandled\"),keyCommandBackspaceToStartOfLine=require(\"module$node_modules$draft_js$lib$keyCommandBackspaceToStartOfLine\"),\nkeyCommandBackspaceWord=require(\"module$node_modules$draft_js$lib$keyCommandBackspaceWord\"),keyCommandDeleteWord=require(\"module$node_modules$draft_js$lib$keyCommandDeleteWord\"),keyCommandInsertNewline=require(\"module$node_modules$draft_js$lib$keyCommandInsertNewline\"),keyCommandMoveSelectionToEndOfBlock=require(\"module$node_modules$draft_js$lib$keyCommandMoveSelectionToEndOfBlock\"),keyCommandMoveSelectionToStartOfBlock=require(\"module$node_modules$draft_js$lib$keyCommandMoveSelectionToStartOfBlock\"),\nkeyCommandPlainBackspace=require(\"module$node_modules$draft_js$lib$keyCommandPlainBackspace\"),keyCommandPlainDelete=require(\"module$node_modules$draft_js$lib$keyCommandPlainDelete\"),keyCommandTransposeCharacters=require(\"module$node_modules$draft_js$lib$keyCommandTransposeCharacters\"),keyCommandUndo=require(\"module$node_modules$draft_js$lib$keyCommandUndo\"),isOptionKeyCommand=global.isOptionKeyCommand,isChrome=process.isBrowser(\"Chrome\");module.exports=function(editor,e){var editorState=editor._latestEditorState;\nswitch(e.which){case Keys.RETURN:e.preventDefault();if(editor.props.handleReturn&&isEventHandled(editor.props.handleReturn(e,editorState)))return;break;case Keys.ESC:e.preventDefault();editor.props.onEscape&&editor.props.onEscape(e);return;case Keys.TAB:editor.props.onTab&&editor.props.onTab(e);return;case Keys.UP:editor.props.onUpArrow&&editor.props.onUpArrow(e);return;case Keys.RIGHT:editor.props.onRightArrow&&editor.props.onRightArrow(e);return;case Keys.DOWN:editor.props.onDownArrow&&editor.props.onDownArrow(e);\nreturn;case Keys.LEFT:editor.props.onLeftArrow&&editor.props.onLeftArrow(e);return;case Keys.SPACE:if(isChrome&&isOptionKeyCommand(e)){e.preventDefault();e=DraftModifier.replaceText(editorState.getCurrentContent(),editorState.getSelection(),\"Â \");editor.update(EditorState.push(editorState,e,\"insert-characters\"));return}}var command=editor.props.keyBindingFn(e);command&&(\"undo\"===command?keyCommandUndo(e,editorState,editor.update):(e.preventDefault(),editor.props.handleKeyCommand&&isEventHandled(editor.props.handleKeyCommand(command,\neditorState))||(e=onKeyCommand(command,editorState),e!==editorState&&editor.update(e))))}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$editOnKeyDown\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnKeyDown\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar KeyBindingUtil = require('./KeyBindingUtil');\nvar Keys = require('fbjs/lib/Keys');\nvar SecondaryClipboard = require('./SecondaryClipboard');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar isEventHandled = require('./isEventHandled');\nvar keyCommandBackspaceToStartOfLine = require('./keyCommandBackspaceToStartOfLine');\nvar keyCommandBackspaceWord = require('./keyCommandBackspaceWord');\nvar keyCommandDeleteWord = require('./keyCommandDeleteWord');\nvar keyCommandInsertNewline = require('./keyCommandInsertNewline');\nvar keyCommandMoveSelectionToEndOfBlock = require('./keyCommandMoveSelectionToEndOfBlock');\nvar keyCommandMoveSelectionToStartOfBlock = require('./keyCommandMoveSelectionToStartOfBlock');\nvar keyCommandPlainBackspace = require('./keyCommandPlainBackspace');\nvar keyCommandPlainDelete = require('./keyCommandPlainDelete');\nvar keyCommandTransposeCharacters = require('./keyCommandTransposeCharacters');\nvar keyCommandUndo = require('./keyCommandUndo');\n\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\n\nvar isChrome = UserAgent.isBrowser('Chrome');\n\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */\nfunction onKeyCommand(command, editorState) {\n  switch (command) {\n    case 'redo':\n      return EditorState.redo(editorState);\n    case 'delete':\n      return keyCommandPlainDelete(editorState);\n    case 'delete-word':\n      return keyCommandDeleteWord(editorState);\n    case 'backspace':\n      return keyCommandPlainBackspace(editorState);\n    case 'backspace-word':\n      return keyCommandBackspaceWord(editorState);\n    case 'backspace-to-start-of-line':\n      return keyCommandBackspaceToStartOfLine(editorState);\n    case 'split-block':\n      return keyCommandInsertNewline(editorState);\n    case 'transpose-characters':\n      return keyCommandTransposeCharacters(editorState);\n    case 'move-selection-to-start-of-block':\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\n    case 'move-selection-to-end-of-block':\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\n    case 'secondary-cut':\n      return SecondaryClipboard.cut(editorState);\n    case 'secondary-paste':\n      return SecondaryClipboard.paste(editorState);\n    default:\n      return editorState;\n  }\n}\n\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */\nfunction editOnKeyDown(editor, e) {\n  var keyCode = e.which;\n  var editorState = editor._latestEditorState;\n\n  switch (keyCode) {\n    case Keys.RETURN:\n      e.preventDefault();\n      // The top-level component may manually handle newline insertion. If\n      // no special handling is performed, fall through to command handling.\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n        return;\n      }\n      break;\n    case Keys.ESC:\n      e.preventDefault();\n      editor.props.onEscape && editor.props.onEscape(e);\n      return;\n    case Keys.TAB:\n      editor.props.onTab && editor.props.onTab(e);\n      return;\n    case Keys.UP:\n      editor.props.onUpArrow && editor.props.onUpArrow(e);\n      return;\n    case Keys.RIGHT:\n      editor.props.onRightArrow && editor.props.onRightArrow(e);\n      return;\n    case Keys.DOWN:\n      editor.props.onDownArrow && editor.props.onDownArrow(e);\n      return;\n    case Keys.LEFT:\n      editor.props.onLeftArrow && editor.props.onLeftArrow(e);\n      return;\n    case Keys.SPACE:\n      // Handling for OSX where option + space scrolls.\n      if (isChrome && isOptionKeyCommand(e)) {\n        e.preventDefault();\n        // Insert a nbsp into the editor.\n        var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), '\\xA0');\n        editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\n        return;\n      }\n  }\n\n  var command = editor.props.keyBindingFn(e);\n\n  // If no command is specified, allow keydown event to continue.\n  if (!command) {\n    return;\n  }\n\n  if (command === 'undo') {\n    // Since undo requires some special updating behavior to keep the editor\n    // in sync, handle it separately.\n    keyCommandUndo(e, editorState, editor.update);\n    return;\n  }\n\n  // At this point, we know that we're handling a command of some kind, so\n  // we don't want to insert a character following the keydown.\n  e.preventDefault();\n\n  // Allow components higher up the tree to handle the command first.\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState))) {\n    return;\n  }\n\n  var newState = onKeyCommand(command, editorState);\n  if (newState !== editorState) {\n    editor.update(newState);\n  }\n}\n\nmodule.exports = editOnKeyDown;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$draft_js$lib$keyCommandPlainDelete","~$module$node_modules$draft_js$lib$isEventHandled","~$module$node_modules$draft_js$lib$KeyBindingUtil","~$module$node_modules$draft_js$lib$keyCommandMoveSelectionToEndOfBlock","~$module$node_modules$fbjs$lib$Keys","~$module$node_modules$draft_js$lib$keyCommandInsertNewline","~$module$node_modules$draft_js$lib$keyCommandBackspaceToStartOfLine","~$shadow.js","~$module$node_modules$draft_js$lib$DraftModifier","~$module$node_modules$draft_js$lib$keyCommandDeleteWord","~$module$node_modules$draft_js$lib$keyCommandMoveSelectionToStartOfBlock","~$module$node_modules$draft_js$lib$EditorState","~$module$node_modules$draft_js$lib$keyCommandUndo","~$module$node_modules$draft_js$lib$SecondaryClipboard","~$module$node_modules$fbjs$lib$UserAgent","~$module$node_modules$draft_js$lib$keyCommandBackspaceWord","~$module$node_modules$draft_js$lib$keyCommandTransposeCharacters","~$module$node_modules$draft_js$lib$keyCommandPlainBackspace"]],"~:properties",["^5",[]],"~:compiled-at",1532351402148,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$editOnKeyDown.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/editOnKeyDown.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$editOnKeyDown\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule editOnKeyDown\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar DraftModifier = require('./DraftModifier');\\nvar EditorState = require('./EditorState');\\nvar KeyBindingUtil = require('./KeyBindingUtil');\\nvar Keys = require('fbjs/lib/Keys');\\nvar SecondaryClipboard = require('./SecondaryClipboard');\\nvar UserAgent = require('fbjs/lib/UserAgent');\\n\\nvar isEventHandled = require('./isEventHandled');\\nvar keyCommandBackspaceToStartOfLine = require('./keyCommandBackspaceToStartOfLine');\\nvar keyCommandBackspaceWord = require('./keyCommandBackspaceWord');\\nvar keyCommandDeleteWord = require('./keyCommandDeleteWord');\\nvar keyCommandInsertNewline = require('./keyCommandInsertNewline');\\nvar keyCommandMoveSelectionToEndOfBlock = require('./keyCommandMoveSelectionToEndOfBlock');\\nvar keyCommandMoveSelectionToStartOfBlock = require('./keyCommandMoveSelectionToStartOfBlock');\\nvar keyCommandPlainBackspace = require('./keyCommandPlainBackspace');\\nvar keyCommandPlainDelete = require('./keyCommandPlainDelete');\\nvar keyCommandTransposeCharacters = require('./keyCommandTransposeCharacters');\\nvar keyCommandUndo = require('./keyCommandUndo');\\n\\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\\n\\nvar isChrome = UserAgent.isBrowser('Chrome');\\n\\n/**\\n * Map a `DraftEditorCommand` command value to a corresponding function.\\n */\\nfunction onKeyCommand(command, editorState) {\\n  switch (command) {\\n    case 'redo':\\n      return EditorState.redo(editorState);\\n    case 'delete':\\n      return keyCommandPlainDelete(editorState);\\n    case 'delete-word':\\n      return keyCommandDeleteWord(editorState);\\n    case 'backspace':\\n      return keyCommandPlainBackspace(editorState);\\n    case 'backspace-word':\\n      return keyCommandBackspaceWord(editorState);\\n    case 'backspace-to-start-of-line':\\n      return keyCommandBackspaceToStartOfLine(editorState);\\n    case 'split-block':\\n      return keyCommandInsertNewline(editorState);\\n    case 'transpose-characters':\\n      return keyCommandTransposeCharacters(editorState);\\n    case 'move-selection-to-start-of-block':\\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\\n    case 'move-selection-to-end-of-block':\\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\\n    case 'secondary-cut':\\n      return SecondaryClipboard.cut(editorState);\\n    case 'secondary-paste':\\n      return SecondaryClipboard.paste(editorState);\\n    default:\\n      return editorState;\\n  }\\n}\\n\\n/**\\n * Intercept keydown behavior to handle keys and commands manually, if desired.\\n *\\n * Keydown combinations may be mapped to `DraftCommand` values, which may\\n * correspond to command functions that modify the editor or its contents.\\n *\\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\\n * component may provide a custom mapping via the `keyBindingFn` prop.\\n */\\nfunction editOnKeyDown(editor, e) {\\n  var keyCode = e.which;\\n  var editorState = editor._latestEditorState;\\n\\n  switch (keyCode) {\\n    case Keys.RETURN:\\n      e.preventDefault();\\n      // The top-level component may manually handle newline insertion. If\\n      // no special handling is performed, fall through to command handling.\\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\\n        return;\\n      }\\n      break;\\n    case Keys.ESC:\\n      e.preventDefault();\\n      editor.props.onEscape && editor.props.onEscape(e);\\n      return;\\n    case Keys.TAB:\\n      editor.props.onTab && editor.props.onTab(e);\\n      return;\\n    case Keys.UP:\\n      editor.props.onUpArrow && editor.props.onUpArrow(e);\\n      return;\\n    case Keys.RIGHT:\\n      editor.props.onRightArrow && editor.props.onRightArrow(e);\\n      return;\\n    case Keys.DOWN:\\n      editor.props.onDownArrow && editor.props.onDownArrow(e);\\n      return;\\n    case Keys.LEFT:\\n      editor.props.onLeftArrow && editor.props.onLeftArrow(e);\\n      return;\\n    case Keys.SPACE:\\n      // Handling for OSX where option + space scrolls.\\n      if (isChrome && isOptionKeyCommand(e)) {\\n        e.preventDefault();\\n        // Insert a nbsp into the editor.\\n        var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), '\\\\xA0');\\n        editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\\n        return;\\n      }\\n  }\\n\\n  var command = editor.props.keyBindingFn(e);\\n\\n  // If no command is specified, allow keydown event to continue.\\n  if (!command) {\\n    return;\\n  }\\n\\n  if (command === 'undo') {\\n    // Since undo requires some special updating behavior to keep the editor\\n    // in sync, handle it separately.\\n    keyCommandUndo(e, editorState, editor.update);\\n    return;\\n  }\\n\\n  // At this point, we know that we're handling a command of some kind, so\\n  // we don't want to insert a character following the keydown.\\n  e.preventDefault();\\n\\n  // Allow components higher up the tree to handle the command first.\\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState))) {\\n    return;\\n  }\\n\\n  var newState = onKeyCommand(command, editorState);\\n  if (newState !== editorState) {\\n    editor.update(newState);\\n  }\\n}\\n\\nmodule.exports = editOnKeyDown;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"onKeyCommand\",\"command\",\"editorState\",\"EditorState\",\"redo\",\"keyCommandPlainDelete\",\"keyCommandDeleteWord\",\"keyCommandPlainBackspace\",\"keyCommandBackspaceWord\",\"keyCommandBackspaceToStartOfLine\",\"keyCommandInsertNewline\",\"keyCommandTransposeCharacters\",\"keyCommandMoveSelectionToStartOfBlock\",\"keyCommandMoveSelectionToEndOfBlock\",\"SecondaryClipboard\",\"cut\",\"paste\",\"DraftModifier\",\"KeyBindingUtil\",\"Keys\",\"UserAgent\",\"isEventHandled\",\"keyCommandUndo\",\"isOptionKeyCommand\",\"isChrome\",\"isBrowser\",\"editOnKeyDown\",\"editor\",\"e\",\"_latestEditorState\",\"which\",\"RETURN\",\"preventDefault\",\"props\",\"handleReturn\",\"ESC\",\"onEscape\",\"TAB\",\"onTab\",\"UP\",\"onUpArrow\",\"RIGHT\",\"onRightArrow\",\"DOWN\",\"onDownArrow\",\"LEFT\",\"onLeftArrow\",\"SPACE\",\"contentState\",\"replaceText\",\"getCurrentContent\",\"getSelection\",\"update\",\"push\",\"keyBindingFn\",\"handleKeyCommand\",\"newState\"]\n}\n"]