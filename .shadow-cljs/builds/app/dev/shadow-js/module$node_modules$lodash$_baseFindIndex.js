["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_baseFindIndex.js"],"~:js","shadow$provide.module$node_modules$lodash$_baseFindIndex=function(global,process,require,module,exports,shadow$shims){module.exports=function(array,predicate,fromIndex,fromRight){var length=array.length;for(fromIndex+=fromRight?1:-1;fromRight?fromIndex--:++fromIndex<length;)if(predicate(array[fromIndex],fromIndex,array))return fromIndex;return-1}}","~:source","shadow$provide[\"module$node_modules$lodash$_baseFindIndex\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1532351402173,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_baseFindIndex.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAwB3HF,MAAAC,QAAA,CAZAE,QAAsB,CAACC,KAAD,CAAQC,SAAR,CAAmBC,SAAnB,CAA8BC,SAA9B,CAAyC,CAAA,IACzDC,OAASJ,KAAAI,OAGb,KAFYF,SAEZ,EAFyBC,SAAA,CAAY,CAAZ,CAAiB,EAE1C,CAAQA,SAAA,CAAYE,SAAA,EAAZ,CAAsB,EAAEA,SAAxB,CAAgCD,MAAxC,CAAA,CACE,GAAIH,SAAA,CAAUD,KAAA,CAAMK,SAAN,CAAV,CAAwBA,SAAxB,CAA+BL,KAA/B,CAAJ,CACE,MAAOK,UAGX,OAAQ,EATqD,CAZ4D;\",\n\"sources\":[\"node_modules/lodash/_baseFindIndex.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_baseFindIndex\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\\n * support for iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {Function} predicate The function invoked per iteration.\\n * @param {number} fromIndex The index to search from.\\n * @param {boolean} [fromRight] Specify iterating from right to left.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\\n  var length = array.length,\\n      index = fromIndex + (fromRight ? 1 : -1);\\n\\n  while ((fromRight ? index-- : ++index < length)) {\\n    if (predicate(array[index], index, array)) {\\n      return index;\\n    }\\n  }\\n  return -1;\\n}\\n\\nmodule.exports = baseFindIndex;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"baseFindIndex\",\"array\",\"predicate\",\"fromIndex\",\"fromRight\",\"length\",\"index\"]\n}\n"]