["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/getContentStateFragment.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$getContentStateFragment=function(global,process,require,module,exports,shadow$shims){var randomizeBlockMapKeys=require(\"module$node_modules$draft_js$lib$randomizeBlockMapKeys\"),removeEntitiesAtEdges=require(\"module$node_modules$draft_js$lib$removeEntitiesAtEdges\");module.exports=function(contentState,selectionState){var startKey=selectionState.getStartKey(),startOffset=selectionState.getStartOffset(),endKey=selectionState.getEndKey(),endOffset=selectionState.getEndOffset();\ncontentState=removeEntitiesAtEdges(contentState,selectionState).getBlockMap();var blockKeys=contentState.keySeq();selectionState=blockKeys.indexOf(startKey);blockKeys=blockKeys.indexOf(endKey)+1;return randomizeBlockMapKeys(contentState.slice(selectionState,blockKeys).map(function(block,blockKey){var text=block.getText(),chars=block.getCharacterList();return startKey===endKey?block.merge({text:text.slice(startOffset,endOffset),characterList:chars.slice(startOffset,endOffset)}):blockKey===startKey?\nblock.merge({text:text.slice(startOffset),characterList:chars.slice(startOffset)}):blockKey===endKey?block.merge({text:text.slice(0,endOffset),characterList:chars.slice(0,endOffset)}):block}))}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$getContentStateFragment\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getContentStateFragment\n * @format\n * \n */\n\n'use strict';\n\nvar randomizeBlockMapKeys = require('./randomizeBlockMapKeys');\nvar removeEntitiesAtEdges = require('./removeEntitiesAtEdges');\n\nvar getContentStateFragment = function getContentStateFragment(contentState, selectionState) {\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n\n  // Edge entities should be stripped to ensure that we don't preserve\n  // invalid partial entities when the fragment is reused. We do, however,\n  // preserve entities that are entirely within the selection range.\n  var contentWithoutEdgeEntities = removeEntitiesAtEdges(contentState, selectionState);\n\n  var blockMap = contentWithoutEdgeEntities.getBlockMap();\n  var blockKeys = blockMap.keySeq();\n  var startIndex = blockKeys.indexOf(startKey);\n  var endIndex = blockKeys.indexOf(endKey) + 1;\n\n  return randomizeBlockMapKeys(blockMap.slice(startIndex, endIndex).map(function (block, blockKey) {\n    var text = block.getText();\n    var chars = block.getCharacterList();\n\n    if (startKey === endKey) {\n      return block.merge({\n        text: text.slice(startOffset, endOffset),\n        characterList: chars.slice(startOffset, endOffset)\n      });\n    }\n\n    if (blockKey === startKey) {\n      return block.merge({\n        text: text.slice(startOffset),\n        characterList: chars.slice(startOffset)\n      });\n    }\n\n    if (blockKey === endKey) {\n      return block.merge({\n        text: text.slice(0, endOffset),\n        characterList: chars.slice(0, endOffset)\n      });\n    }\n\n    return block;\n  }));\n};\n\nmodule.exports = getContentStateFragment;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$draft_js$lib$randomizeBlockMapKeys","~$module$node_modules$draft_js$lib$removeEntitiesAtEdges"]],"~:properties",["^5",["text","characterList"]],"~:compiled-at",1532351402128,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$getContentStateFragment.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB1I,IAAIC,sBAAwBJ,OAAA,CAAQ,wDAAR,CAA5B,CACIK,sBAAwBL,OAAA,CAAQ,wDAAR,CA+C5BC,OAAAC,QAAA,CA7C8BI,QAAgC,CAACC,YAAD,CAAeC,cAAf,CAA+B,CAC3F,IAAIC,SAAWD,cAAAE,YAAA,EAAf,CACIC,YAAcH,cAAAI,eAAA,EADlB,CAEIC,OAASL,cAAAM,UAAA,EAFb,CAGIC,UAAYP,cAAAQ,aAAA,EAOZC;YAAAA,CAF6BZ,qBAAAa,CAAsBX,YAAtBW,CAAoCV,cAApCU,CAElBC,YAAA,EACf,KAAIC,UAAYH,YAAAI,OAAA,EACZC,eAAAA,CAAaF,SAAAG,QAAA,CAAkBd,QAAlB,CACbe,UAAAA,CAAWJ,SAAAG,QAAA,CAAkBV,MAAlB,CAAXW,CAAuC,CAE3C,OAAOpB,sBAAA,CAAsBa,YAAAQ,MAAA,CAAeH,cAAf,CAA2BE,SAA3B,CAAAE,IAAA,CAAyC,QAAS,CAACC,KAAD,CAAQC,QAAR,CAAkB,CAC/F,IAAIC,KAAOF,KAAAG,QAAA,EAAX,CACIC,MAAQJ,KAAAK,iBAAA,EAEZ,OAAIvB,SAAJ,GAAiBI,MAAjB,CACSc,KAAAM,MAAA,CAAY,CACjBJ,KAAMA,IAAAJ,MAAA,CAAWd,WAAX,CAAwBI,SAAxB,CADW,CAEjBmB,cAAeH,KAAAN,MAAA,CAAYd,WAAZ,CAAyBI,SAAzB,CAFE,CAAZ,CADT,CAOIa,QAAJ,GAAiBnB,QAAjB;AACSkB,KAAAM,MAAA,CAAY,CACjBJ,KAAMA,IAAAJ,MAAA,CAAWd,WAAX,CADW,CAEjBuB,cAAeH,KAAAN,MAAA,CAAYd,WAAZ,CAFE,CAAZ,CADT,CAOIiB,QAAJ,GAAiBf,MAAjB,CACSc,KAAAM,MAAA,CAAY,CACjBJ,KAAMA,IAAAJ,MAAA,CAAW,CAAX,CAAcV,SAAd,CADW,CAEjBmB,cAAeH,KAAAN,MAAA,CAAY,CAAZ,CAAeV,SAAf,CAFE,CAAZ,CADT,CAOOY,KAzBwF,CAApE,CAAtB,CAhBoF,CAnB6C;\",\n\"sources\":[\"node_modules/draft-js/lib/getContentStateFragment.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$getContentStateFragment\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule getContentStateFragment\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar randomizeBlockMapKeys = require('./randomizeBlockMapKeys');\\nvar removeEntitiesAtEdges = require('./removeEntitiesAtEdges');\\n\\nvar getContentStateFragment = function getContentStateFragment(contentState, selectionState) {\\n  var startKey = selectionState.getStartKey();\\n  var startOffset = selectionState.getStartOffset();\\n  var endKey = selectionState.getEndKey();\\n  var endOffset = selectionState.getEndOffset();\\n\\n  // Edge entities should be stripped to ensure that we don't preserve\\n  // invalid partial entities when the fragment is reused. We do, however,\\n  // preserve entities that are entirely within the selection range.\\n  var contentWithoutEdgeEntities = removeEntitiesAtEdges(contentState, selectionState);\\n\\n  var blockMap = contentWithoutEdgeEntities.getBlockMap();\\n  var blockKeys = blockMap.keySeq();\\n  var startIndex = blockKeys.indexOf(startKey);\\n  var endIndex = blockKeys.indexOf(endKey) + 1;\\n\\n  return randomizeBlockMapKeys(blockMap.slice(startIndex, endIndex).map(function (block, blockKey) {\\n    var text = block.getText();\\n    var chars = block.getCharacterList();\\n\\n    if (startKey === endKey) {\\n      return block.merge({\\n        text: text.slice(startOffset, endOffset),\\n        characterList: chars.slice(startOffset, endOffset)\\n      });\\n    }\\n\\n    if (blockKey === startKey) {\\n      return block.merge({\\n        text: text.slice(startOffset),\\n        characterList: chars.slice(startOffset)\\n      });\\n    }\\n\\n    if (blockKey === endKey) {\\n      return block.merge({\\n        text: text.slice(0, endOffset),\\n        characterList: chars.slice(0, endOffset)\\n      });\\n    }\\n\\n    return block;\\n  }));\\n};\\n\\nmodule.exports = getContentStateFragment;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"randomizeBlockMapKeys\",\"removeEntitiesAtEdges\",\"getContentStateFragment\",\"contentState\",\"selectionState\",\"startKey\",\"getStartKey\",\"startOffset\",\"getStartOffset\",\"endKey\",\"getEndKey\",\"endOffset\",\"getEndOffset\",\"blockMap\",\"contentWithoutEdgeEntities\",\"getBlockMap\",\"blockKeys\",\"keySeq\",\"startIndex\",\"indexOf\",\"endIndex\",\"slice\",\"map\",\"block\",\"blockKey\",\"text\",\"getText\",\"chars\",\"getCharacterList\",\"merge\",\"characterList\"]\n}\n"]