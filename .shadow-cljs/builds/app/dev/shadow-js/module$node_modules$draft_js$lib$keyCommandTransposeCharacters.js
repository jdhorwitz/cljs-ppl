["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/keyCommandTransposeCharacters.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$keyCommandTransposeCharacters=function(global,process,require,module,exports,shadow$shims){var DraftModifier=require(\"module$node_modules$draft_js$lib$DraftModifier\"),EditorState=require(\"module$node_modules$draft_js$lib$EditorState\"),getContentStateFragment=require(\"module$node_modules$draft_js$lib$getContentStateFragment\");module.exports=function(editorState){var selection=editorState.getSelection();if(!selection.isCollapsed())return editorState;var offset=\nselection.getAnchorOffset();if(0===offset)return editorState;var blockKey=selection.getAnchorKey(),content=editorState.getCurrentContent();blockKey=content.getBlockForKey(blockKey).getLength();if(1>=blockKey)return editorState;offset===blockKey?blockKey=selection.set(\"anchorOffset\",offset-1):(blockKey=selection.set(\"focusOffset\",offset+1),selection=blockKey.set(\"anchorOffset\",offset+1));offset=getContentStateFragment(content,blockKey);content=DraftModifier.removeRange(content,blockKey,\"backward\");\nblockKey=content.getSelectionAfter();var targetOffset=blockKey.getAnchorOffset()-1;blockKey=blockKey.merge({anchorOffset:targetOffset,focusOffset:targetOffset});content=DraftModifier.replaceWithFragment(content,blockKey,offset);editorState=EditorState.push(editorState,content,\"insert-fragment\");return EditorState.acceptSelection(editorState,selection)}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$keyCommandTransposeCharacters\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandTransposeCharacters\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\n\nvar getContentStateFragment = require('./getContentStateFragment');\n\n/**\n * Transpose the characters on either side of a collapsed cursor, or\n * if the cursor is at the end of the block, transpose the last two\n * characters.\n */\nfunction keyCommandTransposeCharacters(editorState) {\n  var selection = editorState.getSelection();\n  if (!selection.isCollapsed()) {\n    return editorState;\n  }\n\n  var offset = selection.getAnchorOffset();\n  if (offset === 0) {\n    return editorState;\n  }\n\n  var blockKey = selection.getAnchorKey();\n  var content = editorState.getCurrentContent();\n  var block = content.getBlockForKey(blockKey);\n  var length = block.getLength();\n\n  // Nothing to transpose if there aren't two characters.\n  if (length <= 1) {\n    return editorState;\n  }\n\n  var removalRange;\n  var finalSelection;\n\n  if (offset === length) {\n    // The cursor is at the end of the block. Swap the last two characters.\n    removalRange = selection.set('anchorOffset', offset - 1);\n    finalSelection = selection;\n  } else {\n    removalRange = selection.set('focusOffset', offset + 1);\n    finalSelection = removalRange.set('anchorOffset', offset + 1);\n  }\n\n  // Extract the character to move as a fragment. This preserves its\n  // styling and entity, if any.\n  var movedFragment = getContentStateFragment(content, removalRange);\n  var afterRemoval = DraftModifier.removeRange(content, removalRange, 'backward');\n\n  // After the removal, the insertion target is one character back.\n  var selectionAfter = afterRemoval.getSelectionAfter();\n  var targetOffset = selectionAfter.getAnchorOffset() - 1;\n  var targetRange = selectionAfter.merge({\n    anchorOffset: targetOffset,\n    focusOffset: targetOffset\n  });\n\n  var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n\n  var newEditorState = EditorState.push(editorState, afterInsert, 'insert-fragment');\n\n  return EditorState.acceptSelection(newEditorState, finalSelection);\n}\n\nmodule.exports = keyCommandTransposeCharacters;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$draft_js$lib$DraftModifier","~$module$node_modules$draft_js$lib$EditorState","~$module$node_modules$draft_js$lib$getContentStateFragment"]],"~:properties",["^5",["anchorOffset","focusOffset"]],"~:compiled-at",1532351402147,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$keyCommandTransposeCharacters.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,+DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBhJ,IAAIC,cAAgBJ,OAAA,CAAQ,gDAAR,CAApB,CACIK,YAAcL,OAAA,CAAQ,8CAAR,CADlB,CAGIM,wBAA0BN,OAAA,CAAQ,0DAAR,CA4D9BC,OAAAC,QAAA,CArDAK,QAAsC,CAACC,WAAD,CAAc,CAClD,IAAIC,UAAYD,WAAAE,aAAA,EAChB,IAAI,CAACD,SAAAE,YAAA,EAAL,CACE,MAAOH,YAGT,KAAII;AAASH,SAAAI,gBAAA,EACb,IAAe,CAAf,GAAID,MAAJ,CACE,MAAOJ,YAGT,KAAIM,SAAWL,SAAAM,aAAA,EAAf,CACIC,QAAUR,WAAAS,kBAAA,EAEVC,SAAAA,CADQF,OAAAG,eAAAC,CAAuBN,QAAvBM,CACCC,UAAA,EAGb,IAAc,CAAd,EAAIH,QAAJ,CACE,MAAOV,YAMLI,OAAJ,GAAeM,QAAf,CAEEI,QAFF,CAEiBb,SAAAc,IAAA,CAAc,cAAd,CAA8BX,MAA9B,CAAuC,CAAvC,CAFjB,EAKEU,QACA,CADeb,SAAAc,IAAA,CAAc,aAAd,CAA6BX,MAA7B,CAAsC,CAAtC,CACf,CAAAY,SAAA,CAAiBF,QAAAC,IAAA,CAAiB,cAAjB,CAAiCX,MAAjC,CAA0C,CAA1C,CANnB,CAWIa,OAAAA,CAAgBnB,uBAAA,CAAwBU,OAAxB,CAAiCM,QAAjC,CAChBI,QAAAA,CAAetB,aAAAuB,YAAA,CAA0BX,OAA1B,CAAmCM,QAAnC,CAAiD,UAAjD,CAGfM;QAAAA,CAAiBF,OAAAG,kBAAA,EACrB,KAAIC,aAAeF,QAAAf,gBAAA,EAAfiB,CAAkD,CAClDC,SAAAA,CAAcH,QAAAI,MAAA,CAAqB,CACrCC,aAAcH,YADuB,CAErCI,YAAaJ,YAFwB,CAArB,CAKdK,QAAAA,CAAc/B,aAAAgC,oBAAA,CAAkCV,OAAlC,CAAgDK,QAAhD,CAA6DN,MAA7D,CAEdY,YAAAA,CAAiBhC,WAAAiC,KAAA,CAAiB9B,WAAjB,CAA8B2B,OAA9B,CAA2C,iBAA3C,CAErB,OAAO9B,YAAAkC,gBAAA,CAA4BF,WAA5B,CAA4Cb,SAA5C,CAlD2C,CA1B4F;\",\n\"sources\":[\"node_modules/draft-js/lib/keyCommandTransposeCharacters.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$keyCommandTransposeCharacters\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule keyCommandTransposeCharacters\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar DraftModifier = require('./DraftModifier');\\nvar EditorState = require('./EditorState');\\n\\nvar getContentStateFragment = require('./getContentStateFragment');\\n\\n/**\\n * Transpose the characters on either side of a collapsed cursor, or\\n * if the cursor is at the end of the block, transpose the last two\\n * characters.\\n */\\nfunction keyCommandTransposeCharacters(editorState) {\\n  var selection = editorState.getSelection();\\n  if (!selection.isCollapsed()) {\\n    return editorState;\\n  }\\n\\n  var offset = selection.getAnchorOffset();\\n  if (offset === 0) {\\n    return editorState;\\n  }\\n\\n  var blockKey = selection.getAnchorKey();\\n  var content = editorState.getCurrentContent();\\n  var block = content.getBlockForKey(blockKey);\\n  var length = block.getLength();\\n\\n  // Nothing to transpose if there aren't two characters.\\n  if (length <= 1) {\\n    return editorState;\\n  }\\n\\n  var removalRange;\\n  var finalSelection;\\n\\n  if (offset === length) {\\n    // The cursor is at the end of the block. Swap the last two characters.\\n    removalRange = selection.set('anchorOffset', offset - 1);\\n    finalSelection = selection;\\n  } else {\\n    removalRange = selection.set('focusOffset', offset + 1);\\n    finalSelection = removalRange.set('anchorOffset', offset + 1);\\n  }\\n\\n  // Extract the character to move as a fragment. This preserves its\\n  // styling and entity, if any.\\n  var movedFragment = getContentStateFragment(content, removalRange);\\n  var afterRemoval = DraftModifier.removeRange(content, removalRange, 'backward');\\n\\n  // After the removal, the insertion target is one character back.\\n  var selectionAfter = afterRemoval.getSelectionAfter();\\n  var targetOffset = selectionAfter.getAnchorOffset() - 1;\\n  var targetRange = selectionAfter.merge({\\n    anchorOffset: targetOffset,\\n    focusOffset: targetOffset\\n  });\\n\\n  var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\\n\\n  var newEditorState = EditorState.push(editorState, afterInsert, 'insert-fragment');\\n\\n  return EditorState.acceptSelection(newEditorState, finalSelection);\\n}\\n\\nmodule.exports = keyCommandTransposeCharacters;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"DraftModifier\",\"EditorState\",\"getContentStateFragment\",\"keyCommandTransposeCharacters\",\"editorState\",\"selection\",\"getSelection\",\"isCollapsed\",\"offset\",\"getAnchorOffset\",\"blockKey\",\"getAnchorKey\",\"content\",\"getCurrentContent\",\"length\",\"getBlockForKey\",\"block\",\"getLength\",\"removalRange\",\"set\",\"finalSelection\",\"movedFragment\",\"afterRemoval\",\"removeRange\",\"selectionAfter\",\"getSelectionAfter\",\"targetOffset\",\"targetRange\",\"merge\",\"anchorOffset\",\"focusOffset\",\"afterInsert\",\"replaceWithFragment\",\"newEditorState\",\"push\",\"acceptSelection\"]\n}\n"]