["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/SecondaryClipboard.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$SecondaryClipboard=function(global,process,require,module,exports,shadow$shims){var DraftModifier=require(\"module$node_modules$draft_js$lib$DraftModifier\"),EditorState=require(\"module$node_modules$draft_js$lib$EditorState\"),getContentStateFragment=require(\"module$node_modules$draft_js$lib$getContentStateFragment\"),nullthrows=require(\"module$node_modules$fbjs$lib$nullthrows\"),clipboard=null;module.exports={cut:function(editorState){var content=editorState.getCurrentContent(),\nselection=editorState.getSelection();if(selection.isCollapsed()){var anchorKey=selection.getAnchorKey();anchorKey=content.getBlockForKey(anchorKey).getLength();if(anchorKey===selection.getAnchorOffset())return editorState;selection=selection.set(\"focusOffset\",anchorKey)}selection=nullthrows(selection);clipboard=getContentStateFragment(content,selection);selection=DraftModifier.removeRange(content,selection,\"forward\");return selection===content?editorState:EditorState.push(editorState,selection,\"remove-range\")},\npaste:function(editorState){if(!clipboard)return editorState;var newContent=DraftModifier.replaceWithFragment(editorState.getCurrentContent(),editorState.getSelection(),clipboard);return EditorState.push(editorState,newContent,\"insert-fragment\")}}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$SecondaryClipboard\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SecondaryClipboard\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\n\nvar getContentStateFragment = require('./getContentStateFragment');\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nvar clipboard = null;\n\n/**\n * Some systems offer a \"secondary\" clipboard to allow quick internal cut\n * and paste behavior. For instance, Ctrl+K (cut) and Ctrl+Y (paste).\n */\nvar SecondaryClipboard = {\n  cut: function cut(editorState) {\n    var content = editorState.getCurrentContent();\n    var selection = editorState.getSelection();\n    var targetRange = null;\n\n    if (selection.isCollapsed()) {\n      var anchorKey = selection.getAnchorKey();\n      var blockEnd = content.getBlockForKey(anchorKey).getLength();\n\n      if (blockEnd === selection.getAnchorOffset()) {\n        return editorState;\n      }\n\n      targetRange = selection.set('focusOffset', blockEnd);\n    } else {\n      targetRange = selection;\n    }\n\n    targetRange = nullthrows(targetRange);\n    clipboard = getContentStateFragment(content, targetRange);\n\n    var afterRemoval = DraftModifier.removeRange(content, targetRange, 'forward');\n\n    if (afterRemoval === content) {\n      return editorState;\n    }\n\n    return EditorState.push(editorState, afterRemoval, 'remove-range');\n  },\n\n  paste: function paste(editorState) {\n    if (!clipboard) {\n      return editorState;\n    }\n\n    var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), clipboard);\n\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  }\n};\n\nmodule.exports = SecondaryClipboard;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$nullthrows","~$shadow.js","~$module$node_modules$draft_js$lib$DraftModifier","~$module$node_modules$draft_js$lib$EditorState","~$module$node_modules$draft_js$lib$getContentStateFragment"]],"~:properties",["^5",["paste","cut"]],"~:compiled-at",1532351402145,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$SecondaryClipboard.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,oDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBrI,IAAIC,cAAgBJ,OAAA,CAAQ,gDAAR,CAApB,CACIK,YAAcL,OAAA,CAAQ,8CAAR,CADlB,CAGIM,wBAA0BN,OAAA,CAAQ,0DAAR,CAH9B,CAIIO,WAAaP,OAAA,CAAQ,yCAAR,CAJjB,CAMIQ,UAAY,IAgDhBP,OAAAC,QAAA,CA1CyBO,CACvBC,IAAKA,QAAY,CAACC,WAAD,CAAc,CAC7B,IAAIC,QAAUD,WAAAE,kBAAA,EAAd;AACIC,UAAYH,WAAAI,aAAA,EAGhB,IAAID,SAAAE,YAAA,EAAJ,CAA6B,CAC3B,IAAIC,UAAYH,SAAAI,aAAA,EACZC,UAAAA,CAAWP,OAAAQ,eAAA,CAAuBH,SAAvB,CAAAI,UAAA,EAEf,IAAIF,SAAJ,GAAiBL,SAAAQ,gBAAA,EAAjB,CACE,MAAOX,YAGTY,UAAA,CAAcT,SAAAU,IAAA,CAAc,aAAd,CAA6BL,SAA7B,CARa,CAa7BI,SAAA,CAAchB,UAAA,CAAWgB,SAAX,CACdf,UAAA,CAAYF,uBAAA,CAAwBM,OAAxB,CAAiCW,SAAjC,CAERE,UAAAA,CAAerB,aAAAsB,YAAA,CAA0Bd,OAA1B,CAAmCW,SAAnC,CAAgD,SAAhD,CAEnB,OAAIE,UAAJ,GAAqBb,OAArB,CACSD,WADT,CAION,WAAAsB,KAAA,CAAiBhB,WAAjB,CAA8Bc,SAA9B,CAA4C,cAA5C,CA3BsB,CADRhB;AA+BvBmB,MAAOA,QAAc,CAACjB,WAAD,CAAc,CACjC,GAAI,CAACH,SAAL,CACE,MAAOG,YAGT,KAAIkB,WAAazB,aAAA0B,oBAAA,CAAkCnB,WAAAE,kBAAA,EAAlC,CAAmEF,WAAAI,aAAA,EAAnE,CAA+FP,SAA/F,CAEjB,OAAOH,YAAAsB,KAAA,CAAiBhB,WAAjB,CAA8BkB,UAA9B,CAA0C,iBAA1C,CAP0B,CA/BZpB,CA5B4G;\",\n\"sources\":[\"node_modules/draft-js/lib/SecondaryClipboard.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$SecondaryClipboard\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule SecondaryClipboard\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar DraftModifier = require('./DraftModifier');\\nvar EditorState = require('./EditorState');\\n\\nvar getContentStateFragment = require('./getContentStateFragment');\\nvar nullthrows = require('fbjs/lib/nullthrows');\\n\\nvar clipboard = null;\\n\\n/**\\n * Some systems offer a \\\"secondary\\\" clipboard to allow quick internal cut\\n * and paste behavior. For instance, Ctrl+K (cut) and Ctrl+Y (paste).\\n */\\nvar SecondaryClipboard = {\\n  cut: function cut(editorState) {\\n    var content = editorState.getCurrentContent();\\n    var selection = editorState.getSelection();\\n    var targetRange = null;\\n\\n    if (selection.isCollapsed()) {\\n      var anchorKey = selection.getAnchorKey();\\n      var blockEnd = content.getBlockForKey(anchorKey).getLength();\\n\\n      if (blockEnd === selection.getAnchorOffset()) {\\n        return editorState;\\n      }\\n\\n      targetRange = selection.set('focusOffset', blockEnd);\\n    } else {\\n      targetRange = selection;\\n    }\\n\\n    targetRange = nullthrows(targetRange);\\n    clipboard = getContentStateFragment(content, targetRange);\\n\\n    var afterRemoval = DraftModifier.removeRange(content, targetRange, 'forward');\\n\\n    if (afterRemoval === content) {\\n      return editorState;\\n    }\\n\\n    return EditorState.push(editorState, afterRemoval, 'remove-range');\\n  },\\n\\n  paste: function paste(editorState) {\\n    if (!clipboard) {\\n      return editorState;\\n    }\\n\\n    var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), clipboard);\\n\\n    return EditorState.push(editorState, newContent, 'insert-fragment');\\n  }\\n};\\n\\nmodule.exports = SecondaryClipboard;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"DraftModifier\",\"EditorState\",\"getContentStateFragment\",\"nullthrows\",\"clipboard\",\"SecondaryClipboard\",\"cut\",\"editorState\",\"content\",\"getCurrentContent\",\"selection\",\"getSelection\",\"isCollapsed\",\"anchorKey\",\"getAnchorKey\",\"blockEnd\",\"getBlockForKey\",\"getLength\",\"getAnchorOffset\",\"targetRange\",\"set\",\"afterRemoval\",\"removeRange\",\"push\",\"paste\",\"newContent\",\"replaceWithFragment\"]\n}\n"]