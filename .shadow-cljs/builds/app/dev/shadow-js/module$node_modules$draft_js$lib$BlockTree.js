["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/BlockTree.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$BlockTree=function(global,process,require,module,exports,shadow$shims){function generateLeaves(characters,offset){var leaves=[];characters=characters.map(function(c){return c.getStyle()}).toList();findRangesImmutable(characters,areEqual,returnTrue,function(start,end){leaves.push(new LeafRange({start:start+offset,end:end+offset}))});return List(leaves)}function areEqual(a,b){return a===b}process=require(\"module$node_modules$immutable$dist$immutable\");\nglobal=require(\"module$node_modules$fbjs$lib$emptyFunction\");var findRangesImmutable=require(\"module$node_modules$draft_js$lib$findRangesImmutable\"),List=process.List,Repeat=process.Repeat;require=process.Record;var returnTrue=global.thatReturnsTrue,LeafRange=require({start:null,end:null}),DecoratorRange=require({start:null,end:null,decoratorKey:null,leaves:null});module.exports={generate:function(contentState,block,decorator){var textLength=block.getLength();if(!textLength)return List.of(new DecoratorRange({start:0,\nend:0,decoratorKey:null,leaves:List.of(new LeafRange({start:0,end:0}))}));var leafSets=[],decorations=decorator?decorator.getDecorations(block,contentState):List(Repeat(null,textLength)),chars=block.getCharacterList();findRangesImmutable(decorations,areEqual,returnTrue,function(start,end){leafSets.push(new DecoratorRange({start:start,end:end,decoratorKey:decorations.get(start),leaves:generateLeaves(chars.slice(start,end).toList(),start)}))});return List(leafSets)},getFingerprint:function(tree){return tree.map(function(leafSet){var decoratorKey=\nleafSet.get(\"decoratorKey\");return(null!==decoratorKey?decoratorKey+\".\"+(leafSet.get(\"end\")-leafSet.get(\"start\")):\"\")+\".\"+leafSet.get(\"leaves\").size}).join(\"-\")}}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$BlockTree\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BlockTree\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar findRangesImmutable = require('./findRangesImmutable');\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\n\n\nvar returnTrue = emptyFunction.thatReturnsTrue;\n\nvar FINGERPRINT_DELIMITER = '-';\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\n\nvar LeafRange = Record(defaultLeafRange);\n\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\n\nvar DecoratorRange = Record(defaultDecoratorRange);\n\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({ start: 0, end: 0 }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n\n    var chars = block.getCharacterList();\n\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n\n    return List(leafSets);\n  },\n\n  /**\n   * Create a string representation of the given tree map. This allows us\n   * to rapidly determine whether a tree has undergone a significant\n   * structural change.\n   */\n  getFingerprint: function getFingerprint(tree) {\n    return tree.map(function (leafSet) {\n      var decoratorKey = leafSet.get('decoratorKey');\n      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';\n      return '' + fingerprintString + '.' + leafSet.get('leaves').size;\n    }).join(FINGERPRINT_DELIMITER);\n  }\n};\n\n/**\n * Generate LeafRange records for a given character list.\n */\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$immutable$dist$immutable","~$module$node_modules$fbjs$lib$emptyFunction","~$module$node_modules$draft_js$lib$findRangesImmutable"]],"~:properties",["^5",["getFingerprint","leaves","generate","decoratorKey","start","end"]],"~:compiled-at",1532351402130,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$BlockTree.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/BlockTree.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$BlockTree\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule BlockTree\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar Immutable = require('immutable');\\n\\nvar emptyFunction = require('fbjs/lib/emptyFunction');\\nvar findRangesImmutable = require('./findRangesImmutable');\\n\\nvar List = Immutable.List,\\n    Repeat = Immutable.Repeat,\\n    Record = Immutable.Record;\\n\\n\\nvar returnTrue = emptyFunction.thatReturnsTrue;\\n\\nvar FINGERPRINT_DELIMITER = '-';\\n\\nvar defaultLeafRange = {\\n  start: null,\\n  end: null\\n};\\n\\nvar LeafRange = Record(defaultLeafRange);\\n\\nvar defaultDecoratorRange = {\\n  start: null,\\n  end: null,\\n  decoratorKey: null,\\n  leaves: null\\n};\\n\\nvar DecoratorRange = Record(defaultDecoratorRange);\\n\\nvar BlockTree = {\\n  /**\\n   * Generate a block tree for a given ContentBlock/decorator pair.\\n   */\\n  generate: function generate(contentState, block, decorator) {\\n    var textLength = block.getLength();\\n    if (!textLength) {\\n      return List.of(new DecoratorRange({\\n        start: 0,\\n        end: 0,\\n        decoratorKey: null,\\n        leaves: List.of(new LeafRange({ start: 0, end: 0 }))\\n      }));\\n    }\\n\\n    var leafSets = [];\\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\\n\\n    var chars = block.getCharacterList();\\n\\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\\n      leafSets.push(new DecoratorRange({\\n        start: start,\\n        end: end,\\n        decoratorKey: decorations.get(start),\\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\\n      }));\\n    });\\n\\n    return List(leafSets);\\n  },\\n\\n  /**\\n   * Create a string representation of the given tree map. This allows us\\n   * to rapidly determine whether a tree has undergone a significant\\n   * structural change.\\n   */\\n  getFingerprint: function getFingerprint(tree) {\\n    return tree.map(function (leafSet) {\\n      var decoratorKey = leafSet.get('decoratorKey');\\n      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';\\n      return '' + fingerprintString + '.' + leafSet.get('leaves').size;\\n    }).join(FINGERPRINT_DELIMITER);\\n  }\\n};\\n\\n/**\\n * Generate LeafRange records for a given character list.\\n */\\nfunction generateLeaves(characters, offset) {\\n  var leaves = [];\\n  var inlineStyles = characters.map(function (c) {\\n    return c.getStyle();\\n  }).toList();\\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\\n    leaves.push(new LeafRange({\\n      start: start + offset,\\n      end: end + offset\\n    }));\\n  });\\n  return List(leaves);\\n}\\n\\nfunction areEqual(a, b) {\\n  return a === b;\\n}\\n\\nmodule.exports = BlockTree;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"generateLeaves\",\"characters\",\"offset\",\"leaves\",\"inlineStyles\",\"map\",\"c\",\"getStyle\",\"toList\",\"findRangesImmutable\",\"areEqual\",\"returnTrue\",\"start\",\"end\",\"push\",\"LeafRange\",\"List\",\"a\",\"b\",\"Immutable\",\"emptyFunction\",\"Repeat\",\"Record\",\"thatReturnsTrue\",\"defaultLeafRange\",\"DecoratorRange\",\"defaultDecoratorRange\",\"decoratorKey\",\"BlockTree\",\"generate\",\"contentState\",\"block\",\"decorator\",\"textLength\",\"getLength\",\"of\",\"leafSets\",\"decorations\",\"getDecorations\",\"chars\",\"getCharacterList\",\"get\",\"slice\",\"getFingerprint\",\"tree\",\"leafSet\",\"fingerprintString\",\"size\",\"join\",\"FINGERPRINT_DELIMITER\"]\n}\n"]