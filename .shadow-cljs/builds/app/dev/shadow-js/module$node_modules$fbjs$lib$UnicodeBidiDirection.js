["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/UnicodeBidiDirection.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$UnicodeBidiDirection=function(global,process,require,module,exports,shadow$shims){function isStrong(dir){return\"LTR\"===dir||\"RTL\"===dir}function getHTMLDir(dir){isStrong(dir)?void 0:invariant(!1,\"`dir` must be a strong direction to be converted to HTML Direction\");return\"LTR\"===dir?\"ltr\":\"rtl\"}var invariant=require(\"module$node_modules$fbjs$lib$invariant\"),globalDir=null;module.exports={NEUTRAL:\"NEUTRAL\",LTR:\"LTR\",RTL:\"RTL\",isStrong:isStrong,getHTMLDir:getHTMLDir,\ngetHTMLDirIfDifferent:function(dir,otherDir){isStrong(dir)?void 0:invariant(!1,\"`dir` must be a strong direction to be converted to HTML Direction\");isStrong(otherDir)?void 0:invariant(!1,\"`otherDir` must be a strong direction to be converted to HTML Direction\");return dir===otherDir?null:getHTMLDir(dir)},setGlobalDir:function(dir){globalDir=dir},initGlobalDir:function(){globalDir=\"LTR\"},getGlobalDir:function(){globalDir||this.initGlobalDir();globalDir?void 0:invariant(!1,\"Global direction not set.\");\nreturn globalDir}}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$UnicodeBidiDirection\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/**\n * Constants to represent text directionality\n *\n * Also defines a *global* direciton, to be used in bidi algorithms as a\n * default fallback direciton, when no better direction is found or provided.\n *\n * NOTE: Use `setGlobalDir()`, or update `initGlobalDir()`, to set the initial\n *       global direction value based on the application.\n *\n * Part of the implementation of Unicode Bidirectional Algorithm (UBA)\n * Unicode Standard Annex #9 (UAX9)\n * http://www.unicode.org/reports/tr9/\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\nvar NEUTRAL = 'NEUTRAL'; // No strong direction\nvar LTR = 'LTR'; // Left-to-Right direction\nvar RTL = 'RTL'; // Right-to-Left direction\n\nvar globalDir = null;\n\n// == Helpers ==\n\n/**\n * Check if a directionality value is a Strong one\n */\nfunction isStrong(dir) {\n  return dir === LTR || dir === RTL;\n}\n\n/**\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\n * property.\n */\nfunction getHTMLDir(dir) {\n  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  return dir === LTR ? 'ltr' : 'rtl';\n}\n\n/**\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\n * property, but returns null if `dir` has same value as `otherDir`.\n * `null`.\n */\nfunction getHTMLDirIfDifferent(dir, otherDir) {\n  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  !isStrong(otherDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`otherDir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  return dir === otherDir ? null : getHTMLDir(dir);\n}\n\n// == Global Direction ==\n\n/**\n * Set the global direction.\n */\nfunction setGlobalDir(dir) {\n  globalDir = dir;\n}\n\n/**\n * Initialize the global direction\n */\nfunction initGlobalDir() {\n  setGlobalDir(LTR);\n}\n\n/**\n * Get the global direction\n */\nfunction getGlobalDir() {\n  if (!globalDir) {\n    this.initGlobalDir();\n  }\n  !globalDir ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Global direction not set.') : invariant(false) : void 0;\n  return globalDir;\n}\n\nvar UnicodeBidiDirection = {\n  // Values\n  NEUTRAL: NEUTRAL,\n  LTR: LTR,\n  RTL: RTL,\n  // Helpers\n  isStrong: isStrong,\n  getHTMLDir: getHTMLDir,\n  getHTMLDirIfDifferent: getHTMLDirIfDifferent,\n  // Global Direction\n  setGlobalDir: setGlobalDir,\n  initGlobalDir: initGlobalDir,\n  getGlobalDir: getGlobalDir\n};\n\nmodule.exports = UnicodeBidiDirection;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant"]],"~:properties",["^5",["getGlobalDir","getHTMLDir","RTL","NEUTRAL","isStrong","getHTMLDirIfDifferent","LTR","initGlobalDir","setGlobalDir"]],"~:compiled-at",1532351402131,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$UnicodeBidiDirection.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAwCnIC,QAASA,SAAQ,CAACC,GAAD,CAAM,CACrB,MAXQC,KAWR,GAAOD,GAAP,EAVQE,KAUR,GAAsBF,GADD,CAQvBG,QAASA,WAAU,CAACH,GAAD,CAAM,CACtBD,QAAA,CAASC,GAAT,CAAD,CAAqK,IAAK,EAA1K,CAAyDI,SAAA,CAAU,CAAA,CAAV,CAAiB,oEAAjB,CACzD,OApBQH,KAoBD,GAAAD,GAAA,CAAc,KAAd,CAAsB,KAFN,CArBzB,IAAII,UAAYT,OAAA,CAAQ,wCAAR,CAAhB,CAMIU,UAAY,IAyEhBT,OAAAC,QAAA,CAf2BS,CAEzBC,QAhEYA,SA8DaD,CAGzBL,IAhEQA,KA6DiBK,CAIzBJ,IAhEQA,KA4DiBI,CAMzBP,SAAUA,QANeO,CAOzBH,WAAYA,UAPaG;AAQzBE,sBAzCFA,QAA8B,CAACR,GAAD,CAAMS,QAAN,CAAgB,CAC3CV,QAAA,CAASC,GAAT,CAAD,CAAqK,IAAK,EAA1K,CAAyDI,SAAA,CAAU,CAAA,CAAV,CAAiB,oEAAjB,CACxDL,SAAA,CAASU,QAAT,CAAD,CAA+K,IAAK,EAApL,CAA8DL,SAAA,CAAU,CAAA,CAAV,CAAiB,yEAAjB,CAC9D,OAAOJ,IAAA,GAAQS,QAAR,CAAmB,IAAnB,CAA0BN,UAAA,CAAWH,GAAX,CAHW,CAiCnBM,CAUzBI,aAhCFA,QAAqB,CAACV,GAAD,CAAM,CACzBK,SAAA,CAAYL,GADa,CAsBAM,CAWzBK,cA1BFA,QAAsB,EAAG,CANvBN,SAAA,CAxCQJ,KA8Ce,CAeEK,CAYzBM,aApBFA,QAAqB,EAAG,CACjBP,SAAL,EACE,IAAAM,cAAA,EAEDN,UAAD,CAAwH,IAAK,EAA7H,CAAqDD,SAAA,CAAU,CAAA,CAAV,CAAiB,2BAAjB,CACrD;MAAOC,UALe,CAQGC,CA3FwG;\",\n\"sources\":[\"node_modules/fbjs/lib/UnicodeBidiDirection.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$UnicodeBidiDirection\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n * @typechecks\\n * \\n */\\n\\n/**\\n * Constants to represent text directionality\\n *\\n * Also defines a *global* direciton, to be used in bidi algorithms as a\\n * default fallback direciton, when no better direction is found or provided.\\n *\\n * NOTE: Use `setGlobalDir()`, or update `initGlobalDir()`, to set the initial\\n *       global direction value based on the application.\\n *\\n * Part of the implementation of Unicode Bidirectional Algorithm (UBA)\\n * Unicode Standard Annex #9 (UAX9)\\n * http://www.unicode.org/reports/tr9/\\n */\\n\\n'use strict';\\n\\nvar invariant = require('./invariant');\\n\\nvar NEUTRAL = 'NEUTRAL'; // No strong direction\\nvar LTR = 'LTR'; // Left-to-Right direction\\nvar RTL = 'RTL'; // Right-to-Left direction\\n\\nvar globalDir = null;\\n\\n// == Helpers ==\\n\\n/**\\n * Check if a directionality value is a Strong one\\n */\\nfunction isStrong(dir) {\\n  return dir === LTR || dir === RTL;\\n}\\n\\n/**\\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\\n * property.\\n */\\nfunction getHTMLDir(dir) {\\n  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\\n  return dir === LTR ? 'ltr' : 'rtl';\\n}\\n\\n/**\\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\\n * property, but returns null if `dir` has same value as `otherDir`.\\n * `null`.\\n */\\nfunction getHTMLDirIfDifferent(dir, otherDir) {\\n  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\\n  !isStrong(otherDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`otherDir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\\n  return dir === otherDir ? null : getHTMLDir(dir);\\n}\\n\\n// == Global Direction ==\\n\\n/**\\n * Set the global direction.\\n */\\nfunction setGlobalDir(dir) {\\n  globalDir = dir;\\n}\\n\\n/**\\n * Initialize the global direction\\n */\\nfunction initGlobalDir() {\\n  setGlobalDir(LTR);\\n}\\n\\n/**\\n * Get the global direction\\n */\\nfunction getGlobalDir() {\\n  if (!globalDir) {\\n    this.initGlobalDir();\\n  }\\n  !globalDir ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Global direction not set.') : invariant(false) : void 0;\\n  return globalDir;\\n}\\n\\nvar UnicodeBidiDirection = {\\n  // Values\\n  NEUTRAL: NEUTRAL,\\n  LTR: LTR,\\n  RTL: RTL,\\n  // Helpers\\n  isStrong: isStrong,\\n  getHTMLDir: getHTMLDir,\\n  getHTMLDirIfDifferent: getHTMLDirIfDifferent,\\n  // Global Direction\\n  setGlobalDir: setGlobalDir,\\n  initGlobalDir: initGlobalDir,\\n  getGlobalDir: getGlobalDir\\n};\\n\\nmodule.exports = UnicodeBidiDirection;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"isStrong\",\"dir\",\"LTR\",\"RTL\",\"getHTMLDir\",\"invariant\",\"globalDir\",\"UnicodeBidiDirection\",\"NEUTRAL\",\"getHTMLDirIfDifferent\",\"otherDir\",\"setGlobalDir\",\"initGlobalDir\",\"getGlobalDir\"]\n}\n"]