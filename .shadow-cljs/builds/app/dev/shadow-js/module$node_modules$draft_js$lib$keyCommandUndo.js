["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/keyCommandUndo.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$keyCommandUndo=function(global,process,require,module,exports,shadow$shims){var EditorState=require(\"module$node_modules$draft_js$lib$EditorState\");module.exports=function(e,editorState,updateFn){var undoneState=EditorState.undo(editorState);\"spellcheck-change\"===editorState.getLastChangeType()?(e=undoneState.getCurrentContent(),updateFn(EditorState.set(undoneState,{nativelyRenderedContent:e}))):(e.preventDefault(),editorState.getNativelyRenderedContent()?\n(updateFn(EditorState.set(editorState,{nativelyRenderedContent:null})),setTimeout(function(){updateFn(undoneState)},0)):updateFn(undoneState))}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$keyCommandUndo\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandUndo\n * @format\n * \n */\n\n'use strict';\n\nvar EditorState = require('./EditorState');\n\nfunction keyCommandUndo(e, editorState, updateFn) {\n  var undoneState = EditorState.undo(editorState);\n\n  // If the last change to occur was a spellcheck change, allow the undo\n  // event to fall through to the browser. This allows the browser to record\n  // the unwanted change, which should soon lead it to learn not to suggest\n  // the correction again.\n  if (editorState.getLastChangeType() === 'spellcheck-change') {\n    var nativelyRenderedContent = undoneState.getCurrentContent();\n    updateFn(EditorState.set(undoneState, { nativelyRenderedContent: nativelyRenderedContent }));\n    return;\n  }\n\n  // Otheriwse, manage the undo behavior manually.\n  e.preventDefault();\n  if (!editorState.getNativelyRenderedContent()) {\n    updateFn(undoneState);\n    return;\n  }\n\n  // Trigger a re-render with the current content state to ensure that the\n  // component tree has up-to-date props for comparison.\n  updateFn(EditorState.set(editorState, { nativelyRenderedContent: null }));\n\n  // Wait to ensure that the re-render has occurred before performing\n  // the undo action.\n  setTimeout(function () {\n    updateFn(undoneState);\n  }, 0);\n}\n\nmodule.exports = keyCommandUndo;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$draft_js$lib$EditorState"]],"~:properties",["^5",["nativelyRenderedContent"]],"~:compiled-at",1532351402147,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$keyCommandUndo.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,gDAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBjI,IAAIC,YAAcJ,OAAA,CAAQ,8CAAR,CAiClBC,OAAAC,QAAA,CA/BAG,QAAuB,CAACC,CAAD,CAAIC,WAAJ,CAAiBC,QAAjB,CAA2B,CAChD,IAAIC,YAAcL,WAAAM,KAAA,CAAiBH,WAAjB,CAMsB,oBAAxC,GAAIA,WAAAI,kBAAA,EAAJ,EACMC,CACJ,CAD8BH,WAAAI,kBAAA,EAC9B,CAAAL,QAAA,CAASJ,WAAAU,IAAA,CAAgBL,WAAhB,CAA6B,CAAEG,wBAAyBA,CAA3B,CAA7B,CAAT,CAFF,GAOAN,CAAAS,eAAA,EACA,CAAKR,WAAAS,2BAAA,EAAL;CAOAR,QAAA,CAASJ,WAAAU,IAAA,CAAgBP,WAAhB,CAA6B,CAAEK,wBAAyB,IAA3B,CAA7B,CAAT,CAIA,CAAAK,UAAA,CAAW,QAAS,EAAG,CACrBT,QAAA,CAASC,WAAT,CADqB,CAAvB,CAEG,CAFH,CAXA,EACED,QAAA,CAASC,WAAT,CATF,CAPgD,CAlB+E;\",\n\"sources\":[\"node_modules/draft-js/lib/keyCommandUndo.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$keyCommandUndo\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule keyCommandUndo\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar EditorState = require('./EditorState');\\n\\nfunction keyCommandUndo(e, editorState, updateFn) {\\n  var undoneState = EditorState.undo(editorState);\\n\\n  // If the last change to occur was a spellcheck change, allow the undo\\n  // event to fall through to the browser. This allows the browser to record\\n  // the unwanted change, which should soon lead it to learn not to suggest\\n  // the correction again.\\n  if (editorState.getLastChangeType() === 'spellcheck-change') {\\n    var nativelyRenderedContent = undoneState.getCurrentContent();\\n    updateFn(EditorState.set(undoneState, { nativelyRenderedContent: nativelyRenderedContent }));\\n    return;\\n  }\\n\\n  // Otheriwse, manage the undo behavior manually.\\n  e.preventDefault();\\n  if (!editorState.getNativelyRenderedContent()) {\\n    updateFn(undoneState);\\n    return;\\n  }\\n\\n  // Trigger a re-render with the current content state to ensure that the\\n  // component tree has up-to-date props for comparison.\\n  updateFn(EditorState.set(editorState, { nativelyRenderedContent: null }));\\n\\n  // Wait to ensure that the re-render has occurred before performing\\n  // the undo action.\\n  setTimeout(function () {\\n    updateFn(undoneState);\\n  }, 0);\\n}\\n\\nmodule.exports = keyCommandUndo;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"EditorState\",\"keyCommandUndo\",\"e\",\"editorState\",\"updateFn\",\"undoneState\",\"undo\",\"getLastChangeType\",\"nativelyRenderedContent\",\"getCurrentContent\",\"set\",\"preventDefault\",\"getNativelyRenderedContent\",\"setTimeout\"]\n}\n"]