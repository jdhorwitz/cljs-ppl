["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_mapCacheDelete.js"],"~:js","shadow$provide.module$node_modules$lodash$_mapCacheDelete=function(global,process,require,module,exports,shadow$shims){var getMapData=require(\"module$node_modules$lodash$_getMapData\");module.exports=function(key){key=getMapData(this,key)[\"delete\"](key);this.size-=key?1:0;return key}}","~:source","shadow$provide[\"module$node_modules$lodash$_mapCacheDelete\"] = function(global,process,require,module,exports,shadow$shims) {\nvar getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_getMapData","~$shadow.js"]],"~:properties",["^5",["size"]],"~:compiled-at",1532351402008,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_mapCacheDelete.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAC5H,IAAIC,WAAaJ,OAAA,CAAQ,wCAAR,CAiBjBC,OAAAC,QAAA,CANAG,QAAuB,CAACC,GAAD,CAAM,CACvBC,GAAAA,CAASH,UAAA,CAAW,IAAX,CAAiBE,GAAjB,CAAA,CAAsB,QAAtB,CAAA,CAAgCA,GAAhC,CACb,KAAAE,KAAA,EAAaD,GAAA,CAAS,CAAT,CAAa,CAC1B,OAAOA,IAHoB,CAZ+F;\",\n\"sources\":[\"node_modules/lodash/_mapCacheDelete.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_mapCacheDelete\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar getMapData = require('./_getMapData');\\n\\n/**\\n * Removes `key` and its value from the map.\\n *\\n * @private\\n * @name delete\\n * @memberOf MapCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction mapCacheDelete(key) {\\n  var result = getMapData(this, key)['delete'](key);\\n  this.size -= result ? 1 : 0;\\n  return result;\\n}\\n\\nmodule.exports = mapCacheDelete;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getMapData\",\"mapCacheDelete\",\"key\",\"result\",\"size\"]\n}\n"]