["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/DraftPasteProcessor.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$DraftPasteProcessor=function(global,process,require,module,exports,shadow$shims){var _extends=require(\"module$node_modules$object_assign$index\")||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i],key;for(key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};require(\"module$node_modules$draft_js$lib$CharacterMetadata\");global=require(\"module$node_modules$draft_js$lib$ContentBlock\");\nprocess=require(\"module$node_modules$draft_js$lib$ContentBlockNode\");exports=require(\"module$node_modules$draft_js$lib$DraftFeatureFlags\");shadow$shims=require(\"module$node_modules$immutable$dist$immutable\");var convertFromHTMLtoContentBlocks=require(\"module$node_modules$draft_js$lib$convertFromHTMLToContentBlocks\"),generateRandomKey=require(\"module$node_modules$draft_js$lib$generateRandomKey\"),getSafeBodyFromHTML=require(\"module$node_modules$draft_js$lib$getSafeBodyFromHTML\"),sanitizeDraftText=require(\"module$node_modules$draft_js$lib$sanitizeDraftText\"),\nList=shadow$shims.List,Repeat=shadow$shims.Repeat,experimentalTreeDataSupport=exports.draft_tree_data_support,ContentBlockRecord=experimentalTreeDataSupport?process:global;module.exports={processHTML:function(html,blockRenderMap){return convertFromHTMLtoContentBlocks(html,getSafeBodyFromHTML,blockRenderMap)},processText:function(textBlocks,character,type){return textBlocks.reduce(function(acc,textLine,index){textLine=sanitizeDraftText(textLine);var key=generateRandomKey();textLine={key:key,type:type,\ntext:textLine,characterList:List(Repeat(character,textLine.length))};experimentalTreeDataSupport&&0!==index&&(--index,key=acc[index]=acc[index].merge({nextSibling:key}),textLine=_extends({},textLine,{prevSibling:key.getKey()}));acc.push(new ContentBlockRecord(textLine));return acc},[])}}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$DraftPasteProcessor\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftPasteProcessor\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar Immutable = require('immutable');\n\nvar convertFromHTMLtoContentBlocks = require('./convertFromHTMLToContentBlocks');\nvar generateRandomKey = require('./generateRandomKey');\nvar getSafeBodyFromHTML = require('./getSafeBodyFromHTML');\nvar sanitizeDraftText = require('./sanitizeDraftText');\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat;\n\n\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\n\nvar DraftPasteProcessor = {\n  processHTML: function processHTML(html, blockRenderMap) {\n    return convertFromHTMLtoContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);\n  },\n  processText: function processText(textBlocks, character, type) {\n    return textBlocks.reduce(function (acc, textLine, index) {\n      textLine = sanitizeDraftText(textLine);\n      var key = generateRandomKey();\n\n      var blockNodeConfig = {\n        key: key,\n        type: type,\n        text: textLine,\n        characterList: List(Repeat(character, textLine.length))\n      };\n\n      // next block updates previous block\n      if (experimentalTreeDataSupport && index !== 0) {\n        var prevSiblingIndex = index - 1;\n        // update previous block\n        var previousBlock = acc[prevSiblingIndex] = acc[prevSiblingIndex].merge({\n          nextSibling: key\n        });\n        blockNodeConfig = _extends({}, blockNodeConfig, {\n          prevSibling: previousBlock.getKey()\n        });\n      }\n\n      acc.push(new ContentBlockRecord(blockNodeConfig));\n\n      return acc;\n    }, []);\n  }\n};\n\nmodule.exports = DraftPasteProcessor;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$object_assign$index","~$module$node_modules$draft_js$lib$ContentBlock","~$module$node_modules$draft_js$lib$convertFromHTMLToContentBlocks","~$shadow.js","~$module$node_modules$draft_js$lib$DraftFeatureFlags","~$module$node_modules$draft_js$lib$ContentBlockNode","~$module$node_modules$immutable$dist$immutable","~$module$node_modules$draft_js$lib$CharacterMetadata","~$module$node_modules$draft_js$lib$sanitizeDraftText","~$module$node_modules$draft_js$lib$generateRandomKey","~$module$node_modules$draft_js$lib$getSafeBodyFromHTML"]],"~:properties",["^5",["processHTML","key","nextSibling","text","characterList","type","processText","prevSibling"]],"~:compiled-at",1532351402150,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$DraftPasteProcessor.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,qDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAkBtI,IAAIC,SAFUJ,OAAAK,CAAQ,yCAARA,CAEVD,EAAsB,QAAS,CAACE,MAAD,CAAS,CAAE,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,SAAAC,OAApB,CAAsCF,CAAA,EAAtC,CAA2C,CAAE,IAAIG,OAASF,SAAA,CAAUD,CAAV,CAAb,CAAoCI,GAAT,KAASA,GAAT,GAAgBD,OAAhB,CAA8BE,MAAAC,UAAAC,eAAAC,KAAA,CAAqCL,MAArC,CAA6CC,GAA7C,CAAJ,GAAyDL,MAAA,CAAOK,GAAP,CAAzD,CAAuED,MAAA,CAAOC,GAAP,CAAvE,CAAvD,CAAiJ,MAAOL,OAArM,CAEpBN,QAAA,CAAQ,oDAAR,CACpBgB,OAAAA,CAAehB,OAAA,CAAQ,+CAAR,CACfiB;OAAAA,CAAmBjB,OAAA,CAAQ,mDAAR,CACnBkB,QAAAA,CAAoBlB,OAAA,CAAQ,oDAAR,CACpBmB,aAAAA,CAAYnB,OAAA,CAAQ,8CAAR,CAEhB,KAAIoB,+BAAiCpB,OAAA,CAAQ,iEAAR,CAArC,CACIqB,kBAAoBrB,OAAA,CAAQ,oDAAR,CADxB,CAEIsB,oBAAsBtB,OAAA,CAAQ,sDAAR,CAF1B,CAGIuB,kBAAoBvB,OAAA,CAAQ,oDAAR,CAHxB;AAKIwB,KAAOL,YAAAK,KALX,CAMIC,OAASN,YAAAM,OANb,CASIC,4BAA8BR,OAAAS,wBATlC,CAUIC,mBAAqBF,2BAAA,CAA8BT,OAA9B,CAAiDD,MAqC1Ef,OAAAC,QAAA,CAnC0B2B,CACxBC,YAAaA,QAAoB,CAACC,IAAD,CAAOC,cAAP,CAAuB,CACtD,MAAOZ,+BAAA,CAA+BW,IAA/B,CAAqCT,mBAArC,CAA0DU,cAA1D,CAD+C,CADhCH,CAIxBI,YAAaA,QAAoB,CAACC,UAAD,CAAaC,SAAb,CAAwBC,IAAxB,CAA8B,CAC7D,MAAOF,WAAAG,OAAA,CAAkB,QAAS,CAACC,GAAD,CAAMC,QAAN,CAAgBC,KAAhB,CAAuB,CACvDD,QAAA,CAAWhB,iBAAA,CAAkBgB,QAAlB,CACX,KAAI5B,IAAMU,iBAAA,EAENoB,SAAAA,CAAkB,CACpB9B,IAAKA,GADe,CAEpByB,KAAMA,IAFc;AAGpBM,KAAMH,QAHc,CAIpBI,cAAenB,IAAA,CAAKC,MAAA,CAAOU,SAAP,CAAkBI,QAAA9B,OAAlB,CAAL,CAJK,CAQlBiB,4BAAJ,EAA6C,CAA7C,GAAmCc,KAAnC,GACyBI,EAAAJ,KAKvB,CAHIK,GAGJ,CAHoBP,GAAA,CAAIM,KAAJ,CAGpB,CAH4CN,GAAA,CAAIM,KAAJ,CAAAE,MAAA,CAA4B,CACtEC,YAAapC,GADyD,CAA5B,CAG5C,CAAA8B,QAAA,CAAkBrC,QAAA,CAAS,EAAT,CAAaqC,QAAb,CAA8B,CAC9CO,YAAaH,GAAAI,OAAA,EADiC,CAA9B,CANpB,CAWAX,IAAAY,KAAA,CAAS,IAAItB,kBAAJ,CAAuBa,QAAvB,CAAT,CAEA,OAAOH,IAzBgD,CAAlD,CA0BJ,EA1BI,CADsD,CAJvCT,CAtC4G;\",\n\"sources\":[\"node_modules/draft-js/lib/DraftPasteProcessor.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$DraftPasteProcessor\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule DraftPasteProcessor\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar _assign = require('object-assign');\\n\\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\\n\\nvar CharacterMetadata = require('./CharacterMetadata');\\nvar ContentBlock = require('./ContentBlock');\\nvar ContentBlockNode = require('./ContentBlockNode');\\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\\nvar Immutable = require('immutable');\\n\\nvar convertFromHTMLtoContentBlocks = require('./convertFromHTMLToContentBlocks');\\nvar generateRandomKey = require('./generateRandomKey');\\nvar getSafeBodyFromHTML = require('./getSafeBodyFromHTML');\\nvar sanitizeDraftText = require('./sanitizeDraftText');\\n\\nvar List = Immutable.List,\\n    Repeat = Immutable.Repeat;\\n\\n\\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\\n\\nvar DraftPasteProcessor = {\\n  processHTML: function processHTML(html, blockRenderMap) {\\n    return convertFromHTMLtoContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);\\n  },\\n  processText: function processText(textBlocks, character, type) {\\n    return textBlocks.reduce(function (acc, textLine, index) {\\n      textLine = sanitizeDraftText(textLine);\\n      var key = generateRandomKey();\\n\\n      var blockNodeConfig = {\\n        key: key,\\n        type: type,\\n        text: textLine,\\n        characterList: List(Repeat(character, textLine.length))\\n      };\\n\\n      // next block updates previous block\\n      if (experimentalTreeDataSupport && index !== 0) {\\n        var prevSiblingIndex = index - 1;\\n        // update previous block\\n        var previousBlock = acc[prevSiblingIndex] = acc[prevSiblingIndex].merge({\\n          nextSibling: key\\n        });\\n        blockNodeConfig = _extends({}, blockNodeConfig, {\\n          prevSibling: previousBlock.getKey()\\n        });\\n      }\\n\\n      acc.push(new ContentBlockRecord(blockNodeConfig));\\n\\n      return acc;\\n    }, []);\\n  }\\n};\\n\\nmodule.exports = DraftPasteProcessor;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_extends\",\"_assign\",\"target\",\"i\",\"arguments\",\"length\",\"source\",\"key\",\"Object\",\"prototype\",\"hasOwnProperty\",\"call\",\"ContentBlock\",\"ContentBlockNode\",\"DraftFeatureFlags\",\"Immutable\",\"convertFromHTMLtoContentBlocks\",\"generateRandomKey\",\"getSafeBodyFromHTML\",\"sanitizeDraftText\",\"List\",\"Repeat\",\"experimentalTreeDataSupport\",\"draft_tree_data_support\",\"ContentBlockRecord\",\"DraftPasteProcessor\",\"processHTML\",\"html\",\"blockRenderMap\",\"processText\",\"textBlocks\",\"character\",\"type\",\"reduce\",\"acc\",\"textLine\",\"index\",\"blockNodeConfig\",\"text\",\"characterList\",\"prevSiblingIndex\",\"previousBlock\",\"merge\",\"nextSibling\",\"prevSibling\",\"getKey\",\"push\"]\n}\n"]