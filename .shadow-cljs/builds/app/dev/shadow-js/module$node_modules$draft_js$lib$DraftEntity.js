["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/DraftEntity.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$DraftEntity=function(global,process,require,module,exports,shadow$shims){function logWarning(oldMethodCall,newMethodCall){console.warn(\"WARNING: \"+oldMethodCall+' will be deprecated soon!\\nPlease use \"'+newMethodCall+'\" instead.')}var _extends=require(\"module$node_modules$object_assign$index\")||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i],key;for(key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=\nsource[key])}return target},DraftEntityInstance=require(\"module$node_modules$draft_js$lib$DraftEntityInstance\");global=require(\"module$node_modules$immutable$dist$immutable\");var invariant=require(\"module$node_modules$fbjs$lib$invariant\");require=global.Map;var instances=require(),instanceKey=0,DraftEntity={getLastCreatedEntityKey:function(){logWarning(\"DraftEntity.getLastCreatedEntityKey\",\"contentState.getLastCreatedEntityKey\");return DraftEntity.__getLastCreatedEntityKey()},create:function(type,\nmutability,data){logWarning(\"DraftEntity.create\",\"contentState.createEntity\");return DraftEntity.__create(type,mutability,data)},add:function(instance){logWarning(\"DraftEntity.add\",\"contentState.addEntity\");return DraftEntity.__add(instance)},get:function(key){logWarning(\"DraftEntity.get\",\"contentState.getEntity\");return DraftEntity.__get(key)},mergeData:function(key,toMerge){logWarning(\"DraftEntity.mergeData\",\"contentState.mergeEntityData\");return DraftEntity.__mergeData(key,toMerge)},replaceData:function(key,\nnewData){logWarning(\"DraftEntity.replaceData\",\"contentState.replaceEntityData\");return DraftEntity.__replaceData(key,newData)},__getLastCreatedEntityKey:function(){return\"\"+instanceKey},__create:function(type,mutability,data){return DraftEntity.__add(new DraftEntityInstance({type:type,mutability:mutability,data:data||{}}))},__add:function(instance){var key=\"\"+ ++instanceKey;instances=instances.set(key,instance);return key},__get:function(key){var instance=instances.get(key);instance?void 0:invariant(!1,\n\"Unknown DraftEntity key: %s.\",key);return instance},__mergeData:function(key,toMerge){var instance=DraftEntity.__get(key);toMerge=_extends({},instance.getData(),toMerge);instance=instance.set(\"data\",toMerge);instances=instances.set(key,instance);return instance},__replaceData:function(key,newData){newData=DraftEntity.__get(key).set(\"data\",newData);instances=instances.set(key,newData);return newData}};module.exports=DraftEntity}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$DraftEntity\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEntity\n * @format\n * \n */\n\nvar DraftEntityInstance = require('./DraftEntityInstance');\nvar Immutable = require('immutable');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar Map = Immutable.Map;\n\n\nvar instances = Map();\nvar instanceKey = 0;\n\n/**\n * Temporary utility for generating the warnings\n */\nfunction logWarning(oldMethodCall, newMethodCall) {\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\nvar DraftEntity = {\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\n   * ---\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');\n    return DraftEntity.__getLastCreatedEntityKey();\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.createEntity' instead.\n   * ---\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  create: function create(type, mutability, data) {\n    logWarning('DraftEntity.create', 'contentState.createEntity');\n    return DraftEntity.__create(type, mutability, data);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.addEntity' instead.\n   * ---\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  add: function add(instance) {\n    logWarning('DraftEntity.add', 'contentState.addEntity');\n    return DraftEntity.__add(instance);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getEntity' instead.\n   * ---\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  get: function get(key) {\n    logWarning('DraftEntity.get', 'contentState.getEntity');\n    return DraftEntity.__get(key);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.mergeEntityData' instead.\n   * ---\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  mergeData: function mergeData(key, toMerge) {\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\n    return DraftEntity.__mergeData(key, toMerge);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.replaceEntityData' instead.\n   * ---\n   * Completely replace the data for a given instance.\n   */\n  replaceData: function replaceData(key, newData) {\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\n    return DraftEntity.__replaceData(key, newData);\n  },\n\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return '' + instanceKey;\n  },\n\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({ type: type, mutability: mutability, data: data || {} }));\n  },\n\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  __add: function __add(instance) {\n    var key = '' + ++instanceKey;\n    instances = instances.set(key, instance);\n    return key;\n  },\n\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n    var newData = _extends({}, instance.getData(), toMerge);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\n   * Completely replace the data for a given instance.\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\n\nmodule.exports = DraftEntity;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$object_assign$index","~$module$node_modules$draft_js$lib$DraftEntityInstance","~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$immutable$dist$immutable"]],"~:properties",["^5",["getLastCreatedEntityKey","__create","replaceData","__get","__getLastCreatedEntityKey","mergeData","__add","type","create","add","__replaceData","__mergeData","mutability","data","get"]],"~:compiled-at",1532351402130,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$DraftEntity.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/DraftEntity.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$DraftEntity\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nvar _assign = require('object-assign');\\n\\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\\n\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule DraftEntity\\n * @format\\n * \\n */\\n\\nvar DraftEntityInstance = require('./DraftEntityInstance');\\nvar Immutable = require('immutable');\\n\\nvar invariant = require('fbjs/lib/invariant');\\n\\nvar Map = Immutable.Map;\\n\\n\\nvar instances = Map();\\nvar instanceKey = 0;\\n\\n/**\\n * Temporary utility for generating the warnings\\n */\\nfunction logWarning(oldMethodCall, newMethodCall) {\\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\\\\nPlease use \\\"' + newMethodCall + '\\\" instead.');\\n}\\n\\n/**\\n * A \\\"document entity\\\" is an object containing metadata associated with a\\n * piece of text in a ContentBlock.\\n *\\n * For example, a `link` entity might include a `uri` property. When a\\n * ContentBlock is rendered in the browser, text that refers to that link\\n * entity may be rendered as an anchor, with the `uri` as the href value.\\n *\\n * In a ContentBlock, every position in the text may correspond to zero\\n * or one entities. This correspondence is tracked using a key string,\\n * generated via DraftEntity.create() and used to obtain entity metadata\\n * via DraftEntity.get().\\n */\\nvar DraftEntity = {\\n  /**\\n   * WARNING: This method will be deprecated soon!\\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\\n   * ---\\n   * Get the random key string from whatever entity was last created.\\n   * We need this to support the new API, as part of transitioning to put Entity\\n   * storage in contentState.\\n   */\\n  getLastCreatedEntityKey: function getLastCreatedEntityKey() {\\n    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');\\n    return DraftEntity.__getLastCreatedEntityKey();\\n  },\\n\\n  /**\\n   * WARNING: This method will be deprecated soon!\\n   * Please use 'contentState.createEntity' instead.\\n   * ---\\n   * Create a DraftEntityInstance and store it for later retrieval.\\n   *\\n   * A random key string will be generated and returned. This key may\\n   * be used to track the entity's usage in a ContentBlock, and for\\n   * retrieving data about the entity at render time.\\n   */\\n  create: function create(type, mutability, data) {\\n    logWarning('DraftEntity.create', 'contentState.createEntity');\\n    return DraftEntity.__create(type, mutability, data);\\n  },\\n\\n  /**\\n   * WARNING: This method will be deprecated soon!\\n   * Please use 'contentState.addEntity' instead.\\n   * ---\\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\\n   * useful when restoring instances from the server.\\n   */\\n  add: function add(instance) {\\n    logWarning('DraftEntity.add', 'contentState.addEntity');\\n    return DraftEntity.__add(instance);\\n  },\\n\\n  /**\\n   * WARNING: This method will be deprecated soon!\\n   * Please use 'contentState.getEntity' instead.\\n   * ---\\n   * Retrieve the entity corresponding to the supplied key string.\\n   */\\n  get: function get(key) {\\n    logWarning('DraftEntity.get', 'contentState.getEntity');\\n    return DraftEntity.__get(key);\\n  },\\n\\n  /**\\n   * WARNING: This method will be deprecated soon!\\n   * Please use 'contentState.mergeEntityData' instead.\\n   * ---\\n   * Entity instances are immutable. If you need to update the data for an\\n   * instance, this method will merge your data updates and return a new\\n   * instance.\\n   */\\n  mergeData: function mergeData(key, toMerge) {\\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\\n    return DraftEntity.__mergeData(key, toMerge);\\n  },\\n\\n  /**\\n   * WARNING: This method will be deprecated soon!\\n   * Please use 'contentState.replaceEntityData' instead.\\n   * ---\\n   * Completely replace the data for a given instance.\\n   */\\n  replaceData: function replaceData(key, newData) {\\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\\n    return DraftEntity.__replaceData(key, newData);\\n  },\\n\\n  // ***********************************WARNING******************************\\n  // --- the above public API will be deprecated in the next version of Draft!\\n  // The methods below this line are private - don't call them directly.\\n\\n  /**\\n   * Get the random key string from whatever entity was last created.\\n   * We need this to support the new API, as part of transitioning to put Entity\\n   * storage in contentState.\\n   */\\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\\n    return '' + instanceKey;\\n  },\\n\\n  /**\\n   * Create a DraftEntityInstance and store it for later retrieval.\\n   *\\n   * A random key string will be generated and returned. This key may\\n   * be used to track the entity's usage in a ContentBlock, and for\\n   * retrieving data about the entity at render time.\\n   */\\n  __create: function __create(type, mutability, data) {\\n    return DraftEntity.__add(new DraftEntityInstance({ type: type, mutability: mutability, data: data || {} }));\\n  },\\n\\n  /**\\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\\n   * useful when restoring instances from the server.\\n   */\\n  __add: function __add(instance) {\\n    var key = '' + ++instanceKey;\\n    instances = instances.set(key, instance);\\n    return key;\\n  },\\n\\n  /**\\n   * Retrieve the entity corresponding to the supplied key string.\\n   */\\n  __get: function __get(key) {\\n    var instance = instances.get(key);\\n    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\\n    return instance;\\n  },\\n\\n  /**\\n   * Entity instances are immutable. If you need to update the data for an\\n   * instance, this method will merge your data updates and return a new\\n   * instance.\\n   */\\n  __mergeData: function __mergeData(key, toMerge) {\\n    var instance = DraftEntity.__get(key);\\n    var newData = _extends({}, instance.getData(), toMerge);\\n    var newInstance = instance.set('data', newData);\\n    instances = instances.set(key, newInstance);\\n    return newInstance;\\n  },\\n\\n  /**\\n   * Completely replace the data for a given instance.\\n   */\\n  __replaceData: function __replaceData(key, newData) {\\n    var instance = DraftEntity.__get(key);\\n    var newInstance = instance.set('data', newData);\\n    instances = instances.set(key, newInstance);\\n    return newInstance;\\n  }\\n};\\n\\nmodule.exports = DraftEntity;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"logWarning\",\"oldMethodCall\",\"newMethodCall\",\"console\",\"warn\",\"_extends\",\"_assign\",\"target\",\"i\",\"arguments\",\"length\",\"source\",\"key\",\"Object\",\"prototype\",\"hasOwnProperty\",\"call\",\"DraftEntityInstance\",\"Immutable\",\"invariant\",\"Map\",\"instances\",\"instanceKey\",\"DraftEntity\",\"getLastCreatedEntityKey\",\"__getLastCreatedEntityKey\",\"create\",\"type\",\"mutability\",\"data\",\"__create\",\"add\",\"instance\",\"__add\",\"get\",\"__get\",\"mergeData\",\"toMerge\",\"__mergeData\",\"replaceData\",\"newData\",\"__replaceData\",\"set\",\"getData\",\"newInstance\"]\n}\n"]