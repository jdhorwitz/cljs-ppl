["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/modifyBlockForContentState.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$modifyBlockForContentState=function(global,process,require,module,exports,shadow$shims){var Map=require(\"module$node_modules$immutable$dist$immutable\").Map;module.exports=function(contentState,selectionState,operation){var startKey=selectionState.getStartKey(),endKey=selectionState.getEndKey(),blockMap=contentState.getBlockMap();operation=blockMap.toSeq().skipUntil(function(_,k){return k===startKey}).takeUntil(function(_,k){return k===endKey}).concat(Map([[endKey,\nblockMap.get(endKey)]])).map(operation);return contentState.merge({blockMap:blockMap.merge(operation),selectionBefore:selectionState,selectionAfter:selectionState})}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$modifyBlockForContentState\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule modifyBlockForContentState\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar Map = Immutable.Map;\n\n\nfunction modifyBlockForContentState(contentState, selectionState, operation) {\n  var startKey = selectionState.getStartKey();\n  var endKey = selectionState.getEndKey();\n  var blockMap = contentState.getBlockMap();\n  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).concat(Map([[endKey, blockMap.get(endKey)]])).map(operation);\n\n  return contentState.merge({\n    blockMap: blockMap.merge(newBlocks),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n}\n\nmodule.exports = modifyBlockForContentState;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$immutable$dist$immutable"]],"~:properties",["^5",["selectionBefore","selectionAfter","blockMap"]],"~:compiled-at",1532351402128,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$modifyBlockForContentState.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAkB7I,IAAIC,IAFYJ,OAAAK,CAAQ,8CAARA,CAEND,IAoBVH,OAAAC,QAAA,CAjBAI,QAAmC,CAACC,YAAD,CAAeC,cAAf,CAA+BC,SAA/B,CAA0C,CAC3E,IAAIC,SAAWF,cAAAG,YAAA,EAAf,CACIC,OAASJ,cAAAK,UAAA,EADb,CAEIC,SAAWP,YAAAQ,YAAA,EACXC,UAAAA,CAAYF,QAAAG,MAAA,EAAAC,UAAA,CAA2B,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACzD,MAAOA,EAAP,GAAaV,QAD4C,CAA3C,CAAAW,UAAA,CAEH,QAAS,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAC3B,MAAOA,EAAP,GAAaR,MADc,CAFb,CAAAU,OAAA,CAINlB,GAAA,CAAI,CAAC,CAACQ,MAAD;AAASE,QAAAS,IAAA,CAAaX,MAAb,CAAT,CAAD,CAAJ,CAJM,CAAAY,IAAA,CAIqCf,SAJrC,CAMhB,OAAOF,aAAAkB,MAAA,CAAmB,CACxBX,SAAUA,QAAAW,MAAA,CAAeT,SAAf,CADc,CAExBU,gBAAiBlB,cAFO,CAGxBmB,eAAgBnB,cAHQ,CAAnB,CAVoE,CArBgE;\",\n\"sources\":[\"node_modules/draft-js/lib/modifyBlockForContentState.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$modifyBlockForContentState\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule modifyBlockForContentState\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar Immutable = require('immutable');\\n\\nvar Map = Immutable.Map;\\n\\n\\nfunction modifyBlockForContentState(contentState, selectionState, operation) {\\n  var startKey = selectionState.getStartKey();\\n  var endKey = selectionState.getEndKey();\\n  var blockMap = contentState.getBlockMap();\\n  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {\\n    return k === startKey;\\n  }).takeUntil(function (_, k) {\\n    return k === endKey;\\n  }).concat(Map([[endKey, blockMap.get(endKey)]])).map(operation);\\n\\n  return contentState.merge({\\n    blockMap: blockMap.merge(newBlocks),\\n    selectionBefore: selectionState,\\n    selectionAfter: selectionState\\n  });\\n}\\n\\nmodule.exports = modifyBlockForContentState;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Map\",\"Immutable\",\"modifyBlockForContentState\",\"contentState\",\"selectionState\",\"operation\",\"startKey\",\"getStartKey\",\"endKey\",\"getEndKey\",\"blockMap\",\"getBlockMap\",\"newBlocks\",\"toSeq\",\"skipUntil\",\"_\",\"k\",\"takeUntil\",\"concat\",\"get\",\"map\",\"merge\",\"selectionBefore\",\"selectionAfter\"]\n}\n"]