["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_Hash.js"],"~:js","shadow$provide.module$node_modules$lodash$_Hash=function(global,process,require,module,exports,shadow$shims){function Hash(entries){var index=-1,length=null==entries?0:entries.length;for(this.clear();++index<length;){var entry=entries[index];this.set(entry[0],entry[1])}}global=require(\"module$node_modules$lodash$_hashClear\");process=require(\"module$node_modules$lodash$_hashDelete\");exports=require(\"module$node_modules$lodash$_hashGet\");shadow$shims=require(\"module$node_modules$lodash$_hashHas\");require=\nrequire(\"module$node_modules$lodash$_hashSet\");Hash.prototype.clear=global;Hash.prototype[\"delete\"]=process;Hash.prototype.get=exports;Hash.prototype.has=shadow$shims;Hash.prototype.set=require;module.exports=Hash}","~:source","shadow$provide[\"module$node_modules$lodash$_Hash\"] = function(global,process,require,module,exports,shadow$shims) {\nvar hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_hashHas","~$module$node_modules$lodash$_hashSet","~$module$node_modules$lodash$_hashGet","~$shadow.js","~$module$node_modules$lodash$_hashClear","~$module$node_modules$lodash$_hashDelete"]],"~:properties",["^5",["set","has","clear","get"]],"~:compiled-at",1532351402007,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_Hash.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,iCAAA,CAAqD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAclHC,QAASA,KAAI,CAACC,OAAD,CAAU,CAAA,IACjBC,MAAS,EADQ,CAEjBC,OAAoB,IAAX,EAAAF,OAAA,CAAkB,CAAlB,CAAsBA,OAAAE,OAGnC,KADA,IAAAC,MAAA,EACA,CAAO,EAAEF,KAAT,CAAiBC,MAAjB,CAAA,CAAyB,CACvB,IAAIE,MAAQJ,OAAA,CAAQC,KAAR,CACZ,KAAAI,IAAA,CAASD,KAAA,CAAM,CAAN,CAAT,CAAmBA,KAAA,CAAM,CAAN,CAAnB,CAFuB,CALJ,CAbnBE,MAAAA,CAAYX,OAAA,CAAQ,uCAAR,CACZY,QAAAA,CAAaZ,OAAA,CAAQ,wCAAR,CACba,QAAAA,CAAUb,OAAA,CAAQ,qCAAR,CACVc,aAAAA,CAAUd,OAAA,CAAQ,qCAAR,CACVe,QAAAA;AAAUf,OAAA,CAAQ,qCAAR,CAqBdI,KAAAY,UAAAR,MAAA,CAAuBG,MACvBP,KAAAY,UAAA,CAAe,QAAf,CAAA,CAA2BJ,OAC3BR,KAAAY,UAAAC,IAAA,CAAqBJ,OACrBT,KAAAY,UAAAE,IAAA,CAAqBJ,YACrBV,KAAAY,UAAAN,IAAA,CAAqBK,OAErBd,OAAAC,QAAA,CAAiBE,IAhCiG;\",\n\"sources\":[\"node_modules/lodash/_Hash.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_Hash\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar hashClear = require('./_hashClear'),\\n    hashDelete = require('./_hashDelete'),\\n    hashGet = require('./_hashGet'),\\n    hashHas = require('./_hashHas'),\\n    hashSet = require('./_hashSet');\\n\\n/**\\n * Creates a hash object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Hash(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `Hash`.\\nHash.prototype.clear = hashClear;\\nHash.prototype['delete'] = hashDelete;\\nHash.prototype.get = hashGet;\\nHash.prototype.has = hashHas;\\nHash.prototype.set = hashSet;\\n\\nmodule.exports = Hash;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Hash\",\"entries\",\"index\",\"length\",\"clear\",\"entry\",\"set\",\"hashClear\",\"hashDelete\",\"hashGet\",\"hashHas\",\"hashSet\",\"prototype\",\"get\",\"has\"]\n}\n"]