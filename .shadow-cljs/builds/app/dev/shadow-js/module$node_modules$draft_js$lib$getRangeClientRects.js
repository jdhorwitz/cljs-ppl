["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/getRangeClientRects.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$getRangeClientRects=function(global,process,require,module,exports,shadow$shims){function getRangeClientRectsChrome(range){for(var tempRange=range.cloneRange(),clientRects=[],ancestor=range.endContainer;null!=ancestor;ancestor=ancestor.parentNode){var atCommonAncestor=ancestor===range.commonAncestorContainer;atCommonAncestor?tempRange.setStart(range.startContainer,range.startOffset):tempRange.setStart(tempRange.endContainer,0);var rects=Array.from(tempRange.getClientRects());\nclientRects.push(rects);if(atCommonAncestor){var _ref;clientRects.reverse();return(_ref=[]).concat.apply(_ref,clientRects)}tempRange.setEndBefore(ancestor)}invariant(!1,\"Found an unexpected detached subtree when getting range client rects.\")}global=require(\"module$node_modules$fbjs$lib$UserAgent\");var invariant=require(\"module$node_modules$fbjs$lib$invariant\");require=global.isBrowser(\"Chrome\")?getRangeClientRectsChrome:function(range){return Array.from(range.getClientRects())};module.exports=require}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$getRangeClientRects\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getRangeClientRects\n * @format\n * \n */\n\n'use strict';\n\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar isChrome = UserAgent.isBrowser('Chrome');\n\n// In Chrome, the client rects will include the entire bounds of all nodes that\n// begin (have a start tag) within the selection, even if the selection does\n// not overlap the entire node. To resolve this, we split the range at each\n// start tag and join the client rects together.\n// https://code.google.com/p/chromium/issues/detail?id=324437\n/* eslint-disable consistent-return */\nfunction getRangeClientRectsChrome(range) {\n  var tempRange = range.cloneRange();\n  var clientRects = [];\n\n  for (var ancestor = range.endContainer; ancestor != null; ancestor = ancestor.parentNode) {\n    // If we've climbed up to the common ancestor, we can now use the\n    // original start point and stop climbing the tree.\n    var atCommonAncestor = ancestor === range.commonAncestorContainer;\n    if (atCommonAncestor) {\n      tempRange.setStart(range.startContainer, range.startOffset);\n    } else {\n      tempRange.setStart(tempRange.endContainer, 0);\n    }\n    var rects = Array.from(tempRange.getClientRects());\n    clientRects.push(rects);\n    if (atCommonAncestor) {\n      var _ref;\n\n      clientRects.reverse();\n      return (_ref = []).concat.apply(_ref, clientRects);\n    }\n    tempRange.setEndBefore(ancestor);\n  }\n\n  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Found an unexpected detached subtree when getting range client rects.') : invariant(false) : void 0;\n}\n/* eslint-enable consistent-return */\n\n/**\n * Like range.getClientRects() but normalizes for browser bugs.\n */\nvar getRangeClientRects = isChrome ? getRangeClientRectsChrome : function (range) {\n  return Array.from(range.getClientRects());\n};\n\nmodule.exports = getRangeClientRects;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$UserAgent"]],"~:properties",["^5",[]],"~:compiled-at",1532351402145,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$getRangeClientRects.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,qDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA4BtIC,QAASA,0BAAyB,CAACC,KAAD,CAAQ,CAIxC,IAHA,IAAIC,UAAYD,KAAAE,WAAA,EAAhB,CACIC,YAAc,EADlB,CAGSC,SAAWJ,KAAAK,aAApB,CAAoD,IAApD,EAAwCD,QAAxC,CAA0DA,QAA1D,CAAqEA,QAAAE,WAArE,CAA0F,CAGxF,IAAIC,iBAAmBH,QAAnBG,GAAgCP,KAAAQ,wBAChCD,iBAAJ,CACEN,SAAAQ,SAAA,CAAmBT,KAAAU,eAAnB,CAAyCV,KAAAW,YAAzC,CADF,CAGEV,SAAAQ,SAAA,CAAmBR,SAAAI,aAAnB,CAA2C,CAA3C,CAEF,KAAIO,MAAQC,KAAAC,KAAA,CAAWb,SAAAc,eAAA,EAAX,CACZZ;WAAAa,KAAA,CAAiBJ,KAAjB,CACA,IAAIL,gBAAJ,CAAsB,CACpB,IAAIU,IAEJd,YAAAe,QAAA,EACA,OAAOC,CAACF,IAADE,CAAQ,EAARA,QAAAC,MAAA,CAAyBH,IAAzB,CAA+Bd,WAA/B,CAJa,CAMtBF,SAAAoB,aAAA,CAAuBjB,QAAvB,CAjBwF,CAoBzCkB,SAAA,CAAU,CAAA,CAAV,CAAiB,uEAAjB,CAxBT,CAZtCC,MAAAA,CAAY5B,OAAA,CAAQ,wCAAR,CAEhB,KAAI2B,UAAY3B,OAAA,CAAQ,wCAAR,CAyCZ6B,QAAAA,CAvCWD,MAAAE,UAAAC,CAAoB,QAApBA,CAuCW,CAAW3B,yBAAX,CAAuC,QAAS,CAACC,KAAD,CAAQ,CAChF,MAAOa,MAAAC,KAAA,CAAWd,KAAAe,eAAA,EAAX,CADyE,CAIlFnB,OAAAC,QAAA,CAAiB2B,OA/DqH;\",\n\"sources\":[\"node_modules/draft-js/lib/getRangeClientRects.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$getRangeClientRects\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule getRangeClientRects\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar UserAgent = require('fbjs/lib/UserAgent');\\n\\nvar invariant = require('fbjs/lib/invariant');\\n\\nvar isChrome = UserAgent.isBrowser('Chrome');\\n\\n// In Chrome, the client rects will include the entire bounds of all nodes that\\n// begin (have a start tag) within the selection, even if the selection does\\n// not overlap the entire node. To resolve this, we split the range at each\\n// start tag and join the client rects together.\\n// https://code.google.com/p/chromium/issues/detail?id=324437\\n/* eslint-disable consistent-return */\\nfunction getRangeClientRectsChrome(range) {\\n  var tempRange = range.cloneRange();\\n  var clientRects = [];\\n\\n  for (var ancestor = range.endContainer; ancestor != null; ancestor = ancestor.parentNode) {\\n    // If we've climbed up to the common ancestor, we can now use the\\n    // original start point and stop climbing the tree.\\n    var atCommonAncestor = ancestor === range.commonAncestorContainer;\\n    if (atCommonAncestor) {\\n      tempRange.setStart(range.startContainer, range.startOffset);\\n    } else {\\n      tempRange.setStart(tempRange.endContainer, 0);\\n    }\\n    var rects = Array.from(tempRange.getClientRects());\\n    clientRects.push(rects);\\n    if (atCommonAncestor) {\\n      var _ref;\\n\\n      clientRects.reverse();\\n      return (_ref = []).concat.apply(_ref, clientRects);\\n    }\\n    tempRange.setEndBefore(ancestor);\\n  }\\n\\n  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Found an unexpected detached subtree when getting range client rects.') : invariant(false) : void 0;\\n}\\n/* eslint-enable consistent-return */\\n\\n/**\\n * Like range.getClientRects() but normalizes for browser bugs.\\n */\\nvar getRangeClientRects = isChrome ? getRangeClientRectsChrome : function (range) {\\n  return Array.from(range.getClientRects());\\n};\\n\\nmodule.exports = getRangeClientRects;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getRangeClientRectsChrome\",\"range\",\"tempRange\",\"cloneRange\",\"clientRects\",\"ancestor\",\"endContainer\",\"parentNode\",\"atCommonAncestor\",\"commonAncestorContainer\",\"setStart\",\"startContainer\",\"startOffset\",\"rects\",\"Array\",\"from\",\"getClientRects\",\"push\",\"_ref\",\"reverse\",\"concat\",\"apply\",\"setEndBefore\",\"invariant\",\"UserAgent\",\"getRangeClientRects\",\"isBrowser\",\"isChrome\"]\n}\n"]