["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/rc-upload/lib/request.js"],"~:js","shadow$provide.module$node_modules$rc_upload$lib$request=function(global,process,require,module,exports,shadow$shims){function getError(option,xhr){var err=Error(\"cannot post \"+option.action+\" \"+xhr.status+\"'\");err.status=xhr.status;err.method=\"post\";err.url=option.action;return err}function getBody(xhr){xhr=xhr.responseText||xhr.response;if(!xhr)return xhr;try{return JSON.parse(xhr)}catch(e){return xhr}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(option){var xhr=\nnew XMLHttpRequest;option.onProgress&&xhr.upload&&(xhr.upload.onprogress=function(e){0<e.total&&(e.percent=e.loaded/e.total*100);option.onProgress(e)});var formData=new FormData;option.data&&Object.keys(option.data).map(function(key){formData.append(key,option.data[key])});formData.append(option.filename,option.file);xhr.onerror=function(e){option.onError(e)};xhr.onload=function(){if(200>xhr.status||300<=xhr.status)return option.onError(getError(option,xhr),getBody(xhr));option.onSuccess(getBody(xhr),\nxhr)};xhr.open(\"post\",option.action,!0);option.withCredentials&&\"withCredentials\"in xhr&&(xhr.withCredentials=!0);var headers=option.headers||{};null!==headers[\"X-Requested-With\"]&&xhr.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\");for(var h in headers)headers.hasOwnProperty(h)&&null!==headers[h]&&xhr.setRequestHeader(h,headers[h]);xhr.send(formData);return{abort:function(){xhr.abort()}}};module.exports=exports[\"default\"]}","~:source","shadow$provide[\"module$node_modules$rc_upload$lib$request\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = upload;\nfunction getError(option, xhr) {\n  var msg = 'cannot post ' + option.action + ' ' + xhr.status + '\\'';\n  var err = new Error(msg);\n  err.status = xhr.status;\n  err.method = 'post';\n  err.url = option.action;\n  return err;\n}\n\nfunction getBody(xhr) {\n  var text = xhr.responseText || xhr.response;\n  if (!text) {\n    return text;\n  }\n\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\n\n// option {\n//  onProgress: (event: { percent: number }): void,\n//  onError: (event: Error, body?: Object): void,\n//  onSuccess: (body: Object): void,\n//  data: Object,\n//  filename: String,\n//  file: File,\n//  withCredentials: Boolean,\n//  action: String,\n//  headers: Object,\n// }\nfunction upload(option) {\n  var xhr = new XMLHttpRequest();\n\n  if (option.onProgress && xhr.upload) {\n    xhr.upload.onprogress = function progress(e) {\n      if (e.total > 0) {\n        e.percent = e.loaded / e.total * 100;\n      }\n      option.onProgress(e);\n    };\n  }\n\n  var formData = new FormData();\n\n  if (option.data) {\n    Object.keys(option.data).map(function (key) {\n      formData.append(key, option.data[key]);\n    });\n  }\n\n  formData.append(option.filename, option.file);\n\n  xhr.onerror = function error(e) {\n    option.onError(e);\n  };\n\n  xhr.onload = function onload() {\n    // allow success when 2xx status\n    // see https://github.com/react-component/upload/issues/34\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(option, xhr), getBody(xhr));\n    }\n\n    option.onSuccess(getBody(xhr), xhr);\n  };\n\n  xhr.open('post', option.action, true);\n\n  // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179\n  if (option.withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true;\n  }\n\n  var headers = option.headers || {};\n\n  // when set headers['X-Requested-With'] = null , can close default XHR header\n  // see https://github.com/react-component/upload/issues/33\n  if (headers['X-Requested-With'] !== null) {\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n  }\n\n  for (var h in headers) {\n    if (headers.hasOwnProperty(h) && headers[h] !== null) {\n      xhr.setRequestHeader(h, headers[h]);\n    }\n  }\n  xhr.send(formData);\n\n  return {\n    abort: function abort() {\n      xhr.abort();\n    }\n  };\n}\nmodule.exports = exports['default'];\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["percent","url","onerror","method","__esModule","value","status","withCredentials","onload","abort","onprogress"]],"~:compiled-at",1532351402167,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$rc_upload$lib$request.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/rc-upload/lib/request.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$rc_upload$lib$request\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports['default'] = upload;\\nfunction getError(option, xhr) {\\n  var msg = 'cannot post ' + option.action + ' ' + xhr.status + '\\\\'';\\n  var err = new Error(msg);\\n  err.status = xhr.status;\\n  err.method = 'post';\\n  err.url = option.action;\\n  return err;\\n}\\n\\nfunction getBody(xhr) {\\n  var text = xhr.responseText || xhr.response;\\n  if (!text) {\\n    return text;\\n  }\\n\\n  try {\\n    return JSON.parse(text);\\n  } catch (e) {\\n    return text;\\n  }\\n}\\n\\n// option {\\n//  onProgress: (event: { percent: number }): void,\\n//  onError: (event: Error, body?: Object): void,\\n//  onSuccess: (body: Object): void,\\n//  data: Object,\\n//  filename: String,\\n//  file: File,\\n//  withCredentials: Boolean,\\n//  action: String,\\n//  headers: Object,\\n// }\\nfunction upload(option) {\\n  var xhr = new XMLHttpRequest();\\n\\n  if (option.onProgress && xhr.upload) {\\n    xhr.upload.onprogress = function progress(e) {\\n      if (e.total > 0) {\\n        e.percent = e.loaded / e.total * 100;\\n      }\\n      option.onProgress(e);\\n    };\\n  }\\n\\n  var formData = new FormData();\\n\\n  if (option.data) {\\n    Object.keys(option.data).map(function (key) {\\n      formData.append(key, option.data[key]);\\n    });\\n  }\\n\\n  formData.append(option.filename, option.file);\\n\\n  xhr.onerror = function error(e) {\\n    option.onError(e);\\n  };\\n\\n  xhr.onload = function onload() {\\n    // allow success when 2xx status\\n    // see https://github.com/react-component/upload/issues/34\\n    if (xhr.status < 200 || xhr.status >= 300) {\\n      return option.onError(getError(option, xhr), getBody(xhr));\\n    }\\n\\n    option.onSuccess(getBody(xhr), xhr);\\n  };\\n\\n  xhr.open('post', option.action, true);\\n\\n  // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179\\n  if (option.withCredentials && 'withCredentials' in xhr) {\\n    xhr.withCredentials = true;\\n  }\\n\\n  var headers = option.headers || {};\\n\\n  // when set headers['X-Requested-With'] = null , can close default XHR header\\n  // see https://github.com/react-component/upload/issues/33\\n  if (headers['X-Requested-With'] !== null) {\\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\\n  }\\n\\n  for (var h in headers) {\\n    if (headers.hasOwnProperty(h) && headers[h] !== null) {\\n      xhr.setRequestHeader(h, headers[h]);\\n    }\\n  }\\n  xhr.send(formData);\\n\\n  return {\\n    abort: function abort() {\\n      xhr.abort();\\n    }\\n  };\\n}\\nmodule.exports = exports['default'];\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getError\",\"option\",\"xhr\",\"err\",\"Error\",\"action\",\"status\",\"method\",\"url\",\"getBody\",\"text\",\"responseText\",\"response\",\"JSON\",\"parse\",\"e\",\"Object\",\"defineProperty\",\"value\",\"upload\",\"XMLHttpRequest\",\"onProgress\",\"onprogress\",\"xhr.upload.onprogress\",\"total\",\"percent\",\"loaded\",\"formData\",\"FormData\",\"data\",\"keys\",\"map\",\"key\",\"append\",\"filename\",\"file\",\"onerror\",\"xhr.onerror\",\"onError\",\"onload\",\"xhr.onload\",\"onSuccess\",\"open\",\"withCredentials\",\"headers\",\"setRequestHeader\",\"h\",\"hasOwnProperty\",\"send\",\"abort\"]\n}\n"]