["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/moveSelectionForward.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$moveSelectionForward=function(global,process,require,module,exports,shadow$shims){module.exports=function(editorState,maxDistance){var selection=editorState.getSelection(),key=selection.getStartKey(),offset=selection.getStartOffset(),content=editorState.getCurrentContent();editorState=key;var block=content.getBlockForKey(key);maxDistance>block.getText().length-offset?(editorState=content.getKeyAfter(key),maxDistance=0):maxDistance=offset+maxDistance;\nreturn selection.merge({focusKey:editorState,focusOffset:maxDistance})}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$moveSelectionForward\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule moveSelectionForward\n * @format\n * \n */\n\n'use strict';\n\n/**\n * Given a collapsed selection, move the focus `maxDistance` forward within\n * the selected block. If the selection will go beyond the end of the block,\n * move focus to the start of the next block, but no further.\n *\n * This function is not Unicode-aware, so surrogate pairs will be treated\n * as having length 2.\n */\nfunction moveSelectionForward(editorState, maxDistance) {\n  var selection = editorState.getSelection();\n  var key = selection.getStartKey();\n  var offset = selection.getStartOffset();\n  var content = editorState.getCurrentContent();\n\n  var focusKey = key;\n  var focusOffset;\n\n  var block = content.getBlockForKey(key);\n\n  if (maxDistance > block.getText().length - offset) {\n    focusKey = content.getKeyAfter(key);\n    focusOffset = 0;\n  } else {\n    focusOffset = offset + maxDistance;\n  }\n\n  return selection.merge({ focusKey: focusKey, focusOffset: focusOffset });\n}\n\nmodule.exports = moveSelectionForward;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["focusKey","focusOffset"]],"~:compiled-at",1532351402147,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$moveSelectionForward.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA6CvIF,MAAAC,QAAA,CArBAE,QAA6B,CAACC,WAAD,CAAcC,WAAd,CAA2B,CACtD,IAAIC,UAAYF,WAAAG,aAAA,EAAhB,CACIC,IAAMF,SAAAG,YAAA,EADV,CAEIC,OAASJ,SAAAK,eAAA,EAFb,CAGIC,QAAUR,WAAAS,kBAAA,EAEVC,YAAAA,CAAWN,GAGf,KAAIO,MAAQH,OAAAI,eAAA,CAAuBR,GAAvB,CAERH,YAAJ,CAAkBU,KAAAE,QAAA,EAAAC,OAAlB,CAA2CR,MAA3C,EACEI,WACA,CADWF,OAAAO,YAAA,CAAoBX,GAApB,CACX,CAAAY,WAAA,CAAc,CAFhB,EAIEA,WAJF,CAIgBV,MAJhB,CAIyBL,WAGzB;MAAOC,UAAAe,MAAA,CAAgB,CAAEP,SAAUA,WAAZ,CAAsBM,YAAaA,WAAnC,CAAhB,CAlB+C,CAxB+E;\",\n\"sources\":[\"node_modules/draft-js/lib/moveSelectionForward.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$moveSelectionForward\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule moveSelectionForward\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\n/**\\n * Given a collapsed selection, move the focus `maxDistance` forward within\\n * the selected block. If the selection will go beyond the end of the block,\\n * move focus to the start of the next block, but no further.\\n *\\n * This function is not Unicode-aware, so surrogate pairs will be treated\\n * as having length 2.\\n */\\nfunction moveSelectionForward(editorState, maxDistance) {\\n  var selection = editorState.getSelection();\\n  var key = selection.getStartKey();\\n  var offset = selection.getStartOffset();\\n  var content = editorState.getCurrentContent();\\n\\n  var focusKey = key;\\n  var focusOffset;\\n\\n  var block = content.getBlockForKey(key);\\n\\n  if (maxDistance > block.getText().length - offset) {\\n    focusKey = content.getKeyAfter(key);\\n    focusOffset = 0;\\n  } else {\\n    focusOffset = offset + maxDistance;\\n  }\\n\\n  return selection.merge({ focusKey: focusKey, focusOffset: focusOffset });\\n}\\n\\nmodule.exports = moveSelectionForward;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"moveSelectionForward\",\"editorState\",\"maxDistance\",\"selection\",\"getSelection\",\"key\",\"getStartKey\",\"offset\",\"getStartOffset\",\"content\",\"getCurrentContent\",\"focusKey\",\"block\",\"getBlockForKey\",\"getText\",\"length\",\"getKeyAfter\",\"focusOffset\",\"merge\"]\n}\n"]