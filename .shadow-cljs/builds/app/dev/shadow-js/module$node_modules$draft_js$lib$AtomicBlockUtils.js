["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/AtomicBlockUtils.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$AtomicBlockUtils=function(global,process,require,module,exports,shadow$shims){var _extends=require(\"module$node_modules$object_assign$index\")||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i],key;for(key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},BlockMapBuilder=require(\"module$node_modules$draft_js$lib$BlockMapBuilder\"),CharacterMetadata=require(\"module$node_modules$draft_js$lib$CharacterMetadata\");\nglobal=require(\"module$node_modules$draft_js$lib$ContentBlock\");process=require(\"module$node_modules$draft_js$lib$ContentBlockNode\");exports=require(\"module$node_modules$draft_js$lib$DraftFeatureFlags\");var DraftModifier=require(\"module$node_modules$draft_js$lib$DraftModifier\"),EditorState=require(\"module$node_modules$draft_js$lib$EditorState\");shadow$shims=require(\"module$node_modules$immutable$dist$immutable\");require(\"module$node_modules$draft_js$lib$SelectionState\");var generateRandomKey=require(\"module$node_modules$draft_js$lib$generateRandomKey\"),\nmoveBlockInContentState=require(\"module$node_modules$draft_js$lib$moveBlockInContentState\"),experimentalTreeDataSupport=exports.draft_tree_data_support,ContentBlockRecord=experimentalTreeDataSupport?process:global,List=shadow$shims.List,Repeat=shadow$shims.Repeat;module.exports={insertAtomicBlock:function(editorState,entityKey,character){var contentState=editorState.getCurrentContent(),selectionState=editorState.getSelection();contentState=DraftModifier.removeRange(contentState,selectionState,\"backward\");\nvar targetSelection=contentState.getSelectionAfter();targetSelection=DraftModifier.splitBlock(contentState,targetSelection);contentState=targetSelection.getSelectionAfter();targetSelection=DraftModifier.setBlockType(targetSelection,contentState,\"atomic\");entityKey=CharacterMetadata.create({entity:entityKey});character={key:generateRandomKey(),type:\"atomic\",text:character,characterList:List(Repeat(entityKey,character.length))};entityKey={key:generateRandomKey(),type:\"unstyled\"};experimentalTreeDataSupport&&\n(character=_extends({},character,{nextSibling:entityKey.key}),entityKey=_extends({},entityKey,{prevSibling:character.key}));character=[new ContentBlockRecord(character),new ContentBlockRecord(entityKey)];character=BlockMapBuilder.createFromArray(character);contentState=DraftModifier.replaceWithFragment(targetSelection,contentState,character);selectionState=contentState.merge({selectionBefore:selectionState,selectionAfter:contentState.getSelectionAfter().set(\"hasFocus\",!0)});return EditorState.push(editorState,\nselectionState,\"insert-fragment\")},moveAtomicBlock:function(editorState,atomicBlock,targetRange,insertionMode){var contentState=editorState.getCurrentContent(),selectionState=editorState.getSelection();\"before\"===insertionMode||\"after\"===insertionMode?(targetRange=contentState.getBlockForKey(\"before\"===insertionMode?targetRange.getStartKey():targetRange.getEndKey()),atomicBlock=moveBlockInContentState(contentState,atomicBlock,targetRange,insertionMode)):(insertionMode=DraftModifier.removeRange(contentState,\ntargetRange,\"backward\"),contentState=insertionMode.getSelectionAfter(),targetRange=insertionMode.getBlockForKey(contentState.getFocusKey()),0===contentState.getStartOffset()?atomicBlock=moveBlockInContentState(insertionMode,atomicBlock,targetRange,\"before\"):contentState.getEndOffset()===targetRange.getLength()?atomicBlock=moveBlockInContentState(insertionMode,atomicBlock,targetRange,\"after\"):(insertionMode=DraftModifier.splitBlock(insertionMode,contentState),contentState=insertionMode.getSelectionAfter(),\ncontentState=insertionMode.getBlockForKey(contentState.getFocusKey()),atomicBlock=moveBlockInContentState(insertionMode,atomicBlock,contentState,\"before\")));selectionState=atomicBlock.merge({selectionBefore:selectionState,selectionAfter:atomicBlock.getSelectionAfter().set(\"hasFocus\",!0)});return EditorState.push(editorState,selectionState,\"move-block\")}}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$AtomicBlockUtils\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AtomicBlockUtils\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar moveBlockInContentState = require('./moveBlockInContentState');\n\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat;\n\n\nvar AtomicBlockUtils = {\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\n\n    var targetSelection = afterRemoval.getSelectionAfter();\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n    var insertionTarget = afterSplit.getSelectionAfter();\n\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\n\n    var charData = CharacterMetadata.create({ entity: entityKey });\n\n    var atomicBlockConfig = {\n      key: generateRandomKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length))\n    };\n\n    var atomicDividerBlockConfig = {\n      key: generateRandomKey(),\n      type: 'unstyled'\n    };\n\n    if (experimentalTreeDataSupport) {\n      atomicBlockConfig = _extends({}, atomicBlockConfig, {\n        nextSibling: atomicDividerBlockConfig.key\n      });\n      atomicDividerBlockConfig = _extends({}, atomicDividerBlockConfig, {\n        prevSibling: atomicBlockConfig.key\n      });\n    }\n\n    var fragmentArray = [new ContentBlockRecord(atomicBlockConfig), new ContentBlockRecord(atomicDividerBlockConfig)];\n\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n\n    var newContent = withAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  },\n\n  moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n\n    var withMovedAtomicBlock = void 0;\n\n    if (insertionMode === 'before' || insertionMode === 'after') {\n      var targetBlock = contentState.getBlockForKey(insertionMode === 'before' ? targetRange.getStartKey() : targetRange.getEndKey());\n\n      withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n    } else {\n      var afterRemoval = DraftModifier.removeRange(contentState, targetRange, 'backward');\n\n      var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n      var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n\n      if (selectionAfterRemoval.getStartOffset() === 0) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'before');\n      } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'after');\n      } else {\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n\n        var selectionAfterSplit = afterSplit.getSelectionAfter();\n        var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n\n        withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, 'before');\n      }\n    }\n\n    var newContent = withMovedAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withMovedAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n\n    return EditorState.push(editorState, newContent, 'move-block');\n  }\n};\n\nmodule.exports = AtomicBlockUtils;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$object_assign$index","~$module$node_modules$draft_js$lib$ContentBlock","~$module$node_modules$draft_js$lib$BlockMapBuilder","~$shadow.js","~$module$node_modules$draft_js$lib$DraftFeatureFlags","~$module$node_modules$draft_js$lib$moveBlockInContentState","~$module$node_modules$draft_js$lib$DraftModifier","~$module$node_modules$draft_js$lib$SelectionState","~$module$node_modules$draft_js$lib$ContentBlockNode","~$module$node_modules$immutable$dist$immutable","~$module$node_modules$draft_js$lib$CharacterMetadata","~$module$node_modules$draft_js$lib$EditorState","~$module$node_modules$draft_js$lib$generateRandomKey"]],"~:properties",["^5",["selectionBefore","insertAtomicBlock","selectionAfter","key","nextSibling","moveAtomicBlock","text","characterList","type","entity","prevSibling"]],"~:compiled-at",1532351402134,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$AtomicBlockUtils.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/AtomicBlockUtils.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$AtomicBlockUtils\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule AtomicBlockUtils\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar _assign = require('object-assign');\\n\\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\\n\\nvar BlockMapBuilder = require('./BlockMapBuilder');\\nvar CharacterMetadata = require('./CharacterMetadata');\\nvar ContentBlock = require('./ContentBlock');\\nvar ContentBlockNode = require('./ContentBlockNode');\\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\\nvar DraftModifier = require('./DraftModifier');\\nvar EditorState = require('./EditorState');\\nvar Immutable = require('immutable');\\nvar SelectionState = require('./SelectionState');\\n\\nvar generateRandomKey = require('./generateRandomKey');\\nvar moveBlockInContentState = require('./moveBlockInContentState');\\n\\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\\n\\nvar List = Immutable.List,\\n    Repeat = Immutable.Repeat;\\n\\n\\nvar AtomicBlockUtils = {\\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\\n    var contentState = editorState.getCurrentContent();\\n    var selectionState = editorState.getSelection();\\n\\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\\n\\n    var targetSelection = afterRemoval.getSelectionAfter();\\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\\n    var insertionTarget = afterSplit.getSelectionAfter();\\n\\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\\n\\n    var charData = CharacterMetadata.create({ entity: entityKey });\\n\\n    var atomicBlockConfig = {\\n      key: generateRandomKey(),\\n      type: 'atomic',\\n      text: character,\\n      characterList: List(Repeat(charData, character.length))\\n    };\\n\\n    var atomicDividerBlockConfig = {\\n      key: generateRandomKey(),\\n      type: 'unstyled'\\n    };\\n\\n    if (experimentalTreeDataSupport) {\\n      atomicBlockConfig = _extends({}, atomicBlockConfig, {\\n        nextSibling: atomicDividerBlockConfig.key\\n      });\\n      atomicDividerBlockConfig = _extends({}, atomicDividerBlockConfig, {\\n        prevSibling: atomicBlockConfig.key\\n      });\\n    }\\n\\n    var fragmentArray = [new ContentBlockRecord(atomicBlockConfig), new ContentBlockRecord(atomicDividerBlockConfig)];\\n\\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\\n\\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\\n\\n    var newContent = withAtomicBlock.merge({\\n      selectionBefore: selectionState,\\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\\n    });\\n\\n    return EditorState.push(editorState, newContent, 'insert-fragment');\\n  },\\n\\n  moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\\n    var contentState = editorState.getCurrentContent();\\n    var selectionState = editorState.getSelection();\\n\\n    var withMovedAtomicBlock = void 0;\\n\\n    if (insertionMode === 'before' || insertionMode === 'after') {\\n      var targetBlock = contentState.getBlockForKey(insertionMode === 'before' ? targetRange.getStartKey() : targetRange.getEndKey());\\n\\n      withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\\n    } else {\\n      var afterRemoval = DraftModifier.removeRange(contentState, targetRange, 'backward');\\n\\n      var selectionAfterRemoval = afterRemoval.getSelectionAfter();\\n      var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\\n\\n      if (selectionAfterRemoval.getStartOffset() === 0) {\\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'before');\\n      } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'after');\\n      } else {\\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\\n\\n        var selectionAfterSplit = afterSplit.getSelectionAfter();\\n        var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\\n\\n        withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, 'before');\\n      }\\n    }\\n\\n    var newContent = withMovedAtomicBlock.merge({\\n      selectionBefore: selectionState,\\n      selectionAfter: withMovedAtomicBlock.getSelectionAfter().set('hasFocus', true)\\n    });\\n\\n    return EditorState.push(editorState, newContent, 'move-block');\\n  }\\n};\\n\\nmodule.exports = AtomicBlockUtils;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_extends\",\"_assign\",\"target\",\"i\",\"arguments\",\"length\",\"source\",\"key\",\"Object\",\"prototype\",\"hasOwnProperty\",\"call\",\"BlockMapBuilder\",\"CharacterMetadata\",\"ContentBlock\",\"ContentBlockNode\",\"DraftFeatureFlags\",\"DraftModifier\",\"EditorState\",\"Immutable\",\"generateRandomKey\",\"moveBlockInContentState\",\"experimentalTreeDataSupport\",\"draft_tree_data_support\",\"ContentBlockRecord\",\"List\",\"Repeat\",\"AtomicBlockUtils\",\"insertAtomicBlock\",\"editorState\",\"entityKey\",\"character\",\"contentState\",\"getCurrentContent\",\"selectionState\",\"getSelection\",\"afterRemoval\",\"removeRange\",\"targetSelection\",\"getSelectionAfter\",\"afterSplit\",\"splitBlock\",\"insertionTarget\",\"asAtomicBlock\",\"setBlockType\",\"charData\",\"create\",\"entity\",\"atomicBlockConfig\",\"type\",\"text\",\"characterList\",\"atomicDividerBlockConfig\",\"nextSibling\",\"prevSibling\",\"fragmentArray\",\"fragment\",\"createFromArray\",\"withAtomicBlock\",\"replaceWithFragment\",\"newContent\",\"merge\",\"selectionBefore\",\"selectionAfter\",\"set\",\"push\",\"moveAtomicBlock\",\"atomicBlock\",\"targetRange\",\"insertionMode\",\"targetBlock\",\"getBlockForKey\",\"getStartKey\",\"getEndKey\",\"withMovedAtomicBlock\",\"selectionAfterRemoval\",\"_targetBlock\",\"getFocusKey\",\"getStartOffset\",\"getEndOffset\",\"getLength\",\"selectionAfterSplit\",\"_targetBlock2\"]\n}\n"]