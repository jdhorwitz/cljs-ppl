["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/editOnCopy.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$editOnCopy=function(global,process,require,module,exports,shadow$shims){var getFragmentFromSelection=require(\"module$node_modules$draft_js$lib$getFragmentFromSelection\");module.exports=function(editor,e){editor._latestEditorState.getSelection().isCollapsed()?e.preventDefault():editor.setClipboard(getFragmentFromSelection(editor._latestEditorState))}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$editOnCopy\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnCopy\n * @format\n * \n */\n\n'use strict';\n\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\n\n/**\n * If we have a selection, create a ContentState fragment and store\n * it in our internal clipboard. Subsequent paste events will use this\n * fragment if no external clipboard data is supplied.\n */\nfunction editOnCopy(editor, e) {\n  var editorState = editor._latestEditorState;\n  var selection = editorState.getSelection();\n\n  // No selection, so there's nothing to copy.\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  }\n\n  editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));\n}\n\nmodule.exports = editOnCopy;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$draft_js$lib$getFragmentFromSelection"]],"~:properties",["^5",[]],"~:compiled-at",1532351402144,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$editOnCopy.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB7H,IAAIC,yBAA2BJ,OAAA,CAAQ,2DAAR,CAoB/BC,OAAAC,QAAA,CAbAG,QAAmB,CAACC,MAAD,CAASC,CAAT,CAAY,CACXD,MAAAE,mBACFC,aAAAC,EAGZC,YAAA,EAAJ,CACEJ,CAAAK,eAAA,EADF,CAKAN,MAAAO,aAAA,CAAoBT,wBAAA,CAAyBE,MAAAE,mBAAzB,CAApB,CAV6B,CAvB8F;\",\n\"sources\":[\"node_modules/draft-js/lib/editOnCopy.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$editOnCopy\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule editOnCopy\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\\n\\n/**\\n * If we have a selection, create a ContentState fragment and store\\n * it in our internal clipboard. Subsequent paste events will use this\\n * fragment if no external clipboard data is supplied.\\n */\\nfunction editOnCopy(editor, e) {\\n  var editorState = editor._latestEditorState;\\n  var selection = editorState.getSelection();\\n\\n  // No selection, so there's nothing to copy.\\n  if (selection.isCollapsed()) {\\n    e.preventDefault();\\n    return;\\n  }\\n\\n  editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));\\n}\\n\\nmodule.exports = editOnCopy;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getFragmentFromSelection\",\"editOnCopy\",\"editor\",\"e\",\"_latestEditorState\",\"getSelection\",\"selection\",\"isCollapsed\",\"preventDefault\",\"setClipboard\"]\n}\n"]