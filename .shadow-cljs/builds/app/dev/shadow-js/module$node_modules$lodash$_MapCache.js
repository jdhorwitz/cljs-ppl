["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_MapCache.js"],"~:js","shadow$provide.module$node_modules$lodash$_MapCache=function(global,process,require,module,exports,shadow$shims){function MapCache(entries){var index=-1,length=null==entries?0:entries.length;for(this.clear();++index<length;){var entry=entries[index];this.set(entry[0],entry[1])}}global=require(\"module$node_modules$lodash$_mapCacheClear\");process=require(\"module$node_modules$lodash$_mapCacheDelete\");exports=require(\"module$node_modules$lodash$_mapCacheGet\");shadow$shims=require(\"module$node_modules$lodash$_mapCacheHas\");\nrequire=require(\"module$node_modules$lodash$_mapCacheSet\");MapCache.prototype.clear=global;MapCache.prototype[\"delete\"]=process;MapCache.prototype.get=exports;MapCache.prototype.has=shadow$shims;MapCache.prototype.set=require;module.exports=MapCache}","~:source","shadow$provide[\"module$node_modules$lodash$_MapCache\"] = function(global,process,require,module,exports,shadow$shims) {\nvar mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_mapCacheHas","~$module$node_modules$lodash$_mapCacheDelete","~$module$node_modules$lodash$_mapCacheSet","~$module$node_modules$lodash$_mapCacheGet","~$shadow.js","~$module$node_modules$lodash$_mapCacheClear"]],"~:properties",["^5",["set","has","clear","get"]],"~:compiled-at",1532351402009,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_MapCache.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,qCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CActHC,QAASA,SAAQ,CAACC,OAAD,CAAU,CAAA,IACrBC,MAAS,EADY,CAErBC,OAAoB,IAAX,EAAAF,OAAA,CAAkB,CAAlB,CAAsBA,OAAAE,OAGnC,KADA,IAAAC,MAAA,EACA,CAAO,EAAEF,KAAT,CAAiBC,MAAjB,CAAA,CAAyB,CACvB,IAAIE,MAAQJ,OAAA,CAAQC,KAAR,CACZ,KAAAI,IAAA,CAASD,KAAA,CAAM,CAAN,CAAT,CAAmBA,KAAA,CAAM,CAAN,CAAnB,CAFuB,CALA,CAbvBE,MAAAA,CAAgBX,OAAA,CAAQ,2CAAR,CAChBY,QAAAA,CAAiBZ,OAAA,CAAQ,4CAAR,CACjBa,QAAAA,CAAcb,OAAA,CAAQ,yCAAR,CACdc,aAAAA,CAAcd,OAAA,CAAQ,yCAAR,CACde;OAAAA,CAAcf,OAAA,CAAQ,yCAAR,CAqBlBI,SAAAY,UAAAR,MAAA,CAA2BG,MAC3BP,SAAAY,UAAA,CAAmB,QAAnB,CAAA,CAA+BJ,OAC/BR,SAAAY,UAAAC,IAAA,CAAyBJ,OACzBT,SAAAY,UAAAE,IAAA,CAAyBJ,YACzBV,SAAAY,UAAAN,IAAA,CAAyBK,OAEzBd,OAAAC,QAAA,CAAiBE,QAhCqG;\",\n\"sources\":[\"node_modules/lodash/_MapCache.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_MapCache\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar mapCacheClear = require('./_mapCacheClear'),\\n    mapCacheDelete = require('./_mapCacheDelete'),\\n    mapCacheGet = require('./_mapCacheGet'),\\n    mapCacheHas = require('./_mapCacheHas'),\\n    mapCacheSet = require('./_mapCacheSet');\\n\\n/**\\n * Creates a map cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction MapCache(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `MapCache`.\\nMapCache.prototype.clear = mapCacheClear;\\nMapCache.prototype['delete'] = mapCacheDelete;\\nMapCache.prototype.get = mapCacheGet;\\nMapCache.prototype.has = mapCacheHas;\\nMapCache.prototype.set = mapCacheSet;\\n\\nmodule.exports = MapCache;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"MapCache\",\"entries\",\"index\",\"length\",\"clear\",\"entry\",\"set\",\"mapCacheClear\",\"mapCacheDelete\",\"mapCacheGet\",\"mapCacheHas\",\"mapCacheSet\",\"prototype\",\"get\",\"has\"]\n}\n"]