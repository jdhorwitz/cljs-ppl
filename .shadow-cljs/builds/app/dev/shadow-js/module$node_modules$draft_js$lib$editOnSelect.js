["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/editOnSelect.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$editOnSelect=function(global,process,require,module,exports,shadow$shims){var EditorState=require(\"module$node_modules$draft_js$lib$EditorState\"),ReactDOM=require(\"module$node_modules$react_dom$index\"),getDraftEditorSelection=require(\"module$node_modules$draft_js$lib$getDraftEditorSelection\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\");module.exports=function(editor){if(!editor._blockSelectEvents&&editor._latestEditorState===editor.props.editorState){var editorState=\neditor.props.editorState,editorNode=ReactDOM.findDOMNode(editor.editorContainer);editorNode?void 0:invariant(!1,\"Missing editorNode\");editorNode.firstChild instanceof HTMLElement?void 0:invariant(!1,\"editorNode.firstChild is not an HTMLElement\");editorNode=getDraftEditorSelection(editorState,editorNode.firstChild);var updatedSelectionState=editorNode.selectionState;updatedSelectionState!==editorState.getSelection()&&(editorState=editorNode.needsRecovery?EditorState.forceSelection(editorState,updatedSelectionState):\nEditorState.acceptSelection(editorState,updatedSelectionState),editor.update(editorState))}}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$editOnSelect\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnSelect\n * @format\n * \n */\n\n'use strict';\n\nvar EditorState = require('./EditorState');\nvar ReactDOM = require('react-dom');\n\nvar getDraftEditorSelection = require('./getDraftEditorSelection');\nvar invariant = require('fbjs/lib/invariant');\n\nfunction editOnSelect(editor) {\n  if (editor._blockSelectEvents || editor._latestEditorState !== editor.props.editorState) {\n    return;\n  }\n\n  var editorState = editor.props.editorState;\n  var editorNode = ReactDOM.findDOMNode(editor.editorContainer);\n  !editorNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing editorNode') : invariant(false) : void 0;\n  !(editorNode.firstChild instanceof HTMLElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'editorNode.firstChild is not an HTMLElement') : invariant(false) : void 0;\n  var documentSelection = getDraftEditorSelection(editorState, editorNode.firstChild);\n  var updatedSelectionState = documentSelection.selectionState;\n\n  if (updatedSelectionState !== editorState.getSelection()) {\n    if (documentSelection.needsRecovery) {\n      editorState = EditorState.forceSelection(editorState, updatedSelectionState);\n    } else {\n      editorState = EditorState.acceptSelection(editorState, updatedSelectionState);\n    }\n    editor.update(editorState);\n  }\n}\n\nmodule.exports = editOnSelect;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_dom$index","~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$draft_js$lib$getDraftEditorSelection","~$module$node_modules$draft_js$lib$EditorState"]],"~:properties",["^5",[]],"~:compiled-at",1532351402151,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$editOnSelect.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB/H,IAAIC,YAAcJ,OAAA,CAAQ,8CAAR,CAAlB,CACIK,SAAWL,OAAA,CAAQ,qCAAR,CADf,CAGIM,wBAA0BN,OAAA,CAAQ,0DAAR,CAH9B,CAIIO,UAAYP,OAAA,CAAQ,wCAAR,CAwBhBC,OAAAC,QAAA,CAtBAM,QAAqB,CAACC,MAAD,CAAS,CAC5B,GAAIC,CAAAD,MAAAC,mBAAJ,EAAiCD,MAAAE,mBAAjC,GAA+DF,MAAAG,MAAAC,YAA/D,CAAA,CAIA,IAAIA;AAAcJ,MAAAG,MAAAC,YAAlB,CACIC,WAAaT,QAAAU,YAAA,CAAqBN,MAAAO,gBAArB,CAChBF,WAAD,CAAkH,IAAK,EAAvH,CAAsDP,SAAA,CAAU,CAAA,CAAV,CAAiB,oBAAjB,CACpDO,WAAAG,WAAF,WAAmCC,YAAnC,CAA+K,IAAK,EAApL,CAA0FX,SAAA,CAAU,CAAA,CAAV,CAAiB,6CAAjB,CACtFY,WAAAA,CAAoBb,uBAAA,CAAwBO,WAAxB,CAAqCC,UAAAG,WAArC,CACxB,KAAIG,sBAAwBD,UAAAE,eAExBD,sBAAJ,GAA8BP,WAAAS,aAAA,EAA9B,GAEIT,WAIF,CALIM,UAAAI,cAAJ,CACgBnB,WAAAoB,eAAA,CAA2BX,WAA3B,CAAwCO,qBAAxC,CADhB;AAGgBhB,WAAAqB,gBAAA,CAA4BZ,WAA5B,CAAyCO,qBAAzC,CAEhB,CAAAX,MAAAiB,OAAA,CAAcb,WAAd,CANF,CAXA,CAD4B,CAtBiG;\",\n\"sources\":[\"node_modules/draft-js/lib/editOnSelect.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$editOnSelect\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule editOnSelect\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar EditorState = require('./EditorState');\\nvar ReactDOM = require('react-dom');\\n\\nvar getDraftEditorSelection = require('./getDraftEditorSelection');\\nvar invariant = require('fbjs/lib/invariant');\\n\\nfunction editOnSelect(editor) {\\n  if (editor._blockSelectEvents || editor._latestEditorState !== editor.props.editorState) {\\n    return;\\n  }\\n\\n  var editorState = editor.props.editorState;\\n  var editorNode = ReactDOM.findDOMNode(editor.editorContainer);\\n  !editorNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing editorNode') : invariant(false) : void 0;\\n  !(editorNode.firstChild instanceof HTMLElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'editorNode.firstChild is not an HTMLElement') : invariant(false) : void 0;\\n  var documentSelection = getDraftEditorSelection(editorState, editorNode.firstChild);\\n  var updatedSelectionState = documentSelection.selectionState;\\n\\n  if (updatedSelectionState !== editorState.getSelection()) {\\n    if (documentSelection.needsRecovery) {\\n      editorState = EditorState.forceSelection(editorState, updatedSelectionState);\\n    } else {\\n      editorState = EditorState.acceptSelection(editorState, updatedSelectionState);\\n    }\\n    editor.update(editorState);\\n  }\\n}\\n\\nmodule.exports = editOnSelect;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"EditorState\",\"ReactDOM\",\"getDraftEditorSelection\",\"invariant\",\"editOnSelect\",\"editor\",\"_blockSelectEvents\",\"_latestEditorState\",\"props\",\"editorState\",\"editorNode\",\"findDOMNode\",\"editorContainer\",\"firstChild\",\"HTMLElement\",\"documentSelection\",\"updatedSelectionState\",\"selectionState\",\"getSelection\",\"needsRecovery\",\"forceSelection\",\"acceptSelection\",\"update\"]\n}\n"]