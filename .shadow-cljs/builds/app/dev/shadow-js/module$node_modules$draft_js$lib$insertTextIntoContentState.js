["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/insertTextIntoContentState.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$insertTextIntoContentState=function(global,process,require,module,exports,shadow$shims){global=require(\"module$node_modules$immutable$dist$immutable\");var insertIntoList=require(\"module$node_modules$draft_js$lib$insertIntoList\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\"),Repeat=global.Repeat;module.exports=function(contentState,selectionState,text,characterMetadata){selectionState.isCollapsed()?void 0:invariant(!1,\"`insertText` should only be called with a collapsed range.\");\nvar len=text.length;if(!len)return contentState;var blockMap=contentState.getBlockMap(),key=selectionState.getStartKey(),offset=selectionState.getStartOffset(),block=blockMap.get(key),blockText=block.getText();text=block.merge({text:blockText.slice(0,offset)+text+blockText.slice(offset,block.getLength()),characterList:insertIntoList(block.getCharacterList(),Repeat(characterMetadata,len).toList(),offset)});len=offset+len;return contentState.merge({blockMap:blockMap.set(key,text),selectionAfter:selectionState.merge({anchorOffset:len,\nfocusOffset:len})})}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$insertTextIntoContentState\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertTextIntoContentState\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar insertIntoList = require('./insertIntoList');\nvar invariant = require('fbjs/lib/invariant');\n\nvar Repeat = Immutable.Repeat;\n\n\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : void 0;\n\n  var len = text.length;\n  if (!len) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var key = selectionState.getStartKey();\n  var offset = selectionState.getStartOffset();\n  var block = blockMap.get(key);\n  var blockText = block.getText();\n\n  var newBlock = block.merge({\n    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\n    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\n  });\n\n  var newOffset = offset + len;\n\n  return contentState.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selectionState.merge({\n      anchorOffset: newOffset,\n      focusOffset: newOffset\n    })\n  });\n}\n\nmodule.exports = insertTextIntoContentState;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$draft_js$lib$insertIntoList","~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$immutable$dist$immutable"]],"~:properties",["^5",["anchorOffset","selectionAfter","text","focusOffset","characterList","blockMap"]],"~:compiled-at",1532351402128,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$insertTextIntoContentState.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBzIC,MAAAA,CAAYJ,OAAA,CAAQ,8CAAR,CAEhB,KAAIK,eAAiBL,OAAA,CAAQ,iDAAR,CAArB,CACIM,UAAYN,OAAA,CAAQ,wCAAR,CADhB,CAGIO,OAASH,MAAAG,OAiCbN,OAAAC,QAAA,CA9BAM,QAAmC,CAACC,YAAD,CAAeC,cAAf,CAA+BC,IAA/B,CAAqCC,iBAArC,CAAwD,CACxFF,cAAAG,YAAA,EAAD,CAA4K,IAAK,EAAjL,CAAwEP,SAAA,CAAU,CAAA,CAAV,CAAiB,4DAAjB,CAExE;IAAIQ,IAAMH,IAAAI,OACV,IAAI,CAACD,GAAL,CACE,MAAOL,aAGT,KAAIO,SAAWP,YAAAQ,YAAA,EAAf,CACIC,IAAMR,cAAAS,YAAA,EADV,CAEIC,OAASV,cAAAW,eAAA,EAFb,CAGIC,MAAQN,QAAAO,IAAA,CAAaL,GAAb,CAHZ,CAIIM,UAAYF,KAAAG,QAAA,EAEZC,KAAAA,CAAWJ,KAAAK,MAAA,CAAY,CACzBhB,KAAMa,SAAAI,MAAA,CAAgB,CAAhB,CAAmBR,MAAnB,CAANT,CAAmCA,IAAnCA,CAA0Ca,SAAAI,MAAA,CAAgBR,MAAhB,CAAwBE,KAAAO,UAAA,EAAxB,CADjB,CAEzBC,cAAezB,cAAA,CAAeiB,KAAAS,iBAAA,EAAf,CAAyCxB,MAAA,CAAOK,iBAAP,CAA0BE,GAA1B,CAAAkB,OAAA,EAAzC,CAAkFZ,MAAlF,CAFU,CAAZ,CAKXa,IAAAA,CAAYb,MAAZa,CAAqBnB,GAEzB,OAAOL,aAAAkB,MAAA,CAAmB,CACxBX,SAAUA,QAAAkB,IAAA,CAAahB,GAAb,CAAkBQ,IAAlB,CADc,CAExBS,eAAgBzB,cAAAiB,MAAA,CAAqB,CACnCS,aAAcH,GADqB;AAEnCI,YAAaJ,GAFsB,CAArB,CAFQ,CAAnB,CArBkF,CAxBkD;\",\n\"sources\":[\"node_modules/draft-js/lib/insertTextIntoContentState.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$insertTextIntoContentState\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule insertTextIntoContentState\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar Immutable = require('immutable');\\n\\nvar insertIntoList = require('./insertIntoList');\\nvar invariant = require('fbjs/lib/invariant');\\n\\nvar Repeat = Immutable.Repeat;\\n\\n\\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : void 0;\\n\\n  var len = text.length;\\n  if (!len) {\\n    return contentState;\\n  }\\n\\n  var blockMap = contentState.getBlockMap();\\n  var key = selectionState.getStartKey();\\n  var offset = selectionState.getStartOffset();\\n  var block = blockMap.get(key);\\n  var blockText = block.getText();\\n\\n  var newBlock = block.merge({\\n    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\\n    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\\n  });\\n\\n  var newOffset = offset + len;\\n\\n  return contentState.merge({\\n    blockMap: blockMap.set(key, newBlock),\\n    selectionAfter: selectionState.merge({\\n      anchorOffset: newOffset,\\n      focusOffset: newOffset\\n    })\\n  });\\n}\\n\\nmodule.exports = insertTextIntoContentState;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Immutable\",\"insertIntoList\",\"invariant\",\"Repeat\",\"insertTextIntoContentState\",\"contentState\",\"selectionState\",\"text\",\"characterMetadata\",\"isCollapsed\",\"len\",\"length\",\"blockMap\",\"getBlockMap\",\"key\",\"getStartKey\",\"offset\",\"getStartOffset\",\"block\",\"get\",\"blockText\",\"getText\",\"newBlock\",\"merge\",\"slice\",\"getLength\",\"characterList\",\"getCharacterList\",\"toList\",\"newOffset\",\"set\",\"selectionAfter\",\"anchorOffset\",\"focusOffset\"]\n}\n"]