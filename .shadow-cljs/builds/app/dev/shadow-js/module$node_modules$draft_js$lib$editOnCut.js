["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/editOnCut.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$editOnCut=function(global,process,require,module,exports,shadow$shims){function removeFragment(editorState){var newContent=DraftModifier.removeRange(editorState.getCurrentContent(),editorState.getSelection(),\"forward\");return EditorState.push(editorState,newContent,\"remove-range\")}var DraftModifier=require(\"module$node_modules$draft_js$lib$DraftModifier\"),EditorState=require(\"module$node_modules$draft_js$lib$EditorState\"),Style=require(\"module$node_modules$fbjs$lib$Style\"),\ngetFragmentFromSelection=require(\"module$node_modules$draft_js$lib$getFragmentFromSelection\"),getScrollPosition=require(\"module$node_modules$fbjs$lib$getScrollPosition\");module.exports=function(editor,e){var editorState=editor._latestEditorState,selection=editorState.getSelection(),element=e.target,scrollPosition=void 0;selection.isCollapsed()?e.preventDefault():(element instanceof Node&&(scrollPosition=getScrollPosition(Style.getScrollParent(element))),e=getFragmentFromSelection(editorState),editor.setClipboard(e),\neditor.setMode(\"cut\"),setTimeout(function(){editor.restoreEditorDOM(scrollPosition);editor.exitCurrentMode();editor.update(removeFragment(editorState))},0))}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$editOnCut\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnCut\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Style = require('fbjs/lib/Style');\n\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\nvar getScrollPosition = require('fbjs/lib/getScrollPosition');\n\n/**\n * On `cut` events, native behavior is allowed to occur so that the system\n * clipboard is set properly. This means that we need to take steps to recover\n * the editor DOM state after the `cut` has occurred in order to maintain\n * control of the component.\n *\n * In addition, we can keep a copy of the removed fragment, including all\n * styles and entities, for use as an internal paste.\n */\nfunction editOnCut(editor, e) {\n  var editorState = editor._latestEditorState;\n  var selection = editorState.getSelection();\n  var element = e.target;\n  var scrollPosition = void 0;\n\n  // No selection, so there's nothing to cut.\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  }\n\n  // Track the current scroll position so that it can be forced back in place\n  // after the editor regains control of the DOM.\n  if (element instanceof Node) {\n    scrollPosition = getScrollPosition(Style.getScrollParent(element));\n  }\n\n  var fragment = getFragmentFromSelection(editorState);\n  editor.setClipboard(fragment);\n\n  // Set `cut` mode to disable all event handling temporarily.\n  editor.setMode('cut');\n\n  // Let native `cut` behavior occur, then recover control.\n  setTimeout(function () {\n    editor.restoreEditorDOM(scrollPosition);\n    editor.exitCurrentMode();\n    editor.update(removeFragment(editorState));\n  }, 0);\n}\n\nfunction removeFragment(editorState) {\n  var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), 'forward');\n  return EditorState.push(editorState, newContent, 'remove-range');\n}\n\nmodule.exports = editOnCut;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$Style","~$shadow.js","~$module$node_modules$draft_js$lib$DraftModifier","~$module$node_modules$draft_js$lib$EditorState","~$module$node_modules$draft_js$lib$getFragmentFromSelection","~$module$node_modules$fbjs$lib$getScrollPosition"]],"~:properties",["^5",[]],"~:compiled-at",1532351402144,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$editOnCut.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgE5HC,QAASA,eAAc,CAACC,WAAD,CAAc,CACnC,IAAIC,WAAaC,aAAAC,YAAA,CAA0BH,WAAAI,kBAAA,EAA1B,CAA2DJ,WAAAK,aAAA,EAA3D,CAAuF,SAAvF,CACjB,OAAOC,YAAAC,KAAA,CAAiBP,WAAjB,CAA8BC,UAA9B,CAA0C,cAA1C,CAF4B,CAhDrC,IAAIC,cAAgBP,OAAA,CAAQ,gDAAR,CAApB,CACIW,YAAcX,OAAA,CAAQ,8CAAR,CADlB,CAEIa,MAAQb,OAAA,CAAQ,oCAAR,CAFZ;AAIIc,yBAA2Bd,OAAA,CAAQ,2DAAR,CAJ/B,CAKIe,kBAAoBf,OAAA,CAAQ,gDAAR,CAgDxBC,OAAAC,QAAA,CArCAc,QAAkB,CAACC,MAAD,CAASC,CAAT,CAAY,CAC5B,IAAIb,YAAcY,MAAAE,mBAAlB,CACIC,UAAYf,WAAAK,aAAA,EADhB,CAEIW,QAAUH,CAAAI,OAFd,CAGIC,eAAiB,IAAK,EAGtBH,UAAAI,YAAA,EAAJ,CACEN,CAAAO,eAAA,EADF,EAOIJ,OAWJ,WAXuBK,KAWvB,GAVEH,cAUF,CAVmBR,iBAAA,CAAkBF,KAAAc,gBAAA,CAAsBN,OAAtB,CAAlB,CAUnB,EAPIO,CAOJ,CAPed,wBAAA,CAAyBT,WAAzB,CAOf,CANAY,MAAAY,aAAA,CAAoBD,CAApB,CAMA;AAHAX,MAAAa,QAAA,CAAe,KAAf,CAGA,CAAAC,UAAA,CAAW,QAAS,EAAG,CACrBd,MAAAe,iBAAA,CAAwBT,cAAxB,CACAN,OAAAgB,gBAAA,EACAhB,OAAAiB,OAAA,CAAc9B,cAAA,CAAeC,WAAf,CAAd,CAHqB,CAAvB,CAIG,CAJH,CAlBA,CAP4B,CAhC8F;\",\n\"sources\":[\"node_modules/draft-js/lib/editOnCut.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$editOnCut\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule editOnCut\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar DraftModifier = require('./DraftModifier');\\nvar EditorState = require('./EditorState');\\nvar Style = require('fbjs/lib/Style');\\n\\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\\nvar getScrollPosition = require('fbjs/lib/getScrollPosition');\\n\\n/**\\n * On `cut` events, native behavior is allowed to occur so that the system\\n * clipboard is set properly. This means that we need to take steps to recover\\n * the editor DOM state after the `cut` has occurred in order to maintain\\n * control of the component.\\n *\\n * In addition, we can keep a copy of the removed fragment, including all\\n * styles and entities, for use as an internal paste.\\n */\\nfunction editOnCut(editor, e) {\\n  var editorState = editor._latestEditorState;\\n  var selection = editorState.getSelection();\\n  var element = e.target;\\n  var scrollPosition = void 0;\\n\\n  // No selection, so there's nothing to cut.\\n  if (selection.isCollapsed()) {\\n    e.preventDefault();\\n    return;\\n  }\\n\\n  // Track the current scroll position so that it can be forced back in place\\n  // after the editor regains control of the DOM.\\n  if (element instanceof Node) {\\n    scrollPosition = getScrollPosition(Style.getScrollParent(element));\\n  }\\n\\n  var fragment = getFragmentFromSelection(editorState);\\n  editor.setClipboard(fragment);\\n\\n  // Set `cut` mode to disable all event handling temporarily.\\n  editor.setMode('cut');\\n\\n  // Let native `cut` behavior occur, then recover control.\\n  setTimeout(function () {\\n    editor.restoreEditorDOM(scrollPosition);\\n    editor.exitCurrentMode();\\n    editor.update(removeFragment(editorState));\\n  }, 0);\\n}\\n\\nfunction removeFragment(editorState) {\\n  var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), 'forward');\\n  return EditorState.push(editorState, newContent, 'remove-range');\\n}\\n\\nmodule.exports = editOnCut;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"removeFragment\",\"editorState\",\"newContent\",\"DraftModifier\",\"removeRange\",\"getCurrentContent\",\"getSelection\",\"EditorState\",\"push\",\"Style\",\"getFragmentFromSelection\",\"getScrollPosition\",\"editOnCut\",\"editor\",\"e\",\"_latestEditorState\",\"selection\",\"element\",\"target\",\"scrollPosition\",\"isCollapsed\",\"preventDefault\",\"Node\",\"getScrollParent\",\"fragment\",\"setClipboard\",\"setMode\",\"setTimeout\",\"restoreEditorDOM\",\"exitCurrentMode\",\"update\"]\n}\n"]