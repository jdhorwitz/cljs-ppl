["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/convertFromDraftStateToRaw.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$convertFromDraftStateToRaw=function(global,process,require,module,exports,shadow$shims){var _extends=require(\"module$node_modules$object_assign$index\")||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i],key;for(key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},ContentBlock=require(\"module$node_modules$draft_js$lib$ContentBlock\"),ContentBlockNode=require(\"module$node_modules$draft_js$lib$ContentBlockNode\"),\nDraftStringKey=require(\"module$node_modules$draft_js$lib$DraftStringKey\"),encodeEntityRanges=require(\"module$node_modules$draft_js$lib$encodeEntityRanges\"),encodeInlineStyleRanges=require(\"module$node_modules$draft_js$lib$encodeInlineStyleRanges\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\"),createRawBlock=function(block,entityStorageMap){return{key:block.getKey(),text:block.getText(),type:block.getType(),depth:block.getDepth(),inlineStyleRanges:encodeInlineStyleRanges(block),entityRanges:encodeEntityRanges(block,\nentityStorageMap),data:block.getData().toObject()}},insertRawBlock=function(block,entityMap,rawBlocks,blockCacheRef){if(block instanceof ContentBlock)rawBlocks.push(createRawBlock(block,entityMap));else{block instanceof ContentBlockNode?void 0:invariant(!1,\"block is not a BlockNode\");var parentKey=block.getParentKey();block=blockCacheRef[block.getKey()]=_extends({},createRawBlock(block,entityMap),{children:[]});parentKey?blockCacheRef[parentKey].children.push(block):rawBlocks.push(block)}},encodeRawBlocks=\nfunction(contentState,rawState){var entityMap=rawState.entityMap,rawBlocks=[],blockCacheRef={},entityCacheRef={},entityStorageKey=0;contentState.getBlockMap().forEach(function(block){block.findEntityRanges(function(character){return null!==character.getEntity()},function(start){start=block.getEntityAt(start);var stringifiedEntityKey=DraftStringKey.stringify(start);entityCacheRef[stringifiedEntityKey]||(entityCacheRef[stringifiedEntityKey]=start,entityMap[stringifiedEntityKey]=\"\"+entityStorageKey,\nentityStorageKey++)});insertRawBlock(block,entityMap,rawBlocks,blockCacheRef)});return{blocks:rawBlocks,entityMap:entityMap}},encodeRawEntityMap=function(contentState,rawState){var blocks=rawState.blocks,rawEntityMap={};Object.keys(rawState.entityMap).forEach(function(key,index){key=contentState.getEntity(DraftStringKey.unstringify(key));rawEntityMap[index]={type:key.getType(),mutability:key.getMutability(),data:key.getData()}});return{blocks:blocks,entityMap:rawEntityMap}};module.exports=function(contentState){var rawDraftContentState=\n{entityMap:{},blocks:[]};rawDraftContentState=encodeRawBlocks(contentState,rawDraftContentState);return rawDraftContentState=encodeRawEntityMap(contentState,rawDraftContentState)}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$convertFromDraftStateToRaw\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromDraftStateToRaw\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftStringKey = require('./DraftStringKey');\n\nvar encodeEntityRanges = require('./encodeEntityRanges');\nvar encodeInlineStyleRanges = require('./encodeInlineStyleRanges');\nvar invariant = require('fbjs/lib/invariant');\n\nvar createRawBlock = function createRawBlock(block, entityStorageMap) {\n  return {\n    key: block.getKey(),\n    text: block.getText(),\n    type: block.getType(),\n    depth: block.getDepth(),\n    inlineStyleRanges: encodeInlineStyleRanges(block),\n    entityRanges: encodeEntityRanges(block, entityStorageMap),\n    data: block.getData().toObject()\n  };\n};\n\nvar insertRawBlock = function insertRawBlock(block, entityMap, rawBlocks, blockCacheRef) {\n  if (block instanceof ContentBlock) {\n    rawBlocks.push(createRawBlock(block, entityMap));\n    return;\n  }\n\n  !(block instanceof ContentBlockNode) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'block is not a BlockNode') : invariant(false) : void 0;\n\n  var parentKey = block.getParentKey();\n  var rawBlock = blockCacheRef[block.getKey()] = _extends({}, createRawBlock(block, entityMap), {\n    children: []\n  });\n\n  if (parentKey) {\n    blockCacheRef[parentKey].children.push(rawBlock);\n    return;\n  }\n\n  rawBlocks.push(rawBlock);\n};\n\nvar encodeRawBlocks = function encodeRawBlocks(contentState, rawState) {\n  var entityMap = rawState.entityMap;\n\n\n  var rawBlocks = [];\n\n  var blockCacheRef = {};\n  var entityCacheRef = {};\n  var entityStorageKey = 0;\n\n  contentState.getBlockMap().forEach(function (block) {\n    block.findEntityRanges(function (character) {\n      return character.getEntity() !== null;\n    }, function (start) {\n      var entityKey = block.getEntityAt(start);\n      // Stringify to maintain order of otherwise numeric keys.\n      var stringifiedEntityKey = DraftStringKey.stringify(entityKey);\n      // This makes this function resilient to two entities\n      // erroneously having the same key\n      if (entityCacheRef[stringifiedEntityKey]) {\n        return;\n      }\n      entityCacheRef[stringifiedEntityKey] = entityKey;\n      // we need the `any` casting here since this is a temporary state\n      // where we will later on flip the entity map and populate it with\n      // real entity, at this stage we just need to map back the entity\n      // key used by the BlockNode\n      entityMap[stringifiedEntityKey] = '' + entityStorageKey;\n      entityStorageKey++;\n    });\n\n    insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);\n  });\n\n  return {\n    blocks: rawBlocks,\n    entityMap: entityMap\n  };\n};\n\n// Flip storage map so that our storage keys map to global\n// DraftEntity keys.\nvar encodeRawEntityMap = function encodeRawEntityMap(contentState, rawState) {\n  var blocks = rawState.blocks,\n      entityMap = rawState.entityMap;\n\n\n  var rawEntityMap = {};\n\n  Object.keys(entityMap).forEach(function (key, index) {\n    var entity = contentState.getEntity(DraftStringKey.unstringify(key));\n    rawEntityMap[index] = {\n      type: entity.getType(),\n      mutability: entity.getMutability(),\n      data: entity.getData()\n    };\n  });\n\n  return {\n    blocks: blocks,\n    entityMap: rawEntityMap\n  };\n};\n\nvar convertFromDraftStateToRaw = function convertFromDraftStateToRaw(contentState) {\n  var rawDraftContentState = {\n    entityMap: {},\n    blocks: []\n  };\n\n  // add blocks\n  rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState);\n\n  // add entities\n  rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);\n\n  return rawDraftContentState;\n};\n\nmodule.exports = convertFromDraftStateToRaw;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$object_assign$index","~$module$node_modules$draft_js$lib$ContentBlock","~$module$node_modules$draft_js$lib$DraftStringKey","~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$draft_js$lib$ContentBlockNode","~$module$node_modules$draft_js$lib$encodeEntityRanges","~$module$node_modules$draft_js$lib$encodeInlineStyleRanges"]],"~:properties",["^5",["entityMap","entityRanges","key","children","blocks","text","type","depth","inlineStyleRanges","mutability","data"]],"~:compiled-at",1532351402154,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$convertFromDraftStateToRaw.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/convertFromDraftStateToRaw.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$convertFromDraftStateToRaw\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule convertFromDraftStateToRaw\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar _assign = require('object-assign');\\n\\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\\n\\nvar ContentBlock = require('./ContentBlock');\\nvar ContentBlockNode = require('./ContentBlockNode');\\nvar DraftStringKey = require('./DraftStringKey');\\n\\nvar encodeEntityRanges = require('./encodeEntityRanges');\\nvar encodeInlineStyleRanges = require('./encodeInlineStyleRanges');\\nvar invariant = require('fbjs/lib/invariant');\\n\\nvar createRawBlock = function createRawBlock(block, entityStorageMap) {\\n  return {\\n    key: block.getKey(),\\n    text: block.getText(),\\n    type: block.getType(),\\n    depth: block.getDepth(),\\n    inlineStyleRanges: encodeInlineStyleRanges(block),\\n    entityRanges: encodeEntityRanges(block, entityStorageMap),\\n    data: block.getData().toObject()\\n  };\\n};\\n\\nvar insertRawBlock = function insertRawBlock(block, entityMap, rawBlocks, blockCacheRef) {\\n  if (block instanceof ContentBlock) {\\n    rawBlocks.push(createRawBlock(block, entityMap));\\n    return;\\n  }\\n\\n  !(block instanceof ContentBlockNode) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'block is not a BlockNode') : invariant(false) : void 0;\\n\\n  var parentKey = block.getParentKey();\\n  var rawBlock = blockCacheRef[block.getKey()] = _extends({}, createRawBlock(block, entityMap), {\\n    children: []\\n  });\\n\\n  if (parentKey) {\\n    blockCacheRef[parentKey].children.push(rawBlock);\\n    return;\\n  }\\n\\n  rawBlocks.push(rawBlock);\\n};\\n\\nvar encodeRawBlocks = function encodeRawBlocks(contentState, rawState) {\\n  var entityMap = rawState.entityMap;\\n\\n\\n  var rawBlocks = [];\\n\\n  var blockCacheRef = {};\\n  var entityCacheRef = {};\\n  var entityStorageKey = 0;\\n\\n  contentState.getBlockMap().forEach(function (block) {\\n    block.findEntityRanges(function (character) {\\n      return character.getEntity() !== null;\\n    }, function (start) {\\n      var entityKey = block.getEntityAt(start);\\n      // Stringify to maintain order of otherwise numeric keys.\\n      var stringifiedEntityKey = DraftStringKey.stringify(entityKey);\\n      // This makes this function resilient to two entities\\n      // erroneously having the same key\\n      if (entityCacheRef[stringifiedEntityKey]) {\\n        return;\\n      }\\n      entityCacheRef[stringifiedEntityKey] = entityKey;\\n      // we need the `any` casting here since this is a temporary state\\n      // where we will later on flip the entity map and populate it with\\n      // real entity, at this stage we just need to map back the entity\\n      // key used by the BlockNode\\n      entityMap[stringifiedEntityKey] = '' + entityStorageKey;\\n      entityStorageKey++;\\n    });\\n\\n    insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);\\n  });\\n\\n  return {\\n    blocks: rawBlocks,\\n    entityMap: entityMap\\n  };\\n};\\n\\n// Flip storage map so that our storage keys map to global\\n// DraftEntity keys.\\nvar encodeRawEntityMap = function encodeRawEntityMap(contentState, rawState) {\\n  var blocks = rawState.blocks,\\n      entityMap = rawState.entityMap;\\n\\n\\n  var rawEntityMap = {};\\n\\n  Object.keys(entityMap).forEach(function (key, index) {\\n    var entity = contentState.getEntity(DraftStringKey.unstringify(key));\\n    rawEntityMap[index] = {\\n      type: entity.getType(),\\n      mutability: entity.getMutability(),\\n      data: entity.getData()\\n    };\\n  });\\n\\n  return {\\n    blocks: blocks,\\n    entityMap: rawEntityMap\\n  };\\n};\\n\\nvar convertFromDraftStateToRaw = function convertFromDraftStateToRaw(contentState) {\\n  var rawDraftContentState = {\\n    entityMap: {},\\n    blocks: []\\n  };\\n\\n  // add blocks\\n  rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState);\\n\\n  // add entities\\n  rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);\\n\\n  return rawDraftContentState;\\n};\\n\\nmodule.exports = convertFromDraftStateToRaw;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_extends\",\"_assign\",\"target\",\"i\",\"arguments\",\"length\",\"source\",\"key\",\"Object\",\"prototype\",\"hasOwnProperty\",\"call\",\"ContentBlock\",\"ContentBlockNode\",\"DraftStringKey\",\"encodeEntityRanges\",\"encodeInlineStyleRanges\",\"invariant\",\"createRawBlock\",\"block\",\"entityStorageMap\",\"getKey\",\"text\",\"getText\",\"type\",\"getType\",\"depth\",\"getDepth\",\"inlineStyleRanges\",\"entityRanges\",\"data\",\"getData\",\"toObject\",\"insertRawBlock\",\"entityMap\",\"rawBlocks\",\"blockCacheRef\",\"push\",\"parentKey\",\"getParentKey\",\"rawBlock\",\"children\",\"encodeRawBlocks\",\"contentState\",\"rawState\",\"entityCacheRef\",\"entityStorageKey\",\"getBlockMap\",\"forEach\",\"findEntityRanges\",\"character\",\"getEntity\",\"start\",\"entityKey\",\"getEntityAt\",\"stringifiedEntityKey\",\"stringify\",\"blocks\",\"encodeRawEntityMap\",\"rawEntityMap\",\"keys\",\"index\",\"entity\",\"unstringify\",\"mutability\",\"getMutability\",\"convertFromDraftStateToRaw\",\"rawDraftContentState\"]\n}\n"]