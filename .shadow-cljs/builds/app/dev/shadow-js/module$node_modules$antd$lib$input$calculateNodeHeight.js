["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/antd/lib/input/calculateNodeHeight.js"],"~:js","shadow$provide.module$node_modules$antd$lib$input$calculateNodeHeight=function(global,process,require,module,exports,shadow$shims){function calculateNodeStyling(node){var useCache=1<arguments.length&&void 0!==arguments[1]?arguments[1]:!1,nodeRef=node.getAttribute(\"id\")||node.getAttribute(\"data-reactid\")||node.getAttribute(\"name\");if(useCache&&computedStyleCache[nodeRef])return computedStyleCache[nodeRef];var style=window.getComputedStyle(node),boxSizing=style.getPropertyValue(\"box-sizing\")||style.getPropertyValue(\"-moz-box-sizing\")||\nstyle.getPropertyValue(\"-webkit-box-sizing\"),paddingSize=parseFloat(style.getPropertyValue(\"padding-bottom\"))+parseFloat(style.getPropertyValue(\"padding-top\")),borderSize=parseFloat(style.getPropertyValue(\"border-bottom-width\"))+parseFloat(style.getPropertyValue(\"border-top-width\"));boxSizing={sizingStyle:SIZING_STYLE.map(function(name){return name+\":\"+style.getPropertyValue(name)}).join(\";\"),paddingSize:paddingSize,borderSize:borderSize,boxSizing:boxSizing};useCache&&nodeRef&&(computedStyleCache[nodeRef]=\nboxSizing);return boxSizing}Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(uiTextNode){var useCache=1<arguments.length&&void 0!==arguments[1]?arguments[1]:!1,minRows=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,maxRows=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;hiddenTextarea||(hiddenTextarea=document.createElement(\"textarea\"),document.body.appendChild(hiddenTextarea));uiTextNode.getAttribute(\"wrap\")?hiddenTextarea.setAttribute(\"wrap\",\nuiTextNode.getAttribute(\"wrap\")):hiddenTextarea.removeAttribute(\"wrap\");var _calculateNodeStyling=calculateNodeStyling(uiTextNode,useCache);useCache=_calculateNodeStyling.paddingSize;var borderSize=_calculateNodeStyling.borderSize,boxSizing=_calculateNodeStyling.boxSizing;hiddenTextarea.setAttribute(\"style\",_calculateNodeStyling.sizingStyle+\";\"+HIDDEN_TEXTAREA_STYLE);hiddenTextarea.value=uiTextNode.value||uiTextNode.placeholder||\"\";_calculateNodeStyling=Number.MIN_SAFE_INTEGER;var maxHeight=Number.MAX_SAFE_INTEGER,\nheight=hiddenTextarea.scrollHeight,overflowY=void 0;\"border-box\"===boxSizing?height+=borderSize:\"content-box\"===boxSizing&&(height-=useCache);if(null!==minRows||null!==maxRows){hiddenTextarea.value=\" \";var singleRowHeight=hiddenTextarea.scrollHeight-useCache;null!==minRows&&(_calculateNodeStyling=singleRowHeight*minRows,\"border-box\"===boxSizing&&(_calculateNodeStyling=_calculateNodeStyling+useCache+borderSize),height=Math.max(_calculateNodeStyling,height));null!==maxRows&&(maxHeight=singleRowHeight*\nmaxRows,\"border-box\"===boxSizing&&(maxHeight=maxHeight+useCache+borderSize),overflowY=height>maxHeight?\"\":\"hidden\",height=Math.min(maxHeight,height))}maxRows||(overflowY=\"hidden\");return{height:height,minHeight:_calculateNodeStyling,maxHeight:maxHeight,overflowY:overflowY}};var HIDDEN_TEXTAREA_STYLE=\"\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n\",\nSIZING_STYLE=\"letter-spacing line-height padding-top padding-bottom font-family font-weight font-size text-rendering text-transform width text-indent padding-left padding-right border-width box-sizing\".split(\" \"),computedStyleCache={},hiddenTextarea=void 0;module.exports=exports[\"default\"]}","~:source","shadow$provide[\"module$node_modules$antd$lib$input$calculateNodeHeight\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports['default'] = calculateNodeHeight;\n// Thanks to https://github.com/andreypopp/react-textarea-autosize/\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */\nvar HIDDEN_TEXTAREA_STYLE = '\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n';\nvar SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];\nvar computedStyleCache = {};\nvar hiddenTextarea = void 0;\nfunction calculateNodeStyling(node) {\n    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');\n    if (useCache && computedStyleCache[nodeRef]) {\n        return computedStyleCache[nodeRef];\n    }\n    var style = window.getComputedStyle(node);\n    var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');\n    var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));\n    var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));\n    var sizingStyle = SIZING_STYLE.map(function (name) {\n        return name + ':' + style.getPropertyValue(name);\n    }).join(';');\n    var nodeInfo = {\n        sizingStyle: sizingStyle,\n        paddingSize: paddingSize,\n        borderSize: borderSize,\n        boxSizing: boxSizing\n    };\n    if (useCache && nodeRef) {\n        computedStyleCache[nodeRef] = nodeInfo;\n    }\n    return nodeInfo;\n}\nfunction calculateNodeHeight(uiTextNode) {\n    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    if (!hiddenTextarea) {\n        hiddenTextarea = document.createElement('textarea');\n        document.body.appendChild(hiddenTextarea);\n    }\n    // Fix wrap=\"off\" issue\n    // https://github.com/ant-design/ant-design/issues/6577\n    if (uiTextNode.getAttribute('wrap')) {\n        hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\n    } else {\n        hiddenTextarea.removeAttribute('wrap');\n    }\n    // Copy all CSS properties that have an impact on the height of the content in\n    // the textbox\n\n    var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),\n        paddingSize = _calculateNodeStyling.paddingSize,\n        borderSize = _calculateNodeStyling.borderSize,\n        boxSizing = _calculateNodeStyling.boxSizing,\n        sizingStyle = _calculateNodeStyling.sizingStyle;\n    // Need to have the overflow attribute to hide the scrollbar otherwise\n    // text-lines will not calculated properly as the shadow will technically be\n    // narrower for content\n\n\n    hiddenTextarea.setAttribute('style', sizingStyle + ';' + HIDDEN_TEXTAREA_STYLE);\n    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\n    var minHeight = Number.MIN_SAFE_INTEGER;\n    var maxHeight = Number.MAX_SAFE_INTEGER;\n    var height = hiddenTextarea.scrollHeight;\n    var overflowY = void 0;\n    if (boxSizing === 'border-box') {\n        // border-box: add border, since height = content + padding + border\n        height = height + borderSize;\n    } else if (boxSizing === 'content-box') {\n        // remove padding, since height = content\n        height = height - paddingSize;\n    }\n    if (minRows !== null || maxRows !== null) {\n        // measure height of a textarea with a single row\n        hiddenTextarea.value = ' ';\n        var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n        if (minRows !== null) {\n            minHeight = singleRowHeight * minRows;\n            if (boxSizing === 'border-box') {\n                minHeight = minHeight + paddingSize + borderSize;\n            }\n            height = Math.max(minHeight, height);\n        }\n        if (maxRows !== null) {\n            maxHeight = singleRowHeight * maxRows;\n            if (boxSizing === 'border-box') {\n                maxHeight = maxHeight + paddingSize + borderSize;\n            }\n            overflowY = height > maxHeight ? '' : 'hidden';\n            height = Math.min(maxHeight, height);\n        }\n    }\n    // Remove scroll bar flash when autosize without maxRows\n    if (!maxRows) {\n        overflowY = 'hidden';\n    }\n    return { height: height, minHeight: minHeight, maxHeight: maxHeight, overflowY: overflowY };\n}\nmodule.exports = exports['default'];\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["paddingSize","minHeight","height","overflowY","sizingStyle","__esModule","maxHeight","value","boxSizing","borderSize"]],"~:compiled-at",1532351401856,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$antd$lib$input$calculateNodeHeight.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/antd/lib/input/calculateNodeHeight.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$antd$lib$input$calculateNodeHeight\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports['default'] = calculateNodeHeight;\\n// Thanks to https://github.com/andreypopp/react-textarea-autosize/\\n/**\\n * calculateNodeHeight(uiTextNode, useCache = false)\\n */\\nvar HIDDEN_TEXTAREA_STYLE = '\\\\n  min-height:0 !important;\\\\n  max-height:none !important;\\\\n  height:0 !important;\\\\n  visibility:hidden !important;\\\\n  overflow:hidden !important;\\\\n  position:absolute !important;\\\\n  z-index:-1000 !important;\\\\n  top:0 !important;\\\\n  right:0 !important\\\\n';\\nvar SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];\\nvar computedStyleCache = {};\\nvar hiddenTextarea = void 0;\\nfunction calculateNodeStyling(node) {\\n    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\\n\\n    var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');\\n    if (useCache && computedStyleCache[nodeRef]) {\\n        return computedStyleCache[nodeRef];\\n    }\\n    var style = window.getComputedStyle(node);\\n    var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');\\n    var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));\\n    var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));\\n    var sizingStyle = SIZING_STYLE.map(function (name) {\\n        return name + ':' + style.getPropertyValue(name);\\n    }).join(';');\\n    var nodeInfo = {\\n        sizingStyle: sizingStyle,\\n        paddingSize: paddingSize,\\n        borderSize: borderSize,\\n        boxSizing: boxSizing\\n    };\\n    if (useCache && nodeRef) {\\n        computedStyleCache[nodeRef] = nodeInfo;\\n    }\\n    return nodeInfo;\\n}\\nfunction calculateNodeHeight(uiTextNode) {\\n    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\\n    var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\\n    var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\\n\\n    if (!hiddenTextarea) {\\n        hiddenTextarea = document.createElement('textarea');\\n        document.body.appendChild(hiddenTextarea);\\n    }\\n    // Fix wrap=\\\"off\\\" issue\\n    // https://github.com/ant-design/ant-design/issues/6577\\n    if (uiTextNode.getAttribute('wrap')) {\\n        hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\\n    } else {\\n        hiddenTextarea.removeAttribute('wrap');\\n    }\\n    // Copy all CSS properties that have an impact on the height of the content in\\n    // the textbox\\n\\n    var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),\\n        paddingSize = _calculateNodeStyling.paddingSize,\\n        borderSize = _calculateNodeStyling.borderSize,\\n        boxSizing = _calculateNodeStyling.boxSizing,\\n        sizingStyle = _calculateNodeStyling.sizingStyle;\\n    // Need to have the overflow attribute to hide the scrollbar otherwise\\n    // text-lines will not calculated properly as the shadow will technically be\\n    // narrower for content\\n\\n\\n    hiddenTextarea.setAttribute('style', sizingStyle + ';' + HIDDEN_TEXTAREA_STYLE);\\n    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\\n    var minHeight = Number.MIN_SAFE_INTEGER;\\n    var maxHeight = Number.MAX_SAFE_INTEGER;\\n    var height = hiddenTextarea.scrollHeight;\\n    var overflowY = void 0;\\n    if (boxSizing === 'border-box') {\\n        // border-box: add border, since height = content + padding + border\\n        height = height + borderSize;\\n    } else if (boxSizing === 'content-box') {\\n        // remove padding, since height = content\\n        height = height - paddingSize;\\n    }\\n    if (minRows !== null || maxRows !== null) {\\n        // measure height of a textarea with a single row\\n        hiddenTextarea.value = ' ';\\n        var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\\n        if (minRows !== null) {\\n            minHeight = singleRowHeight * minRows;\\n            if (boxSizing === 'border-box') {\\n                minHeight = minHeight + paddingSize + borderSize;\\n            }\\n            height = Math.max(minHeight, height);\\n        }\\n        if (maxRows !== null) {\\n            maxHeight = singleRowHeight * maxRows;\\n            if (boxSizing === 'border-box') {\\n                maxHeight = maxHeight + paddingSize + borderSize;\\n            }\\n            overflowY = height > maxHeight ? '' : 'hidden';\\n            height = Math.min(maxHeight, height);\\n        }\\n    }\\n    // Remove scroll bar flash when autosize without maxRows\\n    if (!maxRows) {\\n        overflowY = 'hidden';\\n    }\\n    return { height: height, minHeight: minHeight, maxHeight: maxHeight, overflowY: overflowY };\\n}\\nmodule.exports = exports['default'];\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"calculateNodeStyling\",\"node\",\"useCache\",\"arguments\",\"length\",\"undefined\",\"nodeRef\",\"getAttribute\",\"computedStyleCache\",\"style\",\"window\",\"getComputedStyle\",\"boxSizing\",\"getPropertyValue\",\"paddingSize\",\"parseFloat\",\"borderSize\",\"nodeInfo\",\"sizingStyle\",\"SIZING_STYLE\",\"map\",\"name\",\"join\",\"Object\",\"defineProperty\",\"value\",\"calculateNodeHeight\",\"uiTextNode\",\"minRows\",\"maxRows\",\"hiddenTextarea\",\"document\",\"createElement\",\"body\",\"appendChild\",\"setAttribute\",\"removeAttribute\",\"_calculateNodeStyling\",\"HIDDEN_TEXTAREA_STYLE\",\"placeholder\",\"minHeight\",\"Number\",\"MIN_SAFE_INTEGER\",\"maxHeight\",\"MAX_SAFE_INTEGER\",\"height\",\"scrollHeight\",\"overflowY\",\"singleRowHeight\",\"Math\",\"max\",\"min\"]\n}\n"]