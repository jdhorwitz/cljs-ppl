["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/UnicodeUtils.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$UnicodeUtils=function(global,process,require,module,exports,shadow$shims){function isCodeUnitInSurrogateRange(codeUnit){return 55296<=codeUnit&&57343>=codeUnit}function hasSurrogateUnit(str){return SURROGATE_UNITS_REGEX.test(str)}function getUTF16Length(str,pos){return 1+isCodeUnitInSurrogateRange(str.charCodeAt(pos))}function substr(str,start,length){start=start||0;length=void 0===length?Infinity:length||0;if(!hasSurrogateUnit(str))return str.substr(start,\nlength);var size=str.length;if(0>=size||start>size||0>=length)return\"\";var posA=0;if(0<start){for(;0<start&&posA<size;start--)posA+=getUTF16Length(str,posA);if(posA>=size)return\"\"}else if(0>start){for(posA=size;0>start&&0<posA;start++)posA-=getUTF16Length(str,posA-1);0>posA&&(posA=0)}start=size;if(length<size)for(start=posA;0<length&&start<size;length--)start+=getUTF16Length(str,start);return str.substring(posA,start)}var invariant=require(\"module$node_modules$fbjs$lib$invariant\"),SURROGATE_UNITS_REGEX=\n/[\\uD800-\\uDFFF]/;module.exports={getCodePoints:function(str){for(var codePoints=[],pos=0;pos<str.length;pos+=getUTF16Length(str,pos))codePoints.push(str.codePointAt(pos));return codePoints},getUTF16Length:getUTF16Length,hasSurrogateUnit:hasSurrogateUnit,isCodeUnitInSurrogateRange:isCodeUnitInSurrogateRange,isSurrogatePair:function(str,index){0<=index&&index<str.length?void 0:invariant(!1,\"isSurrogatePair: Invalid index %s for string length %s.\",index,str.length);if(index+1===str.length)return!1;\nvar first=str.charCodeAt(index);str=str.charCodeAt(index+1);return 55296<=first&&56319>=first&&56320<=str&&57343>=str},strlen:function(str){if(!hasSurrogateUnit(str))return str.length;for(var len=0,pos=0;pos<str.length;pos+=getUTF16Length(str,pos))len++;return len},substring:function(str,start,end){start=start||0;end=void 0===end?Infinity:end||0;0>start&&(start=0);0>end&&(end=0);return substr(str,start<end?start:end,Math.abs(end-start))},substr:substr}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$UnicodeUtils\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/**\n * Unicode-enabled replacesments for basic String functions.\n *\n * All the functions in this module assume that the input string is a valid\n * UTF-16 encoding of a Unicode sequence. If it's not the case, the behavior\n * will be undefined.\n *\n * WARNING: Since this module is typechecks-enforced, you may find new bugs\n * when replacing normal String functions with ones provided here.\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n// These two ranges are consecutive so anything in [HIGH_START, LOW_END] is a\n// surrogate code unit.\nvar SURROGATE_HIGH_START = 0xD800;\nvar SURROGATE_HIGH_END = 0xDBFF;\nvar SURROGATE_LOW_START = 0xDC00;\nvar SURROGATE_LOW_END = 0xDFFF;\nvar SURROGATE_UNITS_REGEX = /[\\uD800-\\uDFFF]/;\n\n/**\n * @param {number} codeUnit   A Unicode code-unit, in range [0, 0x10FFFF]\n * @return {boolean}          Whether code-unit is in a surrogate (hi/low) range\n */\nfunction isCodeUnitInSurrogateRange(codeUnit) {\n  return SURROGATE_HIGH_START <= codeUnit && codeUnit <= SURROGATE_LOW_END;\n}\n\n/**\n * Returns whether the two characters starting at `index` form a surrogate pair.\n * For example, given the string s = \"\\uD83D\\uDE0A\", (s, 0) returns true and\n * (s, 1) returns false.\n *\n * @param {string} str\n * @param {number} index\n * @return {boolean}\n */\nfunction isSurrogatePair(str, index) {\n  !(0 <= index && index < str.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isSurrogatePair: Invalid index %s for string length %s.', index, str.length) : invariant(false) : void 0;\n  if (index + 1 === str.length) {\n    return false;\n  }\n  var first = str.charCodeAt(index);\n  var second = str.charCodeAt(index + 1);\n  return SURROGATE_HIGH_START <= first && first <= SURROGATE_HIGH_END && SURROGATE_LOW_START <= second && second <= SURROGATE_LOW_END;\n}\n\n/**\n * @param {string} str  Non-empty string\n * @return {boolean}    True if the input includes any surrogate code units\n */\nfunction hasSurrogateUnit(str) {\n  return SURROGATE_UNITS_REGEX.test(str);\n}\n\n/**\n * Return the length of the original Unicode character at given position in the\n * String by looking into the UTF-16 code unit; that is equal to 1 for any\n * non-surrogate characters in BMP ([U+0000..U+D7FF] and [U+E000, U+FFFF]); and\n * returns 2 for the hi/low surrogates ([U+D800..U+DFFF]), which are in fact\n * representing non-BMP characters ([U+10000..U+10FFFF]).\n *\n * Examples:\n * - '\\u0020' => 1\n * - '\\u3020' => 1\n * - '\\uD835' => 2\n * - '\\uD835\\uDDEF' => 2\n * - '\\uDDEF' => 2\n *\n * @param {string} str  Non-empty string\n * @param {number} pos  Position in the string to look for one code unit\n * @return {number}      Number 1 or 2\n */\nfunction getUTF16Length(str, pos) {\n  return 1 + isCodeUnitInSurrogateRange(str.charCodeAt(pos));\n}\n\n/**\n * Fully Unicode-enabled replacement for String#length\n *\n * @param {string} str  Valid Unicode string\n * @return {number}     The number of Unicode characters in the string\n */\nfunction strlen(str) {\n  // Call the native functions if there's no surrogate char\n  if (!hasSurrogateUnit(str)) {\n    return str.length;\n  }\n\n  var len = 0;\n  for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) {\n    len++;\n  }\n  return len;\n}\n\n/**\n * Fully Unicode-enabled replacement for String#substr()\n *\n * @param {string} str      Valid Unicode string\n * @param {number} start    Location in Unicode sequence to begin extracting\n * @param {?number} length  The number of Unicode characters to extract\n *                          (default: to the end of the string)\n * @return {string}         Extracted sub-string\n */\nfunction substr(str, start, length) {\n  start = start || 0;\n  length = length === undefined ? Infinity : length || 0;\n\n  // Call the native functions if there's no surrogate char\n  if (!hasSurrogateUnit(str)) {\n    return str.substr(start, length);\n  }\n\n  // Obvious cases\n  var size = str.length;\n  if (size <= 0 || start > size || length <= 0) {\n    return '';\n  }\n\n  // Find the actual starting position\n  var posA = 0;\n  if (start > 0) {\n    for (; start > 0 && posA < size; start--) {\n      posA += getUTF16Length(str, posA);\n    }\n    if (posA >= size) {\n      return '';\n    }\n  } else if (start < 0) {\n    for (posA = size; start < 0 && 0 < posA; start++) {\n      posA -= getUTF16Length(str, posA - 1);\n    }\n    if (posA < 0) {\n      posA = 0;\n    }\n  }\n\n  // Find the actual ending position\n  var posB = size;\n  if (length < size) {\n    for (posB = posA; length > 0 && posB < size; length--) {\n      posB += getUTF16Length(str, posB);\n    }\n  }\n\n  return str.substring(posA, posB);\n}\n\n/**\n * Fully Unicode-enabled replacement for String#substring()\n *\n * @param {string} str    Valid Unicode string\n * @param {number} start  Location in Unicode sequence to begin extracting\n * @param {?number} end   Location in Unicode sequence to end extracting\n *                        (default: end of the string)\n * @return {string}       Extracted sub-string\n */\nfunction substring(str, start, end) {\n  start = start || 0;\n  end = end === undefined ? Infinity : end || 0;\n\n  if (start < 0) {\n    start = 0;\n  }\n  if (end < 0) {\n    end = 0;\n  }\n\n  var length = Math.abs(end - start);\n  start = start < end ? start : end;\n  return substr(str, start, length);\n}\n\n/**\n * Get a list of Unicode code-points from a String\n *\n * @param {string} str        Valid Unicode string\n * @return {array<number>}    A list of code-points in [0..0x10FFFF]\n */\nfunction getCodePoints(str) {\n  var codePoints = [];\n  for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) {\n    codePoints.push(str.codePointAt(pos));\n  }\n  return codePoints;\n}\n\nvar UnicodeUtils = {\n  getCodePoints: getCodePoints,\n  getUTF16Length: getUTF16Length,\n  hasSurrogateUnit: hasSurrogateUnit,\n  isCodeUnitInSurrogateRange: isCodeUnitInSurrogateRange,\n  isSurrogatePair: isSurrogatePair,\n  strlen: strlen,\n  substring: substring,\n  substr: substr\n};\n\nmodule.exports = UnicodeUtils;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant"]],"~:properties",["^5",["hasSurrogateUnit","strlen","getCodePoints","getUTF16Length","substring","substr","isSurrogatePair","isCodeUnitInSurrogateRange"]],"~:compiled-at",1532351402145,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$UnicodeUtils.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/fbjs/lib/UnicodeUtils.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$UnicodeUtils\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n * @typechecks\\n */\\n\\n/**\\n * Unicode-enabled replacesments for basic String functions.\\n *\\n * All the functions in this module assume that the input string is a valid\\n * UTF-16 encoding of a Unicode sequence. If it's not the case, the behavior\\n * will be undefined.\\n *\\n * WARNING: Since this module is typechecks-enforced, you may find new bugs\\n * when replacing normal String functions with ones provided here.\\n */\\n\\n'use strict';\\n\\nvar invariant = require('./invariant');\\n\\n// These two ranges are consecutive so anything in [HIGH_START, LOW_END] is a\\n// surrogate code unit.\\nvar SURROGATE_HIGH_START = 0xD800;\\nvar SURROGATE_HIGH_END = 0xDBFF;\\nvar SURROGATE_LOW_START = 0xDC00;\\nvar SURROGATE_LOW_END = 0xDFFF;\\nvar SURROGATE_UNITS_REGEX = /[\\\\uD800-\\\\uDFFF]/;\\n\\n/**\\n * @param {number} codeUnit   A Unicode code-unit, in range [0, 0x10FFFF]\\n * @return {boolean}          Whether code-unit is in a surrogate (hi/low) range\\n */\\nfunction isCodeUnitInSurrogateRange(codeUnit) {\\n  return SURROGATE_HIGH_START <= codeUnit && codeUnit <= SURROGATE_LOW_END;\\n}\\n\\n/**\\n * Returns whether the two characters starting at `index` form a surrogate pair.\\n * For example, given the string s = \\\"\\\\uD83D\\\\uDE0A\\\", (s, 0) returns true and\\n * (s, 1) returns false.\\n *\\n * @param {string} str\\n * @param {number} index\\n * @return {boolean}\\n */\\nfunction isSurrogatePair(str, index) {\\n  !(0 <= index && index < str.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isSurrogatePair: Invalid index %s for string length %s.', index, str.length) : invariant(false) : void 0;\\n  if (index + 1 === str.length) {\\n    return false;\\n  }\\n  var first = str.charCodeAt(index);\\n  var second = str.charCodeAt(index + 1);\\n  return SURROGATE_HIGH_START <= first && first <= SURROGATE_HIGH_END && SURROGATE_LOW_START <= second && second <= SURROGATE_LOW_END;\\n}\\n\\n/**\\n * @param {string} str  Non-empty string\\n * @return {boolean}    True if the input includes any surrogate code units\\n */\\nfunction hasSurrogateUnit(str) {\\n  return SURROGATE_UNITS_REGEX.test(str);\\n}\\n\\n/**\\n * Return the length of the original Unicode character at given position in the\\n * String by looking into the UTF-16 code unit; that is equal to 1 for any\\n * non-surrogate characters in BMP ([U+0000..U+D7FF] and [U+E000, U+FFFF]); and\\n * returns 2 for the hi/low surrogates ([U+D800..U+DFFF]), which are in fact\\n * representing non-BMP characters ([U+10000..U+10FFFF]).\\n *\\n * Examples:\\n * - '\\\\u0020' => 1\\n * - '\\\\u3020' => 1\\n * - '\\\\uD835' => 2\\n * - '\\\\uD835\\\\uDDEF' => 2\\n * - '\\\\uDDEF' => 2\\n *\\n * @param {string} str  Non-empty string\\n * @param {number} pos  Position in the string to look for one code unit\\n * @return {number}      Number 1 or 2\\n */\\nfunction getUTF16Length(str, pos) {\\n  return 1 + isCodeUnitInSurrogateRange(str.charCodeAt(pos));\\n}\\n\\n/**\\n * Fully Unicode-enabled replacement for String#length\\n *\\n * @param {string} str  Valid Unicode string\\n * @return {number}     The number of Unicode characters in the string\\n */\\nfunction strlen(str) {\\n  // Call the native functions if there's no surrogate char\\n  if (!hasSurrogateUnit(str)) {\\n    return str.length;\\n  }\\n\\n  var len = 0;\\n  for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) {\\n    len++;\\n  }\\n  return len;\\n}\\n\\n/**\\n * Fully Unicode-enabled replacement for String#substr()\\n *\\n * @param {string} str      Valid Unicode string\\n * @param {number} start    Location in Unicode sequence to begin extracting\\n * @param {?number} length  The number of Unicode characters to extract\\n *                          (default: to the end of the string)\\n * @return {string}         Extracted sub-string\\n */\\nfunction substr(str, start, length) {\\n  start = start || 0;\\n  length = length === undefined ? Infinity : length || 0;\\n\\n  // Call the native functions if there's no surrogate char\\n  if (!hasSurrogateUnit(str)) {\\n    return str.substr(start, length);\\n  }\\n\\n  // Obvious cases\\n  var size = str.length;\\n  if (size <= 0 || start > size || length <= 0) {\\n    return '';\\n  }\\n\\n  // Find the actual starting position\\n  var posA = 0;\\n  if (start > 0) {\\n    for (; start > 0 && posA < size; start--) {\\n      posA += getUTF16Length(str, posA);\\n    }\\n    if (posA >= size) {\\n      return '';\\n    }\\n  } else if (start < 0) {\\n    for (posA = size; start < 0 && 0 < posA; start++) {\\n      posA -= getUTF16Length(str, posA - 1);\\n    }\\n    if (posA < 0) {\\n      posA = 0;\\n    }\\n  }\\n\\n  // Find the actual ending position\\n  var posB = size;\\n  if (length < size) {\\n    for (posB = posA; length > 0 && posB < size; length--) {\\n      posB += getUTF16Length(str, posB);\\n    }\\n  }\\n\\n  return str.substring(posA, posB);\\n}\\n\\n/**\\n * Fully Unicode-enabled replacement for String#substring()\\n *\\n * @param {string} str    Valid Unicode string\\n * @param {number} start  Location in Unicode sequence to begin extracting\\n * @param {?number} end   Location in Unicode sequence to end extracting\\n *                        (default: end of the string)\\n * @return {string}       Extracted sub-string\\n */\\nfunction substring(str, start, end) {\\n  start = start || 0;\\n  end = end === undefined ? Infinity : end || 0;\\n\\n  if (start < 0) {\\n    start = 0;\\n  }\\n  if (end < 0) {\\n    end = 0;\\n  }\\n\\n  var length = Math.abs(end - start);\\n  start = start < end ? start : end;\\n  return substr(str, start, length);\\n}\\n\\n/**\\n * Get a list of Unicode code-points from a String\\n *\\n * @param {string} str        Valid Unicode string\\n * @return {array<number>}    A list of code-points in [0..0x10FFFF]\\n */\\nfunction getCodePoints(str) {\\n  var codePoints = [];\\n  for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) {\\n    codePoints.push(str.codePointAt(pos));\\n  }\\n  return codePoints;\\n}\\n\\nvar UnicodeUtils = {\\n  getCodePoints: getCodePoints,\\n  getUTF16Length: getUTF16Length,\\n  hasSurrogateUnit: hasSurrogateUnit,\\n  isCodeUnitInSurrogateRange: isCodeUnitInSurrogateRange,\\n  isSurrogatePair: isSurrogatePair,\\n  strlen: strlen,\\n  substring: substring,\\n  substr: substr\\n};\\n\\nmodule.exports = UnicodeUtils;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"isCodeUnitInSurrogateRange\",\"codeUnit\",\"SURROGATE_HIGH_START\",\"SURROGATE_LOW_END\",\"hasSurrogateUnit\",\"str\",\"SURROGATE_UNITS_REGEX\",\"test\",\"getUTF16Length\",\"pos\",\"charCodeAt\",\"substr\",\"start\",\"length\",\"undefined\",\"Infinity\",\"size\",\"posA\",\"posB\",\"substring\",\"invariant\",\"UnicodeUtils\",\"getCodePoints\",\"codePoints\",\"push\",\"codePointAt\",\"isSurrogatePair\",\"index\",\"first\",\"second\",\"SURROGATE_HIGH_END\",\"SURROGATE_LOW_START\",\"strlen\",\"len\",\"end\",\"Math\",\"abs\"]\n}\n"]