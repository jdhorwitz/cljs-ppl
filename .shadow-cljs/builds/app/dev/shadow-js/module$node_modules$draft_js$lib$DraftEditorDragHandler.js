["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/DraftEditorDragHandler.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$DraftEditorDragHandler=function(global,process,require,module,exports,shadow$shims){function getSelectionForEvent(event,editorState){if(\"function\"===typeof document.caretRangeFromPoint){event=document.caretRangeFromPoint(event.x,event.y);var node=event.startContainer;event=event.startOffset}else if(event.rangeParent)node=event.rangeParent,event=event.rangeOffset;else return null;node=nullthrows(node);event=nullthrows(event);node=nullthrows(findAncestorOffsetKey(node));\nreturn getUpdatedSelectionState(editorState,node,event,node,event)}function moveText(editorState,targetSelection){targetSelection=DraftModifier.moveText(editorState.getCurrentContent(),editorState.getSelection(),targetSelection);return EditorState.push(editorState,targetSelection,\"insert-fragment\")}function insertTextAtSelection(editorState,selection,text){selection=DraftModifier.insertText(editorState.getCurrentContent(),selection,text,editorState.getCurrentInlineStyle());return EditorState.push(editorState,\nselection,\"insert-fragment\")}var DataTransfer=require(\"module$node_modules$fbjs$lib$DataTransfer\"),DraftModifier=require(\"module$node_modules$draft_js$lib$DraftModifier\"),EditorState=require(\"module$node_modules$draft_js$lib$EditorState\"),findAncestorOffsetKey=require(\"module$node_modules$draft_js$lib$findAncestorOffsetKey\"),getTextContentFromFiles=require(\"module$node_modules$draft_js$lib$getTextContentFromFiles\"),getUpdatedSelectionState=require(\"module$node_modules$draft_js$lib$getUpdatedSelectionState\"),\nisEventHandled=require(\"module$node_modules$draft_js$lib$isEventHandled\"),nullthrows=require(\"module$node_modules$fbjs$lib$nullthrows\");module.exports={onDragEnd:function(editor){editor.exitCurrentMode()},onDrop:function(editor,e){var data=new DataTransfer(e.nativeEvent.dataTransfer),editorState=editor._latestEditorState,dropSelection=getSelectionForEvent(e.nativeEvent,editorState);e.preventDefault();editor.exitCurrentMode();null!=dropSelection&&(e=data.getFiles(),0<e.length?editor.props.handleDroppedFiles&&\nisEventHandled(editor.props.handleDroppedFiles(dropSelection,e))||getTextContentFromFiles(e,function(fileText){fileText&&editor.update(insertTextAtSelection(editorState,dropSelection,fileText))}):(e=editor._internalDrag?\"internal\":\"external\",editor.props.handleDrop&&isEventHandled(editor.props.handleDrop(dropSelection,data,e))||(editor._internalDrag?editor.update(moveText(editorState,dropSelection)):editor.update(insertTextAtSelection(editorState,dropSelection,data.getText())))))}}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$DraftEditorDragHandler\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEditorDragHandler\n * @format\n * \n */\n\n'use strict';\n\nvar DataTransfer = require('fbjs/lib/DataTransfer');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\n\nvar findAncestorOffsetKey = require('./findAncestorOffsetKey');\nvar getTextContentFromFiles = require('./getTextContentFromFiles');\nvar getUpdatedSelectionState = require('./getUpdatedSelectionState');\nvar isEventHandled = require('./isEventHandled');\nvar nullthrows = require('fbjs/lib/nullthrows');\n\n/**\n * Get a SelectionState for the supplied mouse event.\n */\nfunction getSelectionForEvent(event, editorState) {\n  var node = null;\n  var offset = null;\n\n  if (typeof document.caretRangeFromPoint === 'function') {\n    var dropRange = document.caretRangeFromPoint(event.x, event.y);\n    node = dropRange.startContainer;\n    offset = dropRange.startOffset;\n  } else if (event.rangeParent) {\n    node = event.rangeParent;\n    offset = event.rangeOffset;\n  } else {\n    return null;\n  }\n\n  node = nullthrows(node);\n  offset = nullthrows(offset);\n  var offsetKey = nullthrows(findAncestorOffsetKey(node));\n\n  return getUpdatedSelectionState(editorState, offsetKey, offset, offsetKey, offset);\n}\n\nvar DraftEditorDragHandler = {\n  /**\n   * Drag originating from input terminated.\n   */\n  onDragEnd: function onDragEnd(editor) {\n    editor.exitCurrentMode();\n  },\n\n  /**\n   * Handle data being dropped.\n   */\n  onDrop: function onDrop(editor, e) {\n    var data = new DataTransfer(e.nativeEvent.dataTransfer);\n\n    var editorState = editor._latestEditorState;\n    var dropSelection = getSelectionForEvent(e.nativeEvent, editorState);\n\n    e.preventDefault();\n    editor.exitCurrentMode();\n\n    if (dropSelection == null) {\n      return;\n    }\n\n    var files = data.getFiles();\n    if (files.length > 0) {\n      if (editor.props.handleDroppedFiles && isEventHandled(editor.props.handleDroppedFiles(dropSelection, files))) {\n        return;\n      }\n\n      getTextContentFromFiles(files, function (fileText) {\n        fileText && editor.update(insertTextAtSelection(editorState, dropSelection, fileText));\n      });\n      return;\n    }\n\n    var dragType = editor._internalDrag ? 'internal' : 'external';\n    if (editor.props.handleDrop && isEventHandled(editor.props.handleDrop(dropSelection, data, dragType))) {\n      return;\n    }\n\n    if (editor._internalDrag) {\n      editor.update(moveText(editorState, dropSelection));\n      return;\n    }\n\n    editor.update(insertTextAtSelection(editorState, dropSelection, data.getText()));\n  }\n};\n\nfunction moveText(editorState, targetSelection) {\n  var newContentState = DraftModifier.moveText(editorState.getCurrentContent(), editorState.getSelection(), targetSelection);\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\n}\n\n/**\n * Insert text at a specified selection.\n */\nfunction insertTextAtSelection(editorState, selection, text) {\n  var newContentState = DraftModifier.insertText(editorState.getCurrentContent(), selection, text, editorState.getCurrentInlineStyle());\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\n}\n\nmodule.exports = DraftEditorDragHandler;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$nullthrows","~$module$node_modules$draft_js$lib$isEventHandled","~$shadow.js","~$module$node_modules$draft_js$lib$DraftModifier","~$module$node_modules$draft_js$lib$getUpdatedSelectionState","~$module$node_modules$draft_js$lib$EditorState","~$module$node_modules$draft_js$lib$findAncestorOffsetKey","~$module$node_modules$draft_js$lib$getTextContentFromFiles","~$module$node_modules$fbjs$lib$DataTransfer"]],"~:properties",["^5",["onDrop","onDragEnd"]],"~:compiled-at",1532351402143,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$DraftEditorDragHandler.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/DraftEditorDragHandler.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$DraftEditorDragHandler\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule DraftEditorDragHandler\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar DataTransfer = require('fbjs/lib/DataTransfer');\\nvar DraftModifier = require('./DraftModifier');\\nvar EditorState = require('./EditorState');\\n\\nvar findAncestorOffsetKey = require('./findAncestorOffsetKey');\\nvar getTextContentFromFiles = require('./getTextContentFromFiles');\\nvar getUpdatedSelectionState = require('./getUpdatedSelectionState');\\nvar isEventHandled = require('./isEventHandled');\\nvar nullthrows = require('fbjs/lib/nullthrows');\\n\\n/**\\n * Get a SelectionState for the supplied mouse event.\\n */\\nfunction getSelectionForEvent(event, editorState) {\\n  var node = null;\\n  var offset = null;\\n\\n  if (typeof document.caretRangeFromPoint === 'function') {\\n    var dropRange = document.caretRangeFromPoint(event.x, event.y);\\n    node = dropRange.startContainer;\\n    offset = dropRange.startOffset;\\n  } else if (event.rangeParent) {\\n    node = event.rangeParent;\\n    offset = event.rangeOffset;\\n  } else {\\n    return null;\\n  }\\n\\n  node = nullthrows(node);\\n  offset = nullthrows(offset);\\n  var offsetKey = nullthrows(findAncestorOffsetKey(node));\\n\\n  return getUpdatedSelectionState(editorState, offsetKey, offset, offsetKey, offset);\\n}\\n\\nvar DraftEditorDragHandler = {\\n  /**\\n   * Drag originating from input terminated.\\n   */\\n  onDragEnd: function onDragEnd(editor) {\\n    editor.exitCurrentMode();\\n  },\\n\\n  /**\\n   * Handle data being dropped.\\n   */\\n  onDrop: function onDrop(editor, e) {\\n    var data = new DataTransfer(e.nativeEvent.dataTransfer);\\n\\n    var editorState = editor._latestEditorState;\\n    var dropSelection = getSelectionForEvent(e.nativeEvent, editorState);\\n\\n    e.preventDefault();\\n    editor.exitCurrentMode();\\n\\n    if (dropSelection == null) {\\n      return;\\n    }\\n\\n    var files = data.getFiles();\\n    if (files.length > 0) {\\n      if (editor.props.handleDroppedFiles && isEventHandled(editor.props.handleDroppedFiles(dropSelection, files))) {\\n        return;\\n      }\\n\\n      getTextContentFromFiles(files, function (fileText) {\\n        fileText && editor.update(insertTextAtSelection(editorState, dropSelection, fileText));\\n      });\\n      return;\\n    }\\n\\n    var dragType = editor._internalDrag ? 'internal' : 'external';\\n    if (editor.props.handleDrop && isEventHandled(editor.props.handleDrop(dropSelection, data, dragType))) {\\n      return;\\n    }\\n\\n    if (editor._internalDrag) {\\n      editor.update(moveText(editorState, dropSelection));\\n      return;\\n    }\\n\\n    editor.update(insertTextAtSelection(editorState, dropSelection, data.getText()));\\n  }\\n};\\n\\nfunction moveText(editorState, targetSelection) {\\n  var newContentState = DraftModifier.moveText(editorState.getCurrentContent(), editorState.getSelection(), targetSelection);\\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\\n}\\n\\n/**\\n * Insert text at a specified selection.\\n */\\nfunction insertTextAtSelection(editorState, selection, text) {\\n  var newContentState = DraftModifier.insertText(editorState.getCurrentContent(), selection, text, editorState.getCurrentInlineStyle());\\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\\n}\\n\\nmodule.exports = DraftEditorDragHandler;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getSelectionForEvent\",\"event\",\"editorState\",\"document\",\"caretRangeFromPoint\",\"dropRange\",\"x\",\"y\",\"node\",\"startContainer\",\"offset\",\"startOffset\",\"rangeParent\",\"rangeOffset\",\"nullthrows\",\"offsetKey\",\"findAncestorOffsetKey\",\"getUpdatedSelectionState\",\"moveText\",\"targetSelection\",\"newContentState\",\"DraftModifier\",\"getCurrentContent\",\"getSelection\",\"EditorState\",\"push\",\"insertTextAtSelection\",\"selection\",\"text\",\"insertText\",\"getCurrentInlineStyle\",\"DataTransfer\",\"getTextContentFromFiles\",\"isEventHandled\",\"DraftEditorDragHandler\",\"onDragEnd\",\"editor\",\"exitCurrentMode\",\"onDrop\",\"e\",\"data\",\"nativeEvent\",\"dataTransfer\",\"_latestEditorState\",\"dropSelection\",\"preventDefault\",\"files\",\"getFiles\",\"length\",\"props\",\"handleDroppedFiles\",\"fileText\",\"update\",\"dragType\",\"_internalDrag\",\"handleDrop\",\"getText\"]\n}\n"]