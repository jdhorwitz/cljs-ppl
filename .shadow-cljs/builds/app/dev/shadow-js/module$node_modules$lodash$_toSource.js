["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_toSource.js"],"~:js","shadow$provide.module$node_modules$lodash$_toSource=function(global,process,require,module,exports,shadow$shims){var funcToString=Function.prototype.toString;module.exports=function(func){if(null!=func){try{return funcToString.call(func)}catch(e){}return func+\"\"}return\"\"}}","~:source","shadow$provide[\"module$node_modules$lodash$_toSource\"] = function(global,process,require,module,exports,shadow$shims) {\n/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1532351402005,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_toSource.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,qCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAKtH,IAAIC,aAHYC,QAAAC,UAGGC,SAqBnBN,OAAAC,QAAA,CAZAM,QAAiB,CAACC,IAAD,CAAO,CACtB,GAAY,IAAZ,EAAIA,IAAJ,CAAkB,CAChB,GAAI,CACF,MAAOL,aAAAM,KAAA,CAAkBD,IAAlB,CADL,CAEF,MAAOE,CAAP,CAAU,EAEV,MAAQF,KAAR,CAAe,EALD,CAQlB,MAAO,EATe,CAd8F;\",\n\"sources\":[\"node_modules/lodash/_toSource.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_toSource\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/** Used for built-in method references. */\\nvar funcProto = Function.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar funcToString = funcProto.toString;\\n\\n/**\\n * Converts `func` to its source code.\\n *\\n * @private\\n * @param {Function} func The function to convert.\\n * @returns {string} Returns the source code.\\n */\\nfunction toSource(func) {\\n  if (func != null) {\\n    try {\\n      return funcToString.call(func);\\n    } catch (e) {}\\n    try {\\n      return (func + '');\\n    } catch (e) {}\\n  }\\n  return '';\\n}\\n\\nmodule.exports = toSource;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"funcToString\",\"Function\",\"prototype\",\"toString\",\"toSource\",\"func\",\"call\",\"e\"]\n}\n"]