["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/getEntityKeyForSelection.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$getEntityKeyForSelection=function(global,process,require,module,exports,shadow$shims){function filterKey(entityMap,entityKey){return entityKey?\"MUTABLE\"===entityMap.__get(entityKey).getMutability()?entityKey:null:null}module.exports=function(contentState,targetSelection){if(targetSelection.isCollapsed()){var key=targetSelection.getAnchorKey(),offset=targetSelection.getAnchorOffset();return 0<offset?(targetSelection=contentState.getBlockForKey(key).getEntityAt(offset-\n1),targetSelection!==contentState.getBlockForKey(key).getEntityAt(offset)?null:filterKey(contentState.getEntityMap(),targetSelection)):null}key=targetSelection.getStartKey();targetSelection=targetSelection.getStartOffset();key=contentState.getBlockForKey(key);targetSelection=targetSelection===key.getLength()?null:key.getEntityAt(targetSelection);return filterKey(contentState.getEntityMap(),targetSelection)}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$getEntityKeyForSelection\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEntityKeyForSelection\n * @format\n * \n */\n\n'use strict';\n\n/**\n * Return the entity key that should be used when inserting text for the\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\n * and `SEGMENTED` entities should not be used for insertion behavior.\n */\nfunction getEntityKeyForSelection(contentState, targetSelection) {\n  var entityKey;\n\n  if (targetSelection.isCollapsed()) {\n    var key = targetSelection.getAnchorKey();\n    var offset = targetSelection.getAnchorOffset();\n    if (offset > 0) {\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\n      if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\n        return null;\n      }\n      return filterKey(contentState.getEntityMap(), entityKey);\n    }\n    return null;\n  }\n\n  var startKey = targetSelection.getStartKey();\n  var startOffset = targetSelection.getStartOffset();\n  var startBlock = contentState.getBlockForKey(startKey);\n\n  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\n\n  return filterKey(contentState.getEntityMap(), entityKey);\n}\n\n/**\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\n * return it. If not, return null.\n */\nfunction filterKey(entityMap, entityKey) {\n  if (entityKey) {\n    var entity = entityMap.__get(entityKey);\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\n  }\n  return null;\n}\n\nmodule.exports = getEntityKeyForSelection;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1532351402135,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$getEntityKeyForSelection.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAkD3IC,QAASA,UAAS,CAACC,SAAD,CAAYC,SAAZ,CAAuB,CACvC,MAAIA,UAAJ,CAEoC,SAA3B,GADMD,SAAAE,MAAAC,CAAgBF,SAAhBE,CACNC,cAAA,EAAA,CAAuCH,SAAvC,CAAmD,IAF5D,CAIO,IALgC,CAQzCL,MAAAC,QAAA,CArCAQ,QAAiC,CAACC,YAAD,CAAeC,eAAf,CAAgC,CAG/D,GAAIA,eAAAC,YAAA,EAAJ,CAAmC,CACjC,IAAIC,IAAMF,eAAAG,aAAA,EAAV,CACIC,OAASJ,eAAAK,gBAAA,EACb,OAAa,EAAb,CAAID,MAAJ,EACEV,eACA,CADYK,YAAAO,eAAA,CAA4BJ,GAA5B,CAAAK,YAAA,CAA6CH,MAA7C;AAAsD,CAAtD,CACZ,CAAIV,eAAJ,GAAkBK,YAAAO,eAAA,CAA4BJ,GAA5B,CAAAK,YAAA,CAA6CH,MAA7C,CAAlB,CACS,IADT,CAGOZ,SAAA,CAAUO,YAAAS,aAAA,EAAV,CAAuCd,eAAvC,CALT,EAOO,IAV0B,CAa/Be,GAAAA,CAAWT,eAAAU,YAAA,EACXC,gBAAAA,CAAcX,eAAAY,eAAA,EACdC,IAAAA,CAAad,YAAAO,eAAA,CAA4BG,GAA5B,CAEjBf,gBAAA,CAAYiB,eAAA,GAAgBE,GAAAC,UAAA,EAAhB,CAAyC,IAAzC,CAAgDD,GAAAN,YAAA,CAAuBI,eAAvB,CAE5D,OAAOnB,UAAA,CAAUO,YAAAS,aAAA,EAAV,CAAuCd,eAAvC,CAtBwD,CArB0E;\",\n\"sources\":[\"node_modules/draft-js/lib/getEntityKeyForSelection.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$getEntityKeyForSelection\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule getEntityKeyForSelection\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\n/**\\n * Return the entity key that should be used when inserting text for the\\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\\n * and `SEGMENTED` entities should not be used for insertion behavior.\\n */\\nfunction getEntityKeyForSelection(contentState, targetSelection) {\\n  var entityKey;\\n\\n  if (targetSelection.isCollapsed()) {\\n    var key = targetSelection.getAnchorKey();\\n    var offset = targetSelection.getAnchorOffset();\\n    if (offset > 0) {\\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\\n      if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\\n        return null;\\n      }\\n      return filterKey(contentState.getEntityMap(), entityKey);\\n    }\\n    return null;\\n  }\\n\\n  var startKey = targetSelection.getStartKey();\\n  var startOffset = targetSelection.getStartOffset();\\n  var startBlock = contentState.getBlockForKey(startKey);\\n\\n  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\\n\\n  return filterKey(contentState.getEntityMap(), entityKey);\\n}\\n\\n/**\\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\\n * return it. If not, return null.\\n */\\nfunction filterKey(entityMap, entityKey) {\\n  if (entityKey) {\\n    var entity = entityMap.__get(entityKey);\\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\\n  }\\n  return null;\\n}\\n\\nmodule.exports = getEntityKeyForSelection;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"filterKey\",\"entityMap\",\"entityKey\",\"__get\",\"entity\",\"getMutability\",\"getEntityKeyForSelection\",\"contentState\",\"targetSelection\",\"isCollapsed\",\"key\",\"getAnchorKey\",\"offset\",\"getAnchorOffset\",\"getBlockForKey\",\"getEntityAt\",\"getEntityMap\",\"startKey\",\"getStartKey\",\"startOffset\",\"getStartOffset\",\"startBlock\",\"getLength\"]\n}\n"]