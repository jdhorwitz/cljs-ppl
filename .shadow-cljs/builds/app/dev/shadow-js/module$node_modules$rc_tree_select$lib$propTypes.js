["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/rc-tree-select/lib/propTypes.js"],"~:js","shadow$provide.module$node_modules$rc_tree_select$lib$propTypes=function(global,process,require,module,exports,shadow$shims){function genArrProps(propType){return _propTypes2[\"default\"].oneOfType([propType,_propTypes2[\"default\"].arrayOf(propType)])}exports.__esModule=!0;exports.genArrProps=genArrProps;exports.valueProp=function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];_len=args[0];_key=args[1];var Component=args[2];return(0,_util.isLabelInValue)(_len)?\ngenArrProps(_propTypes2[\"default\"].shape({label:_propTypes2[\"default\"].node,value:_propTypes2[\"default\"].string})).apply(void 0,args)?Error(\"Invalid prop `\"+_key+\"` supplied to `\"+Component+\"`. You should use { label: string, value: string } or [{ label: string, value: string }] instead.\"):null:genArrProps(_propTypes2[\"default\"].string).apply(void 0,args)?Error(\"Invalid prop `\"+_key+\"` supplied to `\"+Component+\"`. You should use string or [string] instead.\"):null};var _propTypes2=(global=require(\"module$node_modules$prop_types$index\"))&&\nglobal.__esModule?global:{\"default\":global},_util=require(\"module$node_modules$rc_tree_select$lib$util\")}","~:source","shadow$provide[\"module$node_modules$rc_tree_select$lib$propTypes\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nexports.__esModule = true;\nexports.genArrProps = genArrProps;\nexports.valueProp = valueProp;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction genArrProps(propType) {\n  return _propTypes2['default'].oneOfType([propType, _propTypes2['default'].arrayOf(propType)]);\n}\n\n/**\n * Origin code check `multiple` is true when `treeCheckStrictly` & `labelInValue`.\n * But in process logic is already cover to array.\n * Check array is not necessary. Let's simplify this check logic.\n */\nfunction valueProp() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var props = args[0],\n      propName = args[1],\n      Component = args[2];\n\n\n  if ((0, _util.isLabelInValue)(props)) {\n    var _err = genArrProps(_propTypes2['default'].shape({\n      label: _propTypes2['default'].node,\n      value: _propTypes2['default'].string\n    })).apply(undefined, args);\n    if (_err) {\n      return new Error('Invalid prop `' + propName + '` supplied to `' + Component + '`. ' + 'You should use { label: string, value: string } or [{ label: string, value: string }] instead.');\n    }\n    return null;\n  }\n\n  var err = genArrProps(_propTypes2['default'].string).apply(undefined, args);\n  if (err) {\n    return new Error('Invalid prop `' + propName + '` supplied to `' + Component + '`. ' + 'You should use string or [string] instead.');\n  }\n  return null;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$prop_types$index","~$shadow.js","~$module$node_modules$rc_tree_select$lib$util"]],"~:properties",["^5",["label","__esModule","value","valueProp","genArrProps","default"]],"~:compiled-at",1532351402110,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$rc_tree_select$lib$propTypes.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,iDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAelIC,QAASA,YAAW,CAACC,QAAD,CAAW,CAC7B,MAAOC,YAAA,CAAY,SAAZ,CAAAC,UAAA,CAAiC,CAACF,QAAD,CAAWC,WAAA,CAAY,SAAZ,CAAAE,QAAA,CAA+BH,QAA/B,CAAX,CAAjC,CADsB,CAZ/BH,OAAAO,WAAA,CAAqB,CAAA,CACrBP,QAAAE,YAAA,CAAsBA,WACtBF,QAAAQ,UAAA,CAmBAA,QAAkB,EAAG,CACnB,IADmB,IACVC,KAAOC,SAAAC,OADG,CACeC,KAAOC,KAAA,CAAMJ,IAAN,CADtB,CACmCK,KAAO,CAA7D,CAAgEA,IAAhE,CAAuEL,IAAvE,CAA6EK,IAAA,EAA7E,CACEF,IAAA,CAAKE,IAAL,CAAA,CAAaJ,SAAA,CAAUI,IAAV,CAGXC,KAAAA,CAAQH,IAAA,CAAK,CAAL,CACRI,KAAAA,CAAWJ,IAAA,CAAK,CAAL,CADf,KAEIK,UAAYL,IAAA,CAAK,CAAL,CAGhB,OAAI,CAAC,CAAA,CAAGM,KAAAC,eAAJ,EAA0BJ,IAA1B,CAAJ;AACab,WAAA,CAAYE,WAAA,CAAY,SAAZ,CAAAgB,MAAA,CAA6B,CAClDC,MAAOjB,WAAA,CAAY,SAAZ,CAAAkB,KAD2C,CAElDC,MAAOnB,WAAA,CAAY,SAAZ,CAAAoB,OAF2C,CAA7B,CAAZ,CAAAC,MAAAC,CAGDC,IAAAA,EAHCD,CAGUd,IAHVc,CAIX,CACaE,KAAJ,CAAU,gBAAV,CAA6BZ,IAA7B,CAAwC,iBAAxC,CAA4DC,SAA5D,CAAgF,mGAAhF,CADT,CAGO,IART,CAWUf,WAAA,CAAYE,WAAA,CAAY,SAAZ,CAAAoB,OAAZ,CAAAC,MAAAI,CAAiDF,IAAAA,EAAjDE,CAA4DjB,IAA5DiB,CACV,CACaD,KAAJ,CAAU,gBAAV,CAA6BZ,IAA7B,CAAwC,iBAAxC,CAA4DC,SAA5D,CAAgF,+CAAhF,CADT,CAGO,IAzBY,CAfrB,KAAIb,YAI0C,CAN1C0B,MAM0C,CAN7BhC,OAAA,CAAQ,sCAAR,CAM6B;AAJLgC,MAIYvB,WAAP,CAJLuB,MAIK,CAA8B,CAAE,UAJrCA,MAImC,CAJ5E,CAEIZ,MAAQpB,OAAA,CAAQ,6CAAR,CAXsH;\",\n\"sources\":[\"node_modules/rc-tree-select/lib/propTypes.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$rc_tree_select$lib$propTypes\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nexports.__esModule = true;\\nexports.genArrProps = genArrProps;\\nexports.valueProp = valueProp;\\n\\nvar _propTypes = require('prop-types');\\n\\nvar _propTypes2 = _interopRequireDefault(_propTypes);\\n\\nvar _util = require('./util');\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\\n\\nfunction genArrProps(propType) {\\n  return _propTypes2['default'].oneOfType([propType, _propTypes2['default'].arrayOf(propType)]);\\n}\\n\\n/**\\n * Origin code check `multiple` is true when `treeCheckStrictly` & `labelInValue`.\\n * But in process logic is already cover to array.\\n * Check array is not necessary. Let's simplify this check logic.\\n */\\nfunction valueProp() {\\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\\n    args[_key] = arguments[_key];\\n  }\\n\\n  var props = args[0],\\n      propName = args[1],\\n      Component = args[2];\\n\\n\\n  if ((0, _util.isLabelInValue)(props)) {\\n    var _err = genArrProps(_propTypes2['default'].shape({\\n      label: _propTypes2['default'].node,\\n      value: _propTypes2['default'].string\\n    })).apply(undefined, args);\\n    if (_err) {\\n      return new Error('Invalid prop `' + propName + '` supplied to `' + Component + '`. ' + 'You should use { label: string, value: string } or [{ label: string, value: string }] instead.');\\n    }\\n    return null;\\n  }\\n\\n  var err = genArrProps(_propTypes2['default'].string).apply(undefined, args);\\n  if (err) {\\n    return new Error('Invalid prop `' + propName + '` supplied to `' + Component + '`. ' + 'You should use string or [string] instead.');\\n  }\\n  return null;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"genArrProps\",\"propType\",\"_propTypes2\",\"oneOfType\",\"arrayOf\",\"__esModule\",\"valueProp\",\"_len\",\"arguments\",\"length\",\"args\",\"Array\",\"_key\",\"props\",\"propName\",\"Component\",\"_util\",\"isLabelInValue\",\"shape\",\"label\",\"node\",\"value\",\"string\",\"apply\",\"_err\",\"undefined\",\"Error\",\"err\",\"_propTypes\"]\n}\n"]