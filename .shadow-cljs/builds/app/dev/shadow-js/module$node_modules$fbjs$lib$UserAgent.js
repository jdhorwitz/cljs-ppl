["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/UserAgent.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$UserAgent=function(global,process,require,module,exports,shadow$shims){function compare(name,version,query,normalizer){if(name===query)return!0;if(!query.startsWith(name))return!1;name=query.slice(name.length);return version?(name=normalizer?normalizer(name):name,VersionRange.contains(name,version)):!1}function normalizePlatformVersion(version){return\"Windows\"===UserAgentData.platformName?version.replace(/^\\s*NT/,\"\"):version}var UserAgentData=require(\"module$node_modules$fbjs$lib$UserAgentData\"),\nVersionRange=require(\"module$node_modules$fbjs$lib$VersionRange\");global=require(\"module$node_modules$fbjs$lib$mapObject\");require=require(\"module$node_modules$fbjs$lib$memoizeStringOnly\");module.exports=global({isBrowser:function(query){return compare(UserAgentData.browserName,UserAgentData.browserFullVersion,query)},isBrowserArchitecture:function(query){return compare(UserAgentData.browserArchitecture,null,query)},isDevice:function(query){return compare(UserAgentData.deviceName,null,query)},isEngine:function(query){return compare(UserAgentData.engineName,\nUserAgentData.engineVersion,query)},isPlatform:function(query){return compare(UserAgentData.platformName,UserAgentData.platformFullVersion,query,normalizePlatformVersion)},isPlatformArchitecture:function(query){return compare(UserAgentData.platformArchitecture,null,query)}},require)}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$UserAgent\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar UserAgentData = require('./UserAgentData');\nvar VersionRange = require('./VersionRange');\n\nvar mapObject = require('./mapObject');\nvar memoizeStringOnly = require('./memoizeStringOnly');\n\n/**\n * Checks to see whether `name` and `version` satisfy `query`.\n *\n * @param {string} name Name of the browser, device, engine or platform\n * @param {?string} version Version of the browser, engine or platform\n * @param {string} query Query of form \"Name [range expression]\"\n * @param {?function} normalizer Optional pre-processor for range expression\n * @return {boolean}\n */\nfunction compare(name, version, query, normalizer) {\n  // check for exact match with no version\n  if (name === query) {\n    return true;\n  }\n\n  // check for non-matching names\n  if (!query.startsWith(name)) {\n    return false;\n  }\n\n  // full comparison with version\n  var range = query.slice(name.length);\n  if (version) {\n    range = normalizer ? normalizer(range) : range;\n    return VersionRange.contains(range, version);\n  }\n\n  return false;\n}\n\n/**\n * Normalizes `version` by stripping any \"NT\" prefix, but only on the Windows\n * platform.\n *\n * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.\n *\n * @param {string} version\n * @return {string}\n */\nfunction normalizePlatformVersion(version) {\n  if (UserAgentData.platformName === 'Windows') {\n    return version.replace(/^\\s*NT/, '');\n  }\n\n  return version;\n}\n\n/**\n * Provides client-side access to the authoritative PHP-generated User Agent\n * information supplied by the server.\n */\nvar UserAgent = {\n  /**\n   * Check if the User Agent browser matches `query`.\n   *\n   * `query` should be a string like \"Chrome\" or \"Chrome > 33\".\n   *\n   * Valid browser names include:\n   *\n   * - ACCESS NetFront\n   * - AOL\n   * - Amazon Silk\n   * - Android\n   * - BlackBerry\n   * - BlackBerry PlayBook\n   * - Chrome\n   * - Chrome for iOS\n   * - Chrome frame\n   * - Facebook PHP SDK\n   * - Facebook for iOS\n   * - Firefox\n   * - IE\n   * - IE Mobile\n   * - Mobile Safari\n   * - Motorola Internet Browser\n   * - Nokia\n   * - Openwave Mobile Browser\n   * - Opera\n   * - Opera Mini\n   * - Opera Mobile\n   * - Safari\n   * - UIWebView\n   * - Unknown\n   * - webOS\n   * - etc...\n   *\n   * An authoritative list can be found in the PHP `BrowserDetector` class and\n   * related classes in the same file (see calls to `new UserAgentBrowser` here:\n   * https://fburl.com/50728104).\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"Name [range expression]\"\n   * @return {boolean}\n   */\n  isBrowser: function isBrowser(query) {\n    return compare(UserAgentData.browserName, UserAgentData.browserFullVersion, query);\n  },\n\n\n  /**\n   * Check if the User Agent browser uses a 32 or 64 bit architecture.\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"32\" or \"64\".\n   * @return {boolean}\n   */\n  isBrowserArchitecture: function isBrowserArchitecture(query) {\n    return compare(UserAgentData.browserArchitecture, null, query);\n  },\n\n\n  /**\n   * Check if the User Agent device matches `query`.\n   *\n   * `query` should be a string like \"iPhone\" or \"iPad\".\n   *\n   * Valid device names include:\n   *\n   * - Kindle\n   * - Kindle Fire\n   * - Unknown\n   * - iPad\n   * - iPhone\n   * - iPod\n   * - etc...\n   *\n   * An authoritative list can be found in the PHP `DeviceDetector` class and\n   * related classes in the same file (see calls to `new UserAgentDevice` here:\n   * https://fburl.com/50728332).\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"Name\"\n   * @return {boolean}\n   */\n  isDevice: function isDevice(query) {\n    return compare(UserAgentData.deviceName, null, query);\n  },\n\n\n  /**\n   * Check if the User Agent rendering engine matches `query`.\n   *\n   * `query` should be a string like \"WebKit\" or \"WebKit >= 537\".\n   *\n   * Valid engine names include:\n   *\n   * - Gecko\n   * - Presto\n   * - Trident\n   * - WebKit\n   * - etc...\n   *\n   * An authoritative list can be found in the PHP `RenderingEngineDetector`\n   * class related classes in the same file (see calls to `new\n   * UserAgentRenderingEngine` here: https://fburl.com/50728617).\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"Name [range expression]\"\n   * @return {boolean}\n   */\n  isEngine: function isEngine(query) {\n    return compare(UserAgentData.engineName, UserAgentData.engineVersion, query);\n  },\n\n\n  /**\n   * Check if the User Agent platform matches `query`.\n   *\n   * `query` should be a string like \"Windows\" or \"iOS 5 - 6\".\n   *\n   * Valid platform names include:\n   *\n   * - Android\n   * - BlackBerry OS\n   * - Java ME\n   * - Linux\n   * - Mac OS X\n   * - Mac OS X Calendar\n   * - Mac OS X Internet Account\n   * - Symbian\n   * - SymbianOS\n   * - Windows\n   * - Windows Mobile\n   * - Windows Phone\n   * - iOS\n   * - iOS Facebook Integration Account\n   * - iOS Facebook Social Sharing UI\n   * - webOS\n   * - Chrome OS\n   * - etc...\n   *\n   * An authoritative list can be found in the PHP `PlatformDetector` class and\n   * related classes in the same file (see calls to `new UserAgentPlatform`\n   * here: https://fburl.com/50729226).\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"Name [range expression]\"\n   * @return {boolean}\n   */\n  isPlatform: function isPlatform(query) {\n    return compare(UserAgentData.platformName, UserAgentData.platformFullVersion, query, normalizePlatformVersion);\n  },\n\n\n  /**\n   * Check if the User Agent platform is a 32 or 64 bit architecture.\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"32\" or \"64\".\n   * @return {boolean}\n   */\n  isPlatformArchitecture: function isPlatformArchitecture(query) {\n    return compare(UserAgentData.platformArchitecture, null, query);\n  }\n};\n\nmodule.exports = mapObject(UserAgent, memoizeStringOnly);\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$mapObject","~$shadow.js","~$module$node_modules$fbjs$lib$memoizeStringOnly","~$module$node_modules$fbjs$lib$UserAgentData","~$module$node_modules$fbjs$lib$VersionRange"]],"~:properties",["^5",["isEngine","isDevice","isPlatform","isBrowserArchitecture","isBrowser","isPlatformArchitecture"]],"~:compiled-at",1532351402138,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$UserAgent.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA0BxHC,QAASA,QAAO,CAACC,IAAD,CAAOC,OAAP,CAAgBC,KAAhB,CAAuBC,UAAvB,CAAmC,CAEjD,GAAIH,IAAJ,GAAaE,KAAb,CACE,MAAO,CAAA,CAIT,IAAI,CAACA,KAAAE,WAAA,CAAiBJ,IAAjB,CAAL,CACE,MAAO,CAAA,CAILK,KAAAA,CAAQH,KAAAI,MAAA,CAAYN,IAAAO,OAAZ,CACZ,OAAIN,QAAJ,EACEI,IACO,CADCF,UAAA,CAAaA,UAAA,CAAWE,IAAX,CAAb,CAAiCA,IAClC,CAAAG,YAAAC,SAAA,CAAsBJ,IAAtB,CAA6BJ,OAA7B,CAFT,EAKO,CAAA,CAlB0C,CA8BnDS,QAASA,yBAAwB,CAACT,OAAD,CAAU,CACzC,MAAmC,SAAnC,GAAIU,aAAAC,aAAJ,CACSX,OAAAY,QAAA,CAAgB,QAAhB,CAA0B,EAA1B,CADT,CAIOZ,OALkC,CA7C3C,IAAIU,cAAgBhB,OAAA,CAAQ,4CAAR,CAApB;AACIa,aAAeb,OAAA,CAAQ,2CAAR,CAEfmB,OAAAA,CAAYnB,OAAA,CAAQ,wCAAR,CACZoB,QAAAA,CAAoBpB,OAAA,CAAQ,gDAAR,CAgOxBC,OAAAC,QAAA,CAAiBiB,MAAA,CA3KDE,CA4CdC,UAAWA,QAAkB,CAACf,KAAD,CAAQ,CACnC,MAAOH,QAAA,CAAQY,aAAAO,YAAR,CAAmCP,aAAAQ,mBAAnC,CAAqEjB,KAArE,CAD4B,CA5CvBc,CAyDdI,sBAAuBA,QAA8B,CAAClB,KAAD,CAAQ,CAC3D,MAAOH,QAAA,CAAQY,aAAAU,oBAAR,CAA2C,IAA3C,CAAiDnB,KAAjD,CADoD,CAzD/Cc,CAsFdM,SAAUA,QAAiB,CAACpB,KAAD,CAAQ,CACjC,MAAOH,QAAA,CAAQY,aAAAY,WAAR,CAAkC,IAAlC,CAAwCrB,KAAxC,CAD0B,CAtFrBc,CAiHdQ,SAAUA,QAAiB,CAACtB,KAAD,CAAQ,CACjC,MAAOH,QAAA,CAAQY,aAAAc,WAAR;AAAkCd,aAAAe,cAAlC,CAA+DxB,KAA/D,CAD0B,CAjHrBc,CAyJdW,WAAYA,QAAmB,CAACzB,KAAD,CAAQ,CACrC,MAAOH,QAAA,CAAQY,aAAAC,aAAR,CAAoCD,aAAAiB,oBAApC,CAAuE1B,KAAvE,CAA8EQ,wBAA9E,CAD8B,CAzJzBM,CAsKda,uBAAwBA,QAA+B,CAAC3B,KAAD,CAAQ,CAC7D,MAAOH,QAAA,CAAQY,aAAAmB,qBAAR,CAA4C,IAA5C,CAAkD5B,KAAlD,CADsD,CAtKjDc,CA2KC,CAAqBD,OAArB,CA/OuG;\",\n\"sources\":[\"node_modules/fbjs/lib/UserAgent.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$UserAgent\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n */\\n\\n'use strict';\\n\\nvar UserAgentData = require('./UserAgentData');\\nvar VersionRange = require('./VersionRange');\\n\\nvar mapObject = require('./mapObject');\\nvar memoizeStringOnly = require('./memoizeStringOnly');\\n\\n/**\\n * Checks to see whether `name` and `version` satisfy `query`.\\n *\\n * @param {string} name Name of the browser, device, engine or platform\\n * @param {?string} version Version of the browser, engine or platform\\n * @param {string} query Query of form \\\"Name [range expression]\\\"\\n * @param {?function} normalizer Optional pre-processor for range expression\\n * @return {boolean}\\n */\\nfunction compare(name, version, query, normalizer) {\\n  // check for exact match with no version\\n  if (name === query) {\\n    return true;\\n  }\\n\\n  // check for non-matching names\\n  if (!query.startsWith(name)) {\\n    return false;\\n  }\\n\\n  // full comparison with version\\n  var range = query.slice(name.length);\\n  if (version) {\\n    range = normalizer ? normalizer(range) : range;\\n    return VersionRange.contains(range, version);\\n  }\\n\\n  return false;\\n}\\n\\n/**\\n * Normalizes `version` by stripping any \\\"NT\\\" prefix, but only on the Windows\\n * platform.\\n *\\n * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.\\n *\\n * @param {string} version\\n * @return {string}\\n */\\nfunction normalizePlatformVersion(version) {\\n  if (UserAgentData.platformName === 'Windows') {\\n    return version.replace(/^\\\\s*NT/, '');\\n  }\\n\\n  return version;\\n}\\n\\n/**\\n * Provides client-side access to the authoritative PHP-generated User Agent\\n * information supplied by the server.\\n */\\nvar UserAgent = {\\n  /**\\n   * Check if the User Agent browser matches `query`.\\n   *\\n   * `query` should be a string like \\\"Chrome\\\" or \\\"Chrome > 33\\\".\\n   *\\n   * Valid browser names include:\\n   *\\n   * - ACCESS NetFront\\n   * - AOL\\n   * - Amazon Silk\\n   * - Android\\n   * - BlackBerry\\n   * - BlackBerry PlayBook\\n   * - Chrome\\n   * - Chrome for iOS\\n   * - Chrome frame\\n   * - Facebook PHP SDK\\n   * - Facebook for iOS\\n   * - Firefox\\n   * - IE\\n   * - IE Mobile\\n   * - Mobile Safari\\n   * - Motorola Internet Browser\\n   * - Nokia\\n   * - Openwave Mobile Browser\\n   * - Opera\\n   * - Opera Mini\\n   * - Opera Mobile\\n   * - Safari\\n   * - UIWebView\\n   * - Unknown\\n   * - webOS\\n   * - etc...\\n   *\\n   * An authoritative list can be found in the PHP `BrowserDetector` class and\\n   * related classes in the same file (see calls to `new UserAgentBrowser` here:\\n   * https://fburl.com/50728104).\\n   *\\n   * @note Function results are memoized\\n   *\\n   * @param {string} query Query of the form \\\"Name [range expression]\\\"\\n   * @return {boolean}\\n   */\\n  isBrowser: function isBrowser(query) {\\n    return compare(UserAgentData.browserName, UserAgentData.browserFullVersion, query);\\n  },\\n\\n\\n  /**\\n   * Check if the User Agent browser uses a 32 or 64 bit architecture.\\n   *\\n   * @note Function results are memoized\\n   *\\n   * @param {string} query Query of the form \\\"32\\\" or \\\"64\\\".\\n   * @return {boolean}\\n   */\\n  isBrowserArchitecture: function isBrowserArchitecture(query) {\\n    return compare(UserAgentData.browserArchitecture, null, query);\\n  },\\n\\n\\n  /**\\n   * Check if the User Agent device matches `query`.\\n   *\\n   * `query` should be a string like \\\"iPhone\\\" or \\\"iPad\\\".\\n   *\\n   * Valid device names include:\\n   *\\n   * - Kindle\\n   * - Kindle Fire\\n   * - Unknown\\n   * - iPad\\n   * - iPhone\\n   * - iPod\\n   * - etc...\\n   *\\n   * An authoritative list can be found in the PHP `DeviceDetector` class and\\n   * related classes in the same file (see calls to `new UserAgentDevice` here:\\n   * https://fburl.com/50728332).\\n   *\\n   * @note Function results are memoized\\n   *\\n   * @param {string} query Query of the form \\\"Name\\\"\\n   * @return {boolean}\\n   */\\n  isDevice: function isDevice(query) {\\n    return compare(UserAgentData.deviceName, null, query);\\n  },\\n\\n\\n  /**\\n   * Check if the User Agent rendering engine matches `query`.\\n   *\\n   * `query` should be a string like \\\"WebKit\\\" or \\\"WebKit >= 537\\\".\\n   *\\n   * Valid engine names include:\\n   *\\n   * - Gecko\\n   * - Presto\\n   * - Trident\\n   * - WebKit\\n   * - etc...\\n   *\\n   * An authoritative list can be found in the PHP `RenderingEngineDetector`\\n   * class related classes in the same file (see calls to `new\\n   * UserAgentRenderingEngine` here: https://fburl.com/50728617).\\n   *\\n   * @note Function results are memoized\\n   *\\n   * @param {string} query Query of the form \\\"Name [range expression]\\\"\\n   * @return {boolean}\\n   */\\n  isEngine: function isEngine(query) {\\n    return compare(UserAgentData.engineName, UserAgentData.engineVersion, query);\\n  },\\n\\n\\n  /**\\n   * Check if the User Agent platform matches `query`.\\n   *\\n   * `query` should be a string like \\\"Windows\\\" or \\\"iOS 5 - 6\\\".\\n   *\\n   * Valid platform names include:\\n   *\\n   * - Android\\n   * - BlackBerry OS\\n   * - Java ME\\n   * - Linux\\n   * - Mac OS X\\n   * - Mac OS X Calendar\\n   * - Mac OS X Internet Account\\n   * - Symbian\\n   * - SymbianOS\\n   * - Windows\\n   * - Windows Mobile\\n   * - Windows Phone\\n   * - iOS\\n   * - iOS Facebook Integration Account\\n   * - iOS Facebook Social Sharing UI\\n   * - webOS\\n   * - Chrome OS\\n   * - etc...\\n   *\\n   * An authoritative list can be found in the PHP `PlatformDetector` class and\\n   * related classes in the same file (see calls to `new UserAgentPlatform`\\n   * here: https://fburl.com/50729226).\\n   *\\n   * @note Function results are memoized\\n   *\\n   * @param {string} query Query of the form \\\"Name [range expression]\\\"\\n   * @return {boolean}\\n   */\\n  isPlatform: function isPlatform(query) {\\n    return compare(UserAgentData.platformName, UserAgentData.platformFullVersion, query, normalizePlatformVersion);\\n  },\\n\\n\\n  /**\\n   * Check if the User Agent platform is a 32 or 64 bit architecture.\\n   *\\n   * @note Function results are memoized\\n   *\\n   * @param {string} query Query of the form \\\"32\\\" or \\\"64\\\".\\n   * @return {boolean}\\n   */\\n  isPlatformArchitecture: function isPlatformArchitecture(query) {\\n    return compare(UserAgentData.platformArchitecture, null, query);\\n  }\\n};\\n\\nmodule.exports = mapObject(UserAgent, memoizeStringOnly);\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"compare\",\"name\",\"version\",\"query\",\"normalizer\",\"startsWith\",\"range\",\"slice\",\"length\",\"VersionRange\",\"contains\",\"normalizePlatformVersion\",\"UserAgentData\",\"platformName\",\"replace\",\"mapObject\",\"memoizeStringOnly\",\"UserAgent\",\"isBrowser\",\"browserName\",\"browserFullVersion\",\"isBrowserArchitecture\",\"browserArchitecture\",\"isDevice\",\"deviceName\",\"isEngine\",\"engineName\",\"engineVersion\",\"isPlatform\",\"platformFullVersion\",\"isPlatformArchitecture\",\"platformArchitecture\"]\n}\n"]