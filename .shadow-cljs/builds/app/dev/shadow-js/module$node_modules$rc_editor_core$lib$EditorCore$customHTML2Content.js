["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/rc-editor-core/lib/EditorCore/customHTML2Content.js"],"~:js","shadow$provide.module$node_modules$rc_editor_core$lib$EditorCore$customHTML2Content=function(global,process,require,module,exports,shadow$shims){exports.__esModule=!0;exports[\"default\"]=function(HTML,contentState){HTML=(new DOMParser).parseFromString(HTML,\"text/html\");(0,_toArray2[\"default\"])(HTML.querySelectorAll(\"img\")).forEach(imgReplacer);var contentBlocks$jscomp$0=(0,_draftJs.convertFromHTML)(HTML.body.innerHTML).contentBlocks;contentBlocks$jscomp$0=contentBlocks$jscomp$0.reduce(function(contentBlocks,\nblock){if(\"blockquote\"!==block.getType())return contentBlocks.concat(block);block=JSON.parse(block.getText());contentState.createEntity(\"IMAGE-ENTITY\",\"IMMUTABLE\",block);block=contentState.getLastCreatedEntityKey();block=_draftJs.CharacterMetadata.create({entity:block});block=[new _draftJs.ContentBlock({key:(0,_draftJs.genKey)(),type:\"image-block\",text:\" \",characterList:(0,_immutable.List)((0,_immutable.Repeat)(block,block.count()))}),new _draftJs.ContentBlock({key:(0,_draftJs.genKey)(),type:\"unstyled\",\ntext:\"\",characterList:(0,_immutable.List)()})];return contentBlocks.concat(block)},[]);HTML=null;return _draftJs.BlockMapBuilder.createFromArray(contentBlocks$jscomp$0)};var _draftJs=require(\"module$node_modules$draft_js$lib$Draft\"),_toArray2=(global=require(\"module$node_modules$lodash$toArray\"))&&global.__esModule?global:{\"default\":global},_immutable=require(\"module$node_modules$immutable$dist$immutable\"),elementToBlockSpecElement=function(){for(var _len=arguments.length,argument=Array(_len),_key=\n0;_key<_len;_key++)argument[_key]=arguments[_key];var args=arguments,start=args.length-1;return function(){for(var i=start,result=args[start].apply(this,arguments);i--;)result=args[i].call(this,result);return result}}(function(blockSpec){if(null==blockSpec)return null;var tempEl=document.createElement(\"blockquote\");tempEl.innerText=JSON.stringify(blockSpec);return tempEl},function(imgElement){return{contentType:\"image\",src:imgElement.getAttribute(\"src\"),width:imgElement.getAttribute(\"width\"),height:imgElement.getAttribute(\"height\"),\nalign:imgElement.style.cssFloat}}),imgReplacer=function(imgElement){var newEl=elementToBlockSpecElement(imgElement);imgElement=newEl instanceof HTMLElement?imgElement.parentNode.replaceChild(newEl,imgElement):void 0;return imgElement};module.exports=exports[\"default\"]}","~:source","shadow$provide[\"module$node_modules$rc_editor_core$lib$EditorCore$customHTML2Content\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nexports.__esModule = true;\nexports['default'] = customHTML2Content;\n\nvar _draftJs = require('draft-js');\n\nvar _toArray = require('lodash/toArray');\n\nvar _toArray2 = _interopRequireDefault(_toArray);\n\nvar _immutable = require('immutable');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction compose() {\n    for (var _len = arguments.length, argument = Array(_len), _key = 0; _key < _len; _key++) {\n        argument[_key] = arguments[_key];\n    }\n\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n        var i = start;\n        var result = args[start].apply(this, arguments);\n        while (i--) {\n            result = args[i].call(this, result);\n        }return result;\n    };\n}\n;\n/*\n * Helpers\n */\n// Prepares img meta data object based on img attributes\nvar getBlockSpecForElement = function getBlockSpecForElement(imgElement) {\n    return {\n        contentType: 'image',\n        src: imgElement.getAttribute('src'),\n        width: imgElement.getAttribute('width'),\n        height: imgElement.getAttribute('height'),\n        align: imgElement.style.cssFloat\n    };\n};\n// Wraps meta data in HTML element which is 'understandable' by Draft, I used <blockquote />.\nvar wrapBlockSpec = function wrapBlockSpec(blockSpec) {\n    if (blockSpec == null) {\n        return null;\n    }\n    var tempEl = document.createElement('blockquote');\n    // stringify meta data and insert it as text content of temp HTML element. We will later extract\n    // and parse it.\n    tempEl.innerText = JSON.stringify(blockSpec);\n    return tempEl;\n};\n// Replaces <img> element with our temp element\nvar replaceElement = function replaceElement(oldEl, newEl) {\n    if (!(newEl instanceof HTMLElement)) {\n        return;\n    }\n    var parentNode = oldEl.parentNode;\n    return parentNode.replaceChild(newEl, oldEl);\n};\nvar elementToBlockSpecElement = compose(wrapBlockSpec, getBlockSpecForElement);\nvar imgReplacer = function imgReplacer(imgElement) {\n    return replaceElement(imgElement, elementToBlockSpecElement(imgElement));\n};\n// creates ContentBlock based on provided spec\nvar createContentBlock = function createContentBlock(blockData, contentState) {\n    var key = blockData.key,\n        type = blockData.type,\n        text = blockData.text,\n        data = blockData.data,\n        inlineStyles = blockData.inlineStyles,\n        entityData = blockData.entityData;\n\n    var blockSpec = {\n        type: type != null ? type : 'unstyled',\n        text: text != null ? text : '',\n        key: key != null ? key : (0, _draftJs.genKey)(),\n        data: null,\n        characterList: (0, _immutable.List)([])\n    };\n    if (data) {\n        blockSpec.data = (0, _immutable.fromJS)(data);\n    }\n    if (inlineStyles || entityData) {\n        var entityKey = void 0;\n        if (entityData) {\n            var _type = entityData.type,\n                mutability = entityData.mutability,\n                _data = entityData.data;\n\n            contentState.createEntity(_type, mutability, _data);\n            entityKey = contentState.getLastCreatedEntityKey();\n        } else {\n            entityKey = null;\n        }\n        var style = (0, _immutable.OrderedSet)(inlineStyles || []);\n        var charData = _draftJs.CharacterMetadata.create({ style: style, entityKey: entityKey });\n        blockSpec.characterList = (0, _immutable.List)((0, _immutable.Repeat)(charData, text.length));\n    }\n    return new _draftJs.ContentBlock(blockSpec);\n};\n// takes HTML string and returns DraftJS ContentState\nfunction customHTML2Content(HTML, contentState) {\n    var tempDoc = new DOMParser().parseFromString(HTML, 'text/html');\n    // replace all <img /> with <blockquote /> elements\n    (0, _toArray2['default'])(tempDoc.querySelectorAll('img')).forEach(imgReplacer);\n    // use DraftJS converter to do initial conversion. I don't provide DOMBuilder and\n    // blockRenderMap arguments here since it should fall back to its default ones, which are fine\n\n    var _convertFromHTML = (0, _draftJs.convertFromHTML)(tempDoc.body.innerHTML),\n        contentBlocks = _convertFromHTML.contentBlocks;\n    // now replace <blockquote /> ContentBlocks with 'atomic' ones\n\n\n    contentBlocks = contentBlocks.reduce(function (contentBlocks, block) {\n        if (block.getType() !== 'blockquote') {\n            return contentBlocks.concat(block);\n        }\n        var image = JSON.parse(block.getText());\n        contentState.createEntity('IMAGE-ENTITY', 'IMMUTABLE', image);\n        var entityKey = contentState.getLastCreatedEntityKey();\n        var charData = _draftJs.CharacterMetadata.create({ entity: entityKey });\n        // const blockSpec = Object.assign({ type: 'atomic', text: ' ' }, { entityData })\n        // const atomicBlock = createContentBlock(blockSpec)\n        // const spacerBlock = createContentBlock({});\n        var fragmentArray = [new _draftJs.ContentBlock({\n            key: (0, _draftJs.genKey)(),\n            type: 'image-block',\n            text: ' ',\n            characterList: (0, _immutable.List)((0, _immutable.Repeat)(charData, charData.count()))\n        }), new _draftJs.ContentBlock({\n            key: (0, _draftJs.genKey)(),\n            type: 'unstyled',\n            text: '',\n            characterList: (0, _immutable.List)()\n        })];\n        return contentBlocks.concat(fragmentArray);\n    }, []);\n    // console.log('>> customHTML2Content contentBlocks', contentBlocks);\n    tempDoc = null;\n    return _draftJs.BlockMapBuilder.createFromArray(contentBlocks);\n}\nmodule.exports = exports['default'];\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$draft_js$lib$Draft","~$shadow.js","~$module$node_modules$immutable$dist$immutable","~$module$node_modules$lodash$toArray"]],"~:properties",["^5",["width","align","height","key","__esModule","src","text","characterList","type","innerText","contentType","entity","default"]],"~:compiled-at",1532351402160,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$rc_editor_core$lib$EditorCore$customHTML2Content.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/rc-editor-core/lib/EditorCore/customHTML2Content.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$rc_editor_core$lib$EditorCore$customHTML2Content\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nexports.__esModule = true;\\nexports['default'] = customHTML2Content;\\n\\nvar _draftJs = require('draft-js');\\n\\nvar _toArray = require('lodash/toArray');\\n\\nvar _toArray2 = _interopRequireDefault(_toArray);\\n\\nvar _immutable = require('immutable');\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\\n\\nfunction compose() {\\n    for (var _len = arguments.length, argument = Array(_len), _key = 0; _key < _len; _key++) {\\n        argument[_key] = arguments[_key];\\n    }\\n\\n    var args = arguments;\\n    var start = args.length - 1;\\n    return function () {\\n        var i = start;\\n        var result = args[start].apply(this, arguments);\\n        while (i--) {\\n            result = args[i].call(this, result);\\n        }return result;\\n    };\\n}\\n;\\n/*\\n * Helpers\\n */\\n// Prepares img meta data object based on img attributes\\nvar getBlockSpecForElement = function getBlockSpecForElement(imgElement) {\\n    return {\\n        contentType: 'image',\\n        src: imgElement.getAttribute('src'),\\n        width: imgElement.getAttribute('width'),\\n        height: imgElement.getAttribute('height'),\\n        align: imgElement.style.cssFloat\\n    };\\n};\\n// Wraps meta data in HTML element which is 'understandable' by Draft, I used <blockquote />.\\nvar wrapBlockSpec = function wrapBlockSpec(blockSpec) {\\n    if (blockSpec == null) {\\n        return null;\\n    }\\n    var tempEl = document.createElement('blockquote');\\n    // stringify meta data and insert it as text content of temp HTML element. We will later extract\\n    // and parse it.\\n    tempEl.innerText = JSON.stringify(blockSpec);\\n    return tempEl;\\n};\\n// Replaces <img> element with our temp element\\nvar replaceElement = function replaceElement(oldEl, newEl) {\\n    if (!(newEl instanceof HTMLElement)) {\\n        return;\\n    }\\n    var parentNode = oldEl.parentNode;\\n    return parentNode.replaceChild(newEl, oldEl);\\n};\\nvar elementToBlockSpecElement = compose(wrapBlockSpec, getBlockSpecForElement);\\nvar imgReplacer = function imgReplacer(imgElement) {\\n    return replaceElement(imgElement, elementToBlockSpecElement(imgElement));\\n};\\n// creates ContentBlock based on provided spec\\nvar createContentBlock = function createContentBlock(blockData, contentState) {\\n    var key = blockData.key,\\n        type = blockData.type,\\n        text = blockData.text,\\n        data = blockData.data,\\n        inlineStyles = blockData.inlineStyles,\\n        entityData = blockData.entityData;\\n\\n    var blockSpec = {\\n        type: type != null ? type : 'unstyled',\\n        text: text != null ? text : '',\\n        key: key != null ? key : (0, _draftJs.genKey)(),\\n        data: null,\\n        characterList: (0, _immutable.List)([])\\n    };\\n    if (data) {\\n        blockSpec.data = (0, _immutable.fromJS)(data);\\n    }\\n    if (inlineStyles || entityData) {\\n        var entityKey = void 0;\\n        if (entityData) {\\n            var _type = entityData.type,\\n                mutability = entityData.mutability,\\n                _data = entityData.data;\\n\\n            contentState.createEntity(_type, mutability, _data);\\n            entityKey = contentState.getLastCreatedEntityKey();\\n        } else {\\n            entityKey = null;\\n        }\\n        var style = (0, _immutable.OrderedSet)(inlineStyles || []);\\n        var charData = _draftJs.CharacterMetadata.create({ style: style, entityKey: entityKey });\\n        blockSpec.characterList = (0, _immutable.List)((0, _immutable.Repeat)(charData, text.length));\\n    }\\n    return new _draftJs.ContentBlock(blockSpec);\\n};\\n// takes HTML string and returns DraftJS ContentState\\nfunction customHTML2Content(HTML, contentState) {\\n    var tempDoc = new DOMParser().parseFromString(HTML, 'text/html');\\n    // replace all <img /> with <blockquote /> elements\\n    (0, _toArray2['default'])(tempDoc.querySelectorAll('img')).forEach(imgReplacer);\\n    // use DraftJS converter to do initial conversion. I don't provide DOMBuilder and\\n    // blockRenderMap arguments here since it should fall back to its default ones, which are fine\\n\\n    var _convertFromHTML = (0, _draftJs.convertFromHTML)(tempDoc.body.innerHTML),\\n        contentBlocks = _convertFromHTML.contentBlocks;\\n    // now replace <blockquote /> ContentBlocks with 'atomic' ones\\n\\n\\n    contentBlocks = contentBlocks.reduce(function (contentBlocks, block) {\\n        if (block.getType() !== 'blockquote') {\\n            return contentBlocks.concat(block);\\n        }\\n        var image = JSON.parse(block.getText());\\n        contentState.createEntity('IMAGE-ENTITY', 'IMMUTABLE', image);\\n        var entityKey = contentState.getLastCreatedEntityKey();\\n        var charData = _draftJs.CharacterMetadata.create({ entity: entityKey });\\n        // const blockSpec = Object.assign({ type: 'atomic', text: ' ' }, { entityData })\\n        // const atomicBlock = createContentBlock(blockSpec)\\n        // const spacerBlock = createContentBlock({});\\n        var fragmentArray = [new _draftJs.ContentBlock({\\n            key: (0, _draftJs.genKey)(),\\n            type: 'image-block',\\n            text: ' ',\\n            characterList: (0, _immutable.List)((0, _immutable.Repeat)(charData, charData.count()))\\n        }), new _draftJs.ContentBlock({\\n            key: (0, _draftJs.genKey)(),\\n            type: 'unstyled',\\n            text: '',\\n            characterList: (0, _immutable.List)()\\n        })];\\n        return contentBlocks.concat(fragmentArray);\\n    }, []);\\n    // console.log('>> customHTML2Content contentBlocks', contentBlocks);\\n    tempDoc = null;\\n    return _draftJs.BlockMapBuilder.createFromArray(contentBlocks);\\n}\\nmodule.exports = exports['default'];\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"__esModule\",\"customHTML2Content\",\"HTML\",\"contentState\",\"tempDoc\",\"parseFromString\",\"DOMParser\",\"_toArray2\",\"querySelectorAll\",\"forEach\",\"imgReplacer\",\"contentBlocks\",\"_convertFromHTML\",\"_draftJs\",\"convertFromHTML\",\"body\",\"innerHTML\",\"reduce\",\"block\",\"getType\",\"concat\",\"image\",\"JSON\",\"parse\",\"getText\",\"createEntity\",\"entityKey\",\"getLastCreatedEntityKey\",\"charData\",\"CharacterMetadata\",\"create\",\"entity\",\"fragmentArray\",\"ContentBlock\",\"key\",\"genKey\",\"type\",\"text\",\"characterList\",\"_immutable\",\"List\",\"Repeat\",\"count\",\"BlockMapBuilder\",\"createFromArray\",\"_toArray\",\"elementToBlockSpecElement\",\"compose\",\"_len\",\"arguments\",\"length\",\"argument\",\"Array\",\"_key\",\"args\",\"start\",\"i\",\"result\",\"apply\",\"call\",\"wrapBlockSpec\",\"blockSpec\",\"tempEl\",\"document\",\"createElement\",\"innerText\",\"stringify\",\"getBlockSpecForElement\",\"imgElement\",\"contentType\",\"src\",\"getAttribute\",\"width\",\"height\",\"align\",\"style\",\"cssFloat\",\"newEl\",\"HTMLElement\",\"parentNode\",\"replaceChild\"]\n}\n"]