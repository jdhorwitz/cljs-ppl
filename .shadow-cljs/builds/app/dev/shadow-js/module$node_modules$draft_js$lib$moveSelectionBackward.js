["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/moveSelectionBackward.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$moveSelectionBackward=function(global,process,require,module,exports,shadow$shims){module.exports=function(editorState,maxDistance){var selection=editorState.getSelection();editorState=editorState.getCurrentContent();var key=selection.getStartKey(),offset=selection.getStartOffset(),focusKey=key,focusOffset=0;maxDistance>offset?(maxDistance=editorState.getKeyBefore(key),null==maxDistance?focusKey=key:(focusKey=maxDistance,focusOffset=editorState.getBlockForKey(maxDistance).getText().length)):\nfocusOffset=offset-maxDistance;return selection.merge({focusKey:focusKey,focusOffset:focusOffset,isBackward:!0})}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$moveSelectionBackward\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule moveSelectionBackward\n * @format\n * \n */\n\n'use strict';\n\n/**\n * Given a collapsed selection, move the focus `maxDistance` backward within\n * the selected block. If the selection will go beyond the start of the block,\n * move focus to the end of the previous block, but no further.\n *\n * This function is not Unicode-aware, so surrogate pairs will be treated\n * as having length 2.\n */\nfunction moveSelectionBackward(editorState, maxDistance) {\n  var selection = editorState.getSelection();\n  var content = editorState.getCurrentContent();\n  var key = selection.getStartKey();\n  var offset = selection.getStartOffset();\n\n  var focusKey = key;\n  var focusOffset = 0;\n\n  if (maxDistance > offset) {\n    var keyBefore = content.getKeyBefore(key);\n    if (keyBefore == null) {\n      focusKey = key;\n    } else {\n      focusKey = keyBefore;\n      var blockBefore = content.getBlockForKey(keyBefore);\n      focusOffset = blockBefore.getText().length;\n    }\n  } else {\n    focusOffset = offset - maxDistance;\n  }\n\n  return selection.merge({\n    focusKey: focusKey,\n    focusOffset: focusOffset,\n    isBackward: true\n  });\n}\n\nmodule.exports = moveSelectionBackward;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["isBackward","focusKey","focusOffset"]],"~:compiled-at",1532351402146,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$moveSelectionBackward.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAqDxIF,MAAAC,QAAA,CA7BAE,QAA8B,CAACC,WAAD,CAAcC,WAAd,CAA2B,CACvD,IAAIC,UAAYF,WAAAG,aAAA,EACZC,YAAAA,CAAUJ,WAAAK,kBAAA,EACd,KAAIC,IAAMJ,SAAAK,YAAA,EAAV,CACIC,OAASN,SAAAO,eAAA,EADb,CAGIC,SAAWJ,GAHf,CAIIK,YAAc,CAEdV,YAAJ,CAAkBO,MAAlB,EACMI,WACJ,CADgBR,WAAAS,aAAA,CAAqBP,GAArB,CAChB,CAAiB,IAAjB,EAAIM,WAAJ,CACEF,QADF,CACaJ,GADb,EAGEI,QAEA,CAFWE,WAEX,CAAAD,WAAA,CADkBP,WAAAU,eAAAC,CAAuBH,WAAvBG,CACJC,QAAA,EAAAC,OALhB,CAFF;AAUEN,WAVF,CAUgBH,MAVhB,CAUyBP,WAGzB,OAAOC,UAAAgB,MAAA,CAAgB,CACrBR,SAAUA,QADW,CAErBC,YAAaA,WAFQ,CAGrBQ,WAAY,CAAA,CAHS,CAAhB,CAtBgD,CAxB+E;\",\n\"sources\":[\"node_modules/draft-js/lib/moveSelectionBackward.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$moveSelectionBackward\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule moveSelectionBackward\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\n/**\\n * Given a collapsed selection, move the focus `maxDistance` backward within\\n * the selected block. If the selection will go beyond the start of the block,\\n * move focus to the end of the previous block, but no further.\\n *\\n * This function is not Unicode-aware, so surrogate pairs will be treated\\n * as having length 2.\\n */\\nfunction moveSelectionBackward(editorState, maxDistance) {\\n  var selection = editorState.getSelection();\\n  var content = editorState.getCurrentContent();\\n  var key = selection.getStartKey();\\n  var offset = selection.getStartOffset();\\n\\n  var focusKey = key;\\n  var focusOffset = 0;\\n\\n  if (maxDistance > offset) {\\n    var keyBefore = content.getKeyBefore(key);\\n    if (keyBefore == null) {\\n      focusKey = key;\\n    } else {\\n      focusKey = keyBefore;\\n      var blockBefore = content.getBlockForKey(keyBefore);\\n      focusOffset = blockBefore.getText().length;\\n    }\\n  } else {\\n    focusOffset = offset - maxDistance;\\n  }\\n\\n  return selection.merge({\\n    focusKey: focusKey,\\n    focusOffset: focusOffset,\\n    isBackward: true\\n  });\\n}\\n\\nmodule.exports = moveSelectionBackward;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"moveSelectionBackward\",\"editorState\",\"maxDistance\",\"selection\",\"getSelection\",\"content\",\"getCurrentContent\",\"key\",\"getStartKey\",\"offset\",\"getStartOffset\",\"focusKey\",\"focusOffset\",\"keyBefore\",\"getKeyBefore\",\"getBlockForKey\",\"blockBefore\",\"getText\",\"length\",\"merge\",\"isBackward\"]\n}\n"]