["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/UserAgentData.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$UserAgentData=function(global,process,require,module,exports,shadow$shims){var PLATFORM_MAP={\"Mac OS\":\"Mac OS X\"};global=(new (require(\"module$node_modules$ua_parser_js$src$ua_parser\"))).getResult();process=function(version){if(!version)return{major:\"\",minor:\"\"};version=version.split(\".\");return{major:version[0],minor:version[1]}}(global.browser.version);global={browserArchitecture:global.cpu.architecture||\"Unknown\",browserFullVersion:global.browser.version||\n\"Unknown\",browserMinorVersion:process.minor||\"Unknown\",browserName:global.browser.name||\"Unknown\",browserVersion:global.browser.major||\"Unknown\",deviceName:global.device.model||\"Unknown\",engineName:global.engine.name||\"Unknown\",engineVersion:global.engine.version||\"Unknown\",platformArchitecture:global.cpu.architecture||\"Unknown\",platformName:function(name){return PLATFORM_MAP[name]||name}(global.os.name)||\"Unknown\",platformVersion:global.os.version||\"Unknown\",platformFullVersion:global.os.version||\n\"Unknown\"};module.exports=global}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$UserAgentData\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Usage note:\n * This module makes a best effort to export the same data we would internally.\n * At Facebook we use a server-generated module that does the parsing and\n * exports the data for the client to use. We can't rely on a server-side\n * implementation in open source so instead we make use of an open source\n * library to do the heavy lifting and then make some adjustments as necessary.\n * It's likely there will be some differences. Some we can smooth over.\n * Others are going to be harder.\n */\n\n'use strict';\n\nvar UAParser = require('ua-parser-js');\n\nvar UNKNOWN = 'Unknown';\n\nvar PLATFORM_MAP = {\n  'Mac OS': 'Mac OS X'\n};\n\n/**\n * Convert from UAParser platform name to what we expect.\n */\nfunction convertPlatformName(name) {\n  return PLATFORM_MAP[name] || name;\n}\n\n/**\n * Get the version number in parts. This is very naive. We actually get major\n * version as a part of UAParser already, which is generally good enough, but\n * let's get the minor just in case.\n */\nfunction getBrowserVersion(version) {\n  if (!version) {\n    return {\n      major: '',\n      minor: ''\n    };\n  }\n  var parts = version.split('.');\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}\n\n/**\n * Get the UA data fom UAParser and then convert it to the format we're\n * expecting for our APIS.\n */\nvar parser = new UAParser();\nvar results = parser.getResult();\n\n// Do some conversion first.\nvar browserVersionData = getBrowserVersion(results.browser.version);\nvar uaData = {\n  browserArchitecture: results.cpu.architecture || UNKNOWN,\n  browserFullVersion: results.browser.version || UNKNOWN,\n  browserMinorVersion: browserVersionData.minor || UNKNOWN,\n  browserName: results.browser.name || UNKNOWN,\n  browserVersion: results.browser.major || UNKNOWN,\n  deviceName: results.device.model || UNKNOWN,\n  engineName: results.engine.name || UNKNOWN,\n  engineVersion: results.engine.version || UNKNOWN,\n  platformArchitecture: results.cpu.architecture || UNKNOWN,\n  platformName: convertPlatformName(results.os.name) || UNKNOWN,\n  platformVersion: results.os.version || UNKNOWN,\n  platformFullVersion: results.os.version || UNKNOWN\n};\n\nmodule.exports = uaData;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$ua_parser_js$src$ua_parser"]],"~:properties",["^5",["browserFullVersion","browserMinorVersion","deviceName","major","minor","platformName","platformArchitecture","engineVersion","browserName","platformVersion","browserArchitecture","browserVersion","engineName","platformFullVersion"]],"~:compiled-at",1532351402137,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$UserAgentData.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA0B5H,IAAIC,aAAe,CACjB,SAAU,UADO,CAmCfC,OAAAA,CAAUC,CADDC,KAtCEP,OAAAQ,CAAQ,gDAARA,CAsCFD,CACCD,WAAA,EAGVG,QAAAA,CAtBJC,QAA0B,CAACC,OAAD,CAAU,CAClC,GAAI,CAACA,OAAL,CACE,MAAO,CACLC,MAAO,EADF,CAELC,MAAO,EAFF,CAKLC,QAAAA,CAAQH,OAAAI,MAAA,CAAc,GAAd,CACZ,OAAO,CACLH,MAAOE,OAAA,CAAM,CAAN,CADF,CAELD,MAAOC,OAAA,CAAM,CAAN,CAFF,CAR2B,CAsBX,CAAkBT,MAAAW,QAAAL,QAAlB,CACrBM,OAAAA,CAAS,CACXC,oBAAqBb,MAAAc,IAAAC,aAArBF,EA1CYG,SAyCD,CAEXC,mBAAoBjB,MAAAW,QAAAL,QAApBW;AA3CYD,SAyCD,CAGXE,oBAAqBd,OAAAI,MAArBU,EA5CYF,SAyCD,CAIXG,YAAanB,MAAAW,QAAAS,KAAbD,EA7CYH,SAyCD,CAKXK,eAAgBrB,MAAAW,QAAAJ,MAAhBc,EA9CYL,SAyCD,CAMXM,WAAYtB,MAAAuB,OAAAC,MAAZF,EA/CYN,SAyCD,CAOXS,WAAYzB,MAAA0B,OAAAN,KAAZK,EAhDYT,SAyCD,CAQXW,cAAe3B,MAAA0B,OAAApB,QAAfqB,EAjDYX,SAyCD,CASXY,qBAAsB5B,MAAAc,IAAAC,aAAtBa,EAlDYZ,SAyCD,CAUXa,aA1CFC,QAA4B,CAACV,IAAD,CAAO,CACjC,MAAOrB,aAAA,CAAaqB,IAAb,CAAP,EAA6BA,IADI,CA0CnB,CAAoBpB,MAAA+B,GAAAX,KAApB,CAAdS,EAnDYb,SAyCD,CAWXgB,gBAAiBhC,MAAA+B,GAAAzB,QAAjB0B,EApDYhB,SAyCD,CAYXiB,oBAAqBjC,MAAA+B,GAAAzB,QAArB2B;AArDYjB,SAyCD,CAebpB,OAAAC,QAAA,CAAiBe,MAhF2G;\",\n\"sources\":[\"node_modules/fbjs/lib/UserAgentData.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$UserAgentData\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n */\\n\\n/**\\n * Usage note:\\n * This module makes a best effort to export the same data we would internally.\\n * At Facebook we use a server-generated module that does the parsing and\\n * exports the data for the client to use. We can't rely on a server-side\\n * implementation in open source so instead we make use of an open source\\n * library to do the heavy lifting and then make some adjustments as necessary.\\n * It's likely there will be some differences. Some we can smooth over.\\n * Others are going to be harder.\\n */\\n\\n'use strict';\\n\\nvar UAParser = require('ua-parser-js');\\n\\nvar UNKNOWN = 'Unknown';\\n\\nvar PLATFORM_MAP = {\\n  'Mac OS': 'Mac OS X'\\n};\\n\\n/**\\n * Convert from UAParser platform name to what we expect.\\n */\\nfunction convertPlatformName(name) {\\n  return PLATFORM_MAP[name] || name;\\n}\\n\\n/**\\n * Get the version number in parts. This is very naive. We actually get major\\n * version as a part of UAParser already, which is generally good enough, but\\n * let's get the minor just in case.\\n */\\nfunction getBrowserVersion(version) {\\n  if (!version) {\\n    return {\\n      major: '',\\n      minor: ''\\n    };\\n  }\\n  var parts = version.split('.');\\n  return {\\n    major: parts[0],\\n    minor: parts[1]\\n  };\\n}\\n\\n/**\\n * Get the UA data fom UAParser and then convert it to the format we're\\n * expecting for our APIS.\\n */\\nvar parser = new UAParser();\\nvar results = parser.getResult();\\n\\n// Do some conversion first.\\nvar browserVersionData = getBrowserVersion(results.browser.version);\\nvar uaData = {\\n  browserArchitecture: results.cpu.architecture || UNKNOWN,\\n  browserFullVersion: results.browser.version || UNKNOWN,\\n  browserMinorVersion: browserVersionData.minor || UNKNOWN,\\n  browserName: results.browser.name || UNKNOWN,\\n  browserVersion: results.browser.major || UNKNOWN,\\n  deviceName: results.device.model || UNKNOWN,\\n  engineName: results.engine.name || UNKNOWN,\\n  engineVersion: results.engine.version || UNKNOWN,\\n  platformArchitecture: results.cpu.architecture || UNKNOWN,\\n  platformName: convertPlatformName(results.os.name) || UNKNOWN,\\n  platformVersion: results.os.version || UNKNOWN,\\n  platformFullVersion: results.os.version || UNKNOWN\\n};\\n\\nmodule.exports = uaData;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"PLATFORM_MAP\",\"results\",\"getResult\",\"parser\",\"UAParser\",\"browserVersionData\",\"getBrowserVersion\",\"version\",\"major\",\"minor\",\"parts\",\"split\",\"browser\",\"uaData\",\"browserArchitecture\",\"cpu\",\"architecture\",\"UNKNOWN\",\"browserFullVersion\",\"browserMinorVersion\",\"browserName\",\"name\",\"browserVersion\",\"deviceName\",\"device\",\"model\",\"engineName\",\"engine\",\"engineVersion\",\"platformArchitecture\",\"platformName\",\"convertPlatformName\",\"os\",\"platformVersion\",\"platformFullVersion\"]\n}\n"]