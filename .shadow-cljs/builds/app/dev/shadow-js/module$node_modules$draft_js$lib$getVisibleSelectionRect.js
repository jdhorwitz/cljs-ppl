["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/getVisibleSelectionRect.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$getVisibleSelectionRect=function(global$jscomp$0,process,require,module,exports,shadow$shims){var getRangeBoundingClientRect=require(\"module$node_modules$draft_js$lib$getRangeBoundingClientRect\");module.exports=function(global){global=global.getSelection();if(!global.rangeCount)return null;global=global.getRangeAt(0);global=getRangeBoundingClientRect(global);var right=global.right,bottom=global.bottom,left=global.left;return 0===global.top&&0===right&&\n0===bottom&&0===left?null:global}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$getVisibleSelectionRect\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getVisibleSelectionRect\n * @format\n * \n */\n\n'use strict';\n\nvar getRangeBoundingClientRect = require('./getRangeBoundingClientRect');\n\n/**\n * Return the bounding ClientRect for the visible DOM selection, if any.\n * In cases where there are no selected ranges or the bounding rect is\n * temporarily invalid, return null.\n */\nfunction getVisibleSelectionRect(global) {\n  var selection = global.getSelection();\n  if (!selection.rangeCount) {\n    return null;\n  }\n\n  var range = selection.getRangeAt(0);\n  var boundingRect = getRangeBoundingClientRect(range);\n  var top = boundingRect.top,\n      right = boundingRect.right,\n      bottom = boundingRect.bottom,\n      left = boundingRect.left;\n\n  // When a re-render leads to a node being removed, the DOM selection will\n  // temporarily be placed on an ancestor node, which leads to an invalid\n  // bounding rect. Discard this state.\n\n  if (top === 0 && right === 0 && bottom === 0 && left === 0) {\n    return null;\n  }\n\n  return boundingRect;\n}\n\nmodule.exports = getVisibleSelectionRect;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$draft_js$lib$getRangeBoundingClientRect"]],"~:properties",["^5",[]],"~:compiled-at",1532351402155,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$getVisibleSelectionRect.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,eAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB1I,IAAIC,2BAA6BJ,OAAA,CAAQ,6DAAR,CA+BjCC,OAAAC,QAAA,CAxBAG,QAAgC,CAACP,MAAD,CAAS,CACnCQ,MAAAA,CAAYR,MAAAS,aAAA,EAChB,IAAI,CAACD,MAAAE,WAAL,CACE,MAAO,KAGLC,OAAAA,CAAQH,MAAAI,WAAA,CAAqB,CAArB,CACRC,OAAAA,CAAeP,0BAAA,CAA2BK,MAA3B,CAPoB,KASnCG,MAAQD,MAAAC,MAT2B,CAUnCC,OAASF,MAAAE,OAV0B,CAWnCC,KAAOH,MAAAG,KAMX,OAAY,EAAZ,GATUH,MAAAI,IASV,EAA2B,CAA3B,GAAiBH,KAAjB;AAA2C,CAA3C,GAAgCC,MAAhC,EAAyD,CAAzD,GAAgDC,IAAhD,CACS,IADT,CAIOH,MArBgC,CAvBiG;\",\n\"sources\":[\"node_modules/draft-js/lib/getVisibleSelectionRect.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$getVisibleSelectionRect\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule getVisibleSelectionRect\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar getRangeBoundingClientRect = require('./getRangeBoundingClientRect');\\n\\n/**\\n * Return the bounding ClientRect for the visible DOM selection, if any.\\n * In cases where there are no selected ranges or the bounding rect is\\n * temporarily invalid, return null.\\n */\\nfunction getVisibleSelectionRect(global) {\\n  var selection = global.getSelection();\\n  if (!selection.rangeCount) {\\n    return null;\\n  }\\n\\n  var range = selection.getRangeAt(0);\\n  var boundingRect = getRangeBoundingClientRect(range);\\n  var top = boundingRect.top,\\n      right = boundingRect.right,\\n      bottom = boundingRect.bottom,\\n      left = boundingRect.left;\\n\\n  // When a re-render leads to a node being removed, the DOM selection will\\n  // temporarily be placed on an ancestor node, which leads to an invalid\\n  // bounding rect. Discard this state.\\n\\n  if (top === 0 && right === 0 && bottom === 0 && left === 0) {\\n    return null;\\n  }\\n\\n  return boundingRect;\\n}\\n\\nmodule.exports = getVisibleSelectionRect;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getRangeBoundingClientRect\",\"getVisibleSelectionRect\",\"selection\",\"getSelection\",\"rangeCount\",\"range\",\"getRangeAt\",\"boundingRect\",\"right\",\"bottom\",\"left\",\"top\"]\n}\n"]