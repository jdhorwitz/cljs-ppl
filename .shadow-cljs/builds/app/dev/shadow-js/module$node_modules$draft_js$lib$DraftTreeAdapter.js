["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/DraftTreeAdapter.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$DraftTreeAdapter=function(global,process,require,module,exports,shadow$shims){var _extends=require(\"module$node_modules$object_assign$index\")||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i],key;for(key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},invariant=require(\"module$node_modules$fbjs$lib$invariant\"),traverseInDepthOrder=function(blocks,fn){for(blocks=[].concat(blocks).reverse();blocks.length;){var _block=\nblocks.pop();fn(_block);_block=_block.children;Array.isArray(_block)?void 0:invariant(!1,\"Invalid tree raw block\");blocks=blocks.concat([].concat(_block.reverse()))}},isListBlock=function(block){if(!block||!block.type)return!1;block=block.type;return\"unordered-list-item\"===block||\"ordered-list-item\"===block},addDepthToChildren=function(block){Array.isArray(block.children)&&(block.children=block.children.map(function(child){return child.type===block.type?_extends({},child,{depth:(block.depth||0)+1}):\nchild}))};module.exports={fromRawTreeStateToRawState:function(draftTreeState){var blocks=draftTreeState.blocks,transformedBlocks=[];Array.isArray(blocks)?void 0:invariant(!1,\"Invalid raw state\");if(!Array.isArray(blocks)||!blocks.length)return draftTreeState;traverseInDepthOrder(blocks,function(block){var newBlock=_extends({},block);isListBlock(block)&&(newBlock.depth=newBlock.depth||0,addDepthToChildren(block));delete newBlock.children;transformedBlocks.push(newBlock)});draftTreeState.blocks=transformedBlocks;\nreturn _extends({},draftTreeState,{blocks:transformedBlocks})},fromRawStateToRawTreeState:function(draftState){var lastListDepthCacheRef={},transformedBlocks=[];draftState.blocks.forEach(function(block){var isList=isListBlock(block),depth=block.depth||0;block=_extends({},block,{children:[]});isList?(lastListDepthCacheRef[depth]=block,0<depth?((isList=lastListDepthCacheRef[depth-1])?void 0:invariant(!1,\"Invalid depth for RawDraftContentBlock\"),isList.children.push(block)):transformedBlocks.push(block)):\n(lastListDepthCacheRef={},transformedBlocks.push(block))});return _extends({},draftState,{blocks:transformedBlocks})}}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$DraftTreeAdapter\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftTreeAdapter\n * @format\n * \n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\n  var stack = [].concat(blocks).reverse();\n  while (stack.length) {\n    var _block = stack.pop();\n\n    fn(_block);\n\n    var children = _block.children;\n\n    !Array.isArray(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tree raw block') : invariant(false) : void 0;\n\n    stack = stack.concat([].concat(children.reverse()));\n  }\n};\n\nvar isListBlock = function isListBlock(block) {\n  if (!(block && block.type)) {\n    return false;\n  }\n  var type = block.type;\n\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\n};\n\nvar addDepthToChildren = function addDepthToChildren(block) {\n  if (Array.isArray(block.children)) {\n    block.children = block.children.map(function (child) {\n      return child.type === block.type ? _extends({}, child, { depth: (block.depth || 0) + 1 }) : child;\n    });\n  }\n};\n\n/**\n * This adapter is intended to be be used as an adapter to draft tree data\n *\n * draft state <=====> draft tree state\n */\nvar DraftTreeAdapter = {\n  /**\n   * Converts from a tree raw state back to  draft raw state\n   */\n  fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\n    var blocks = draftTreeState.blocks;\n\n    var transformedBlocks = [];\n\n    !Array.isArray(blocks) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid raw state') : invariant(false) : void 0;\n\n    if (!Array.isArray(blocks) || !blocks.length) {\n      return draftTreeState;\n    }\n\n    traverseInDepthOrder(blocks, function (block) {\n      var newBlock = _extends({}, block);\n\n      if (isListBlock(block)) {\n        newBlock.depth = newBlock.depth || 0;\n        addDepthToChildren(block);\n      }\n\n      delete newBlock.children;\n\n      transformedBlocks.push(newBlock);\n    });\n\n    draftTreeState.blocks = transformedBlocks;\n\n    return _extends({}, draftTreeState, {\n      blocks: transformedBlocks\n    });\n  },\n\n\n  /**\n   * Converts from draft raw state to tree draft state\n   */\n  fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\n    var lastListDepthCacheRef = {};\n    var transformedBlocks = [];\n\n    draftState.blocks.forEach(function (block) {\n      var isList = isListBlock(block);\n      var depth = block.depth || 0;\n      var treeBlock = _extends({}, block, {\n        children: []\n      });\n\n      if (!isList) {\n        // reset the cache path\n        lastListDepthCacheRef = {};\n        transformedBlocks.push(treeBlock);\n        return;\n      }\n\n      // update our depth cache reference path\n      lastListDepthCacheRef[depth] = treeBlock;\n\n      // if we are greater than zero we must have seen a parent already\n      if (depth > 0) {\n        var parent = lastListDepthCacheRef[depth - 1];\n\n        !parent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid depth for RawDraftContentBlock') : invariant(false) : void 0;\n\n        // push nested list blocks\n        parent.children.push(treeBlock);\n        return;\n      }\n\n      // push root list blocks\n      transformedBlocks.push(treeBlock);\n    });\n\n    return _extends({}, draftState, {\n      blocks: transformedBlocks\n    });\n  }\n};\n\nmodule.exports = DraftTreeAdapter;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$object_assign$index","~$shadow.js","~$module$node_modules$fbjs$lib$invariant"]],"~:properties",["^5",["children","fromRawTreeStateToRawState","blocks","fromRawStateToRawTreeState","depth"]],"~:compiled-at",1532351402154,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$DraftTreeAdapter.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/DraftTreeAdapter.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$DraftTreeAdapter\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nvar _assign = require('object-assign');\\n\\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\\n\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule DraftTreeAdapter\\n * @format\\n * \\n *\\n * This is unstable and not part of the public API and should not be used by\\n * production systems. This file may be update/removed without notice.\\n */\\n\\nvar invariant = require('fbjs/lib/invariant');\\n\\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\\n  var stack = [].concat(blocks).reverse();\\n  while (stack.length) {\\n    var _block = stack.pop();\\n\\n    fn(_block);\\n\\n    var children = _block.children;\\n\\n    !Array.isArray(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tree raw block') : invariant(false) : void 0;\\n\\n    stack = stack.concat([].concat(children.reverse()));\\n  }\\n};\\n\\nvar isListBlock = function isListBlock(block) {\\n  if (!(block && block.type)) {\\n    return false;\\n  }\\n  var type = block.type;\\n\\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\\n};\\n\\nvar addDepthToChildren = function addDepthToChildren(block) {\\n  if (Array.isArray(block.children)) {\\n    block.children = block.children.map(function (child) {\\n      return child.type === block.type ? _extends({}, child, { depth: (block.depth || 0) + 1 }) : child;\\n    });\\n  }\\n};\\n\\n/**\\n * This adapter is intended to be be used as an adapter to draft tree data\\n *\\n * draft state <=====> draft tree state\\n */\\nvar DraftTreeAdapter = {\\n  /**\\n   * Converts from a tree raw state back to  draft raw state\\n   */\\n  fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\\n    var blocks = draftTreeState.blocks;\\n\\n    var transformedBlocks = [];\\n\\n    !Array.isArray(blocks) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid raw state') : invariant(false) : void 0;\\n\\n    if (!Array.isArray(blocks) || !blocks.length) {\\n      return draftTreeState;\\n    }\\n\\n    traverseInDepthOrder(blocks, function (block) {\\n      var newBlock = _extends({}, block);\\n\\n      if (isListBlock(block)) {\\n        newBlock.depth = newBlock.depth || 0;\\n        addDepthToChildren(block);\\n      }\\n\\n      delete newBlock.children;\\n\\n      transformedBlocks.push(newBlock);\\n    });\\n\\n    draftTreeState.blocks = transformedBlocks;\\n\\n    return _extends({}, draftTreeState, {\\n      blocks: transformedBlocks\\n    });\\n  },\\n\\n\\n  /**\\n   * Converts from draft raw state to tree draft state\\n   */\\n  fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\\n    var lastListDepthCacheRef = {};\\n    var transformedBlocks = [];\\n\\n    draftState.blocks.forEach(function (block) {\\n      var isList = isListBlock(block);\\n      var depth = block.depth || 0;\\n      var treeBlock = _extends({}, block, {\\n        children: []\\n      });\\n\\n      if (!isList) {\\n        // reset the cache path\\n        lastListDepthCacheRef = {};\\n        transformedBlocks.push(treeBlock);\\n        return;\\n      }\\n\\n      // update our depth cache reference path\\n      lastListDepthCacheRef[depth] = treeBlock;\\n\\n      // if we are greater than zero we must have seen a parent already\\n      if (depth > 0) {\\n        var parent = lastListDepthCacheRef[depth - 1];\\n\\n        !parent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid depth for RawDraftContentBlock') : invariant(false) : void 0;\\n\\n        // push nested list blocks\\n        parent.children.push(treeBlock);\\n        return;\\n      }\\n\\n      // push root list blocks\\n      transformedBlocks.push(treeBlock);\\n    });\\n\\n    return _extends({}, draftState, {\\n      blocks: transformedBlocks\\n    });\\n  }\\n};\\n\\nmodule.exports = DraftTreeAdapter;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_extends\",\"_assign\",\"target\",\"i\",\"arguments\",\"length\",\"source\",\"key\",\"Object\",\"prototype\",\"hasOwnProperty\",\"call\",\"invariant\",\"traverseInDepthOrder\",\"blocks\",\"fn\",\"stack\",\"concat\",\"reverse\",\"_block\",\"pop\",\"children\",\"Array\",\"isArray\",\"isListBlock\",\"block\",\"type\",\"addDepthToChildren\",\"map\",\"child\",\"depth\",\"DraftTreeAdapter\",\"fromRawTreeStateToRawState\",\"draftTreeState\",\"transformedBlocks\",\"newBlock\",\"push\",\"fromRawStateToRawTreeState\",\"draftState\",\"lastListDepthCacheRef\",\"forEach\",\"isList\",\"treeBlock\",\"parent\"]\n}\n"]