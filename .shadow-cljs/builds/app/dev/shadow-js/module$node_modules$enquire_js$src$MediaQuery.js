["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/enquire.js/src/MediaQuery.js"],"~:js","shadow$provide.module$node_modules$enquire_js$src$MediaQuery=function(global,process,require,module,exports,shadow$shims){function MediaQuery(query,isUnconditional){this.query=query;this.isUnconditional=isUnconditional;this.handlers=[];this.mql=window.matchMedia(query);var self=this;this.listener=function(mql){self.mql=mql.currentTarget||mql;self.assess()};this.mql.addListener(this.listener)}var QueryHandler=require(\"module$node_modules$enquire_js$src$QueryHandler\"),each=require(\"module$node_modules$enquire_js$src$Util\").each;\nMediaQuery.prototype={constuctor:MediaQuery,addHandler:function(handler){handler=new QueryHandler(handler);this.handlers.push(handler);this.matches()&&handler.on()},removeHandler:function(handler){var handlers=this.handlers;each(handlers,function(h,i){if(h.equals(handler))return h.destroy(),!handlers.splice(i,1)})},matches:function(){return this.mql.matches||this.isUnconditional},clear:function(){each(this.handlers,function(handler){handler.destroy()});this.mql.removeListener(this.listener);this.handlers.length=\n0},assess:function(){var action=this.matches()?\"on\":\"off\";each(this.handlers,function(handler){handler[action]()})}};module.exports=MediaQuery}","~:source","shadow$provide[\"module$node_modules$enquire_js$src$MediaQuery\"] = function(global,process,require,module,exports,shadow$shims) {\nvar QueryHandler = require('./QueryHandler');\nvar each = require('./Util').each;\n\n/**\n * Represents a single media query, manages it's state and registered handlers for this query\n *\n * @constructor\n * @param {string} query the media query string\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\n */\nfunction MediaQuery(query, isUnconditional) {\n    this.query = query;\n    this.isUnconditional = isUnconditional;\n    this.handlers = [];\n    this.mql = window.matchMedia(query);\n\n    var self = this;\n    this.listener = function(mql) {\n        // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\n        self.mql = mql.currentTarget || mql;\n        self.assess();\n    };\n    this.mql.addListener(this.listener);\n}\n\nMediaQuery.prototype = {\n\n    constuctor : MediaQuery,\n\n    /**\n     * add a handler for this query, triggering if already active\n     *\n     * @param {object} handler\n     * @param {function} handler.match callback for when query is activated\n     * @param {function} [handler.unmatch] callback for when query is deactivated\n     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\n     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\n     */\n    addHandler : function(handler) {\n        var qh = new QueryHandler(handler);\n        this.handlers.push(qh);\n\n        this.matches() && qh.on();\n    },\n\n    /**\n     * removes the given handler from the collection, and calls it's destroy methods\n     *\n     * @param {object || function} handler the handler to remove\n     */\n    removeHandler : function(handler) {\n        var handlers = this.handlers;\n        each(handlers, function(h, i) {\n            if(h.equals(handler)) {\n                h.destroy();\n                return !handlers.splice(i,1); //remove from array and exit each early\n            }\n        });\n    },\n\n    /**\n     * Determine whether the media query should be considered a match\n     *\n     * @return {Boolean} true if media query can be considered a match, false otherwise\n     */\n    matches : function() {\n        return this.mql.matches || this.isUnconditional;\n    },\n\n    /**\n     * Clears all handlers and unbinds events\n     */\n    clear : function() {\n        each(this.handlers, function(handler) {\n            handler.destroy();\n        });\n        this.mql.removeListener(this.listener);\n        this.handlers.length = 0; //clear array\n    },\n\n    /*\n        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\n        */\n    assess : function() {\n        var action = this.matches() ? 'on' : 'off';\n\n        each(this.handlers, function(handler) {\n            handler[action]();\n        });\n    }\n};\n\nmodule.exports = MediaQuery;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$enquire_js$src$Util","~$shadow.js","~$module$node_modules$enquire_js$src$QueryHandler"]],"~:properties",["^5",["prototype","handlers","query","addHandler","listener","constuctor","removeHandler","length","matches","isUnconditional","clear","mql","assess"]],"~:compiled-at",1532351401903,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$enquire_js$src$MediaQuery.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAW/HC,QAASA,WAAU,CAACC,KAAD,CAAQC,eAAR,CAAyB,CACxC,IAAAD,MAAA,CAAaA,KACb,KAAAC,gBAAA,CAAuBA,eACvB,KAAAC,SAAA,CAAgB,EAChB,KAAAC,IAAA,CAAWC,MAAAC,WAAA,CAAkBL,KAAlB,CAEX,KAAIM,KAAO,IACX,KAAAC,SAAA,CAAgBC,QAAQ,CAACL,GAAD,CAAM,CAE1BG,IAAAH,IAAA,CAAWA,GAAAM,cAAX,EAAgCN,GAChCG,KAAAI,OAAA,EAH0B,CAK9B,KAAAP,IAAAQ,YAAA,CAAqB,IAAAJ,SAArB,CAZwC,CAV5C,IAAIK,aAAejB,OAAA,CAAQ,iDAAR,CAAnB,CACIkB,KAAOlB,OAAA,CAAQ,yCAAR,CAAAkB,KAwBXd;UAAAe,UAAA,CAAuB,CAEnBC,WAAahB,UAFM,CAanBiB,WAAaA,QAAQ,CAACC,OAAD,CAAU,CACvBC,OAAAA,CAAK,IAAIN,YAAJ,CAAiBK,OAAjB,CACT,KAAAf,SAAAiB,KAAA,CAAmBD,OAAnB,CAEA,KAAAE,QAAA,EAAA,EAAkBF,OAAAG,GAAA,EAJS,CAbZ,CAyBnBC,cAAgBA,QAAQ,CAACL,OAAD,CAAU,CAC9B,IAAIf,SAAW,IAAAA,SACfW,KAAA,CAAKX,QAAL,CAAe,QAAQ,CAACqB,CAAD,CAAIC,CAAJ,CAAO,CAC1B,GAAGD,CAAAE,OAAA,CAASR,OAAT,CAAH,CAEI,MADAM,EAAAG,QAAA,EACO,CAAA,CAACxB,QAAAyB,OAAA,CAAgBH,CAAhB,CAAkB,CAAlB,CAHc,CAA9B,CAF8B,CAzBf,CAwCnBJ,QAAUA,QAAQ,EAAG,CACjB,MAAO,KAAAjB,IAAAiB,QAAP,EAA2B,IAAAnB,gBADV,CAxCF,CA+CnB2B,MAAQA,QAAQ,EAAG,CACff,IAAA,CAAK,IAAAX,SAAL,CAAoB,QAAQ,CAACe,OAAD,CAAU,CAClCA,OAAAS,QAAA,EADkC,CAAtC,CAGA,KAAAvB,IAAA0B,eAAA,CAAwB,IAAAtB,SAAxB,CACA,KAAAL,SAAA4B,OAAA;AAAuB,CALR,CA/CA,CA0DnBpB,OAASA,QAAQ,EAAG,CAChB,IAAIqB,OAAS,IAAAX,QAAA,EAAA,CAAiB,IAAjB,CAAwB,KAErCP,KAAA,CAAK,IAAAX,SAAL,CAAoB,QAAQ,CAACe,OAAD,CAAU,CAClCA,OAAA,CAAQc,MAAR,CAAA,EADkC,CAAtC,CAHgB,CA1DD,CAmEvBnC,OAAAC,QAAA,CAAiBE,UA7F8G;\",\n\"sources\":[\"node_modules/enquire.js/src/MediaQuery.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$enquire_js$src$MediaQuery\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar QueryHandler = require('./QueryHandler');\\nvar each = require('./Util').each;\\n\\n/**\\n * Represents a single media query, manages it's state and registered handlers for this query\\n *\\n * @constructor\\n * @param {string} query the media query string\\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\\n */\\nfunction MediaQuery(query, isUnconditional) {\\n    this.query = query;\\n    this.isUnconditional = isUnconditional;\\n    this.handlers = [];\\n    this.mql = window.matchMedia(query);\\n\\n    var self = this;\\n    this.listener = function(mql) {\\n        // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\\n        self.mql = mql.currentTarget || mql;\\n        self.assess();\\n    };\\n    this.mql.addListener(this.listener);\\n}\\n\\nMediaQuery.prototype = {\\n\\n    constuctor : MediaQuery,\\n\\n    /**\\n     * add a handler for this query, triggering if already active\\n     *\\n     * @param {object} handler\\n     * @param {function} handler.match callback for when query is activated\\n     * @param {function} [handler.unmatch] callback for when query is deactivated\\n     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\\n     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\\n     */\\n    addHandler : function(handler) {\\n        var qh = new QueryHandler(handler);\\n        this.handlers.push(qh);\\n\\n        this.matches() && qh.on();\\n    },\\n\\n    /**\\n     * removes the given handler from the collection, and calls it's destroy methods\\n     *\\n     * @param {object || function} handler the handler to remove\\n     */\\n    removeHandler : function(handler) {\\n        var handlers = this.handlers;\\n        each(handlers, function(h, i) {\\n            if(h.equals(handler)) {\\n                h.destroy();\\n                return !handlers.splice(i,1); //remove from array and exit each early\\n            }\\n        });\\n    },\\n\\n    /**\\n     * Determine whether the media query should be considered a match\\n     *\\n     * @return {Boolean} true if media query can be considered a match, false otherwise\\n     */\\n    matches : function() {\\n        return this.mql.matches || this.isUnconditional;\\n    },\\n\\n    /**\\n     * Clears all handlers and unbinds events\\n     */\\n    clear : function() {\\n        each(this.handlers, function(handler) {\\n            handler.destroy();\\n        });\\n        this.mql.removeListener(this.listener);\\n        this.handlers.length = 0; //clear array\\n    },\\n\\n    /*\\n        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\\n        */\\n    assess : function() {\\n        var action = this.matches() ? 'on' : 'off';\\n\\n        each(this.handlers, function(handler) {\\n            handler[action]();\\n        });\\n    }\\n};\\n\\nmodule.exports = MediaQuery;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"MediaQuery\",\"query\",\"isUnconditional\",\"handlers\",\"mql\",\"window\",\"matchMedia\",\"self\",\"listener\",\"this.listener\",\"currentTarget\",\"assess\",\"addListener\",\"QueryHandler\",\"each\",\"prototype\",\"constuctor\",\"addHandler\",\"handler\",\"qh\",\"push\",\"matches\",\"on\",\"removeHandler\",\"h\",\"i\",\"equals\",\"destroy\",\"splice\",\"clear\",\"removeListener\",\"length\",\"action\"]\n}\n"]