["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/DraftModifier.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$DraftModifier=function(global,process,require,module,exports,shadow$shims){var CharacterMetadata=require(\"module$node_modules$draft_js$lib$CharacterMetadata\"),ContentStateInlineStyle=require(\"module$node_modules$draft_js$lib$ContentStateInlineStyle\"),DraftFeatureFlags=require(\"module$node_modules$draft_js$lib$DraftFeatureFlags\");global=require(\"module$node_modules$immutable$dist$immutable\");var applyEntityToContentState=require(\"module$node_modules$draft_js$lib$applyEntityToContentState\"),\ngetCharacterRemovalRange=require(\"module$node_modules$draft_js$lib$getCharacterRemovalRange\"),getContentStateFragment=require(\"module$node_modules$draft_js$lib$getContentStateFragment\"),insertFragmentIntoContentState=require(\"module$node_modules$draft_js$lib$insertFragmentIntoContentState\"),insertTextIntoContentState=require(\"module$node_modules$draft_js$lib$insertTextIntoContentState\"),invariant=require(\"module$node_modules$fbjs$lib$invariant\"),modifyBlockForContentState=require(\"module$node_modules$draft_js$lib$modifyBlockForContentState\"),\nremoveEntitiesAtEdges=require(\"module$node_modules$draft_js$lib$removeEntitiesAtEdges\"),removeRangeFromContentState=require(\"module$node_modules$draft_js$lib$removeRangeFromContentState\"),splitBlockInContentState=require(\"module$node_modules$draft_js$lib$splitBlockInContentState\"),OrderedSet=global.OrderedSet,DraftModifier={replaceText:function(contentState,rangeToReplace,text,inlineStyle,entityKey){contentState=removeEntitiesAtEdges(contentState,rangeToReplace);rangeToReplace=removeRangeFromContentState(contentState,\nrangeToReplace);inlineStyle=CharacterMetadata.create({style:inlineStyle||OrderedSet(),entity:entityKey||null});return insertTextIntoContentState(rangeToReplace,rangeToReplace.getSelectionAfter(),text,inlineStyle)},insertText:function(contentState,targetRange,text,inlineStyle,entityKey){targetRange.isCollapsed()?void 0:invariant(!1,\"Target range must be collapsed for `insertText`.\");return DraftModifier.replaceText(contentState,targetRange,text,inlineStyle,entityKey)},moveText:function(contentState,\nremovalRange,targetRange){var movedFragment=getContentStateFragment(contentState,removalRange);contentState=DraftModifier.removeRange(contentState,removalRange,\"backward\");return DraftModifier.replaceWithFragment(contentState,targetRange,movedFragment)},replaceWithFragment:function(contentState,targetRange,fragment){contentState=removeEntitiesAtEdges(contentState,targetRange);targetRange=removeRangeFromContentState(contentState,targetRange);return insertFragmentIntoContentState(targetRange,targetRange.getSelectionAfter(),\nfragment)},removeRange:function(contentState,rangeToRemove,removalDirection){rangeToRemove.getIsBackward()&&(rangeToRemove=rangeToRemove.merge({anchorKey:rangeToRemove.getFocusKey(),anchorOffset:rangeToRemove.getFocusOffset(),focusKey:rangeToRemove.getAnchorKey(),focusOffset:rangeToRemove.getAnchorOffset(),isBackward:!1}));var startKey=rangeToRemove.getAnchorKey();var endKey=rangeToRemove.getFocusKey();var startBlock=contentState.getBlockForKey(startKey);var endBlock=contentState.getBlockForKey(endKey);\nvar startOffset=rangeToRemove.getStartOffset(),endOffset=rangeToRemove.getEndOffset();startOffset=startBlock.getEntityAt(startOffset);endOffset=endBlock.getEntityAt(endOffset-1);if(startKey===endKey&&startOffset&&startOffset===endOffset)return rangeToRemove=getCharacterRemovalRange(contentState.getEntityMap(),startBlock,endBlock,rangeToRemove,removalDirection),removeRangeFromContentState(contentState,rangeToRemove);startKey=rangeToRemove;DraftFeatureFlags.draft_segmented_entities_behavior&&(startKey=\ngetCharacterRemovalRange(contentState.getEntityMap(),startBlock,endBlock,rangeToRemove,removalDirection));contentState=removeEntitiesAtEdges(contentState,startKey);return removeRangeFromContentState(contentState,startKey)},splitBlock:function(contentState,selectionState){contentState=removeEntitiesAtEdges(contentState,selectionState);selectionState=removeRangeFromContentState(contentState,selectionState);return splitBlockInContentState(selectionState,selectionState.getSelectionAfter())},applyInlineStyle:function(contentState,\nselectionState,inlineStyle){return ContentStateInlineStyle.add(contentState,selectionState,inlineStyle)},removeInlineStyle:function(contentState,selectionState,inlineStyle){return ContentStateInlineStyle.remove(contentState,selectionState,inlineStyle)},setBlockType:function(contentState,selectionState,blockType){return modifyBlockForContentState(contentState,selectionState,function(block){return block.merge({type:blockType,depth:0})})},setBlockData:function(contentState,selectionState,blockData){return modifyBlockForContentState(contentState,\nselectionState,function(block){return block.merge({data:blockData})})},mergeBlockData:function(contentState,selectionState,blockData){return modifyBlockForContentState(contentState,selectionState,function(block){return block.merge({data:block.getData().merge(blockData)})})},applyEntity:function(contentState,selectionState,entityKey){contentState=removeEntitiesAtEdges(contentState,selectionState);return applyEntityToContentState(contentState,selectionState,entityKey)}};module.exports=DraftModifier}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$DraftModifier\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftModifier\n * @format\n * \n */\n\n'use strict';\n\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentStateInlineStyle = require('./ContentStateInlineStyle');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar Immutable = require('immutable');\n\nvar applyEntityToContentState = require('./applyEntityToContentState');\nvar getCharacterRemovalRange = require('./getCharacterRemovalRange');\nvar getContentStateFragment = require('./getContentStateFragment');\nvar insertFragmentIntoContentState = require('./insertFragmentIntoContentState');\nvar insertTextIntoContentState = require('./insertTextIntoContentState');\nvar invariant = require('fbjs/lib/invariant');\nvar modifyBlockForContentState = require('./modifyBlockForContentState');\nvar removeEntitiesAtEdges = require('./removeEntitiesAtEdges');\nvar removeRangeFromContentState = require('./removeRangeFromContentState');\nvar splitBlockInContentState = require('./splitBlockInContentState');\n\nvar OrderedSet = Immutable.OrderedSet;\n\n/**\n * `DraftModifier` provides a set of convenience methods that apply\n * modifications to a `ContentState` object based on a target `SelectionState`.\n *\n * Any change to a `ContentState` should be decomposable into a series of\n * transaction functions that apply the required changes and return output\n * `ContentState` objects.\n *\n * These functions encapsulate some of the most common transaction sequences.\n */\n\nvar DraftModifier = {\n  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\n    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\n\n    var character = CharacterMetadata.create({\n      style: inlineStyle || OrderedSet(),\n      entity: entityKey || null\n    });\n\n    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\n  },\n\n  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\n    !targetRange.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;\n    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\n  },\n\n  moveText: function moveText(contentState, removalRange, targetRange) {\n    var movedFragment = getContentStateFragment(contentState, removalRange);\n\n    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');\n\n    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n  },\n\n  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\n    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\n\n    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment);\n  },\n\n  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\n    var startKey = void 0,\n        endKey = void 0,\n        startBlock = void 0,\n        endBlock = void 0;\n    if (rangeToRemove.getIsBackward()) {\n      rangeToRemove = rangeToRemove.merge({\n        anchorKey: rangeToRemove.getFocusKey(),\n        anchorOffset: rangeToRemove.getFocusOffset(),\n        focusKey: rangeToRemove.getAnchorKey(),\n        focusOffset: rangeToRemove.getAnchorOffset(),\n        isBackward: false\n      });\n    }\n    startKey = rangeToRemove.getAnchorKey();\n    endKey = rangeToRemove.getFocusKey();\n    startBlock = contentState.getBlockForKey(startKey);\n    endBlock = contentState.getBlockForKey(endKey);\n    var startOffset = rangeToRemove.getStartOffset();\n    var endOffset = rangeToRemove.getEndOffset();\n\n    var startEntityKey = startBlock.getEntityAt(startOffset);\n    var endEntityKey = endBlock.getEntityAt(endOffset - 1);\n\n    // Check whether the selection state overlaps with a single entity.\n    // If so, try to remove the appropriate substring of the entity text.\n    if (startKey === endKey) {\n      if (startEntityKey && startEntityKey === endEntityKey) {\n        var _adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n        return removeRangeFromContentState(contentState, _adjustedRemovalRange);\n      }\n    }\n    var adjustedRemovalRange = rangeToRemove;\n    if (DraftFeatureFlags.draft_segmented_entities_behavior) {\n      // Adjust the selection to properly delete segemented and immutable\n      // entities\n      adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n    }\n\n    var withoutEntities = removeEntitiesAtEdges(contentState, adjustedRemovalRange);\n    return removeRangeFromContentState(withoutEntities, adjustedRemovalRange);\n  },\n\n  splitBlock: function splitBlock(contentState, selectionState) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\n\n    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\n  },\n\n  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\n  },\n\n  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\n  },\n\n  setBlockType: function setBlockType(contentState, selectionState, blockType) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({ type: blockType, depth: 0 });\n    });\n  },\n\n  setBlockData: function setBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({ data: blockData });\n    });\n  },\n\n  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({ data: block.getData().merge(blockData) });\n    });\n  },\n\n  applyEntity: function applyEntity(contentState, selectionState, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    return applyEntityToContentState(withoutEntities, selectionState, entityKey);\n  }\n};\n\nmodule.exports = DraftModifier;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$draft_js$lib$ContentStateInlineStyle","~$module$node_modules$draft_js$lib$getCharacterRemovalRange","~$module$node_modules$draft_js$lib$removeRangeFromContentState","~$shadow.js","~$module$node_modules$draft_js$lib$DraftFeatureFlags","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$draft_js$lib$applyEntityToContentState","~$module$node_modules$immutable$dist$immutable","~$module$node_modules$draft_js$lib$CharacterMetadata","~$module$node_modules$draft_js$lib$insertFragmentIntoContentState","~$module$node_modules$draft_js$lib$removeEntitiesAtEdges","~$module$node_modules$draft_js$lib$insertTextIntoContentState","~$module$node_modules$draft_js$lib$modifyBlockForContentState","~$module$node_modules$draft_js$lib$splitBlockInContentState","~$module$node_modules$draft_js$lib$getContentStateFragment"]],"~:properties",["^5",["anchorOffset","applyInlineStyle","setBlockData","isBackward","setBlockType","anchorKey","style","replaceWithFragment","applyEntity","focusKey","removeInlineStyle","focusOffset","splitBlock","type","replaceText","mergeBlockData","depth","insertText","entity","data","moveText","removeRange"]],"~:compiled-at",1532351402130,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$DraftModifier.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/draft-js/lib/DraftModifier.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$DraftModifier\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule DraftModifier\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar CharacterMetadata = require('./CharacterMetadata');\\nvar ContentStateInlineStyle = require('./ContentStateInlineStyle');\\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\\nvar Immutable = require('immutable');\\n\\nvar applyEntityToContentState = require('./applyEntityToContentState');\\nvar getCharacterRemovalRange = require('./getCharacterRemovalRange');\\nvar getContentStateFragment = require('./getContentStateFragment');\\nvar insertFragmentIntoContentState = require('./insertFragmentIntoContentState');\\nvar insertTextIntoContentState = require('./insertTextIntoContentState');\\nvar invariant = require('fbjs/lib/invariant');\\nvar modifyBlockForContentState = require('./modifyBlockForContentState');\\nvar removeEntitiesAtEdges = require('./removeEntitiesAtEdges');\\nvar removeRangeFromContentState = require('./removeRangeFromContentState');\\nvar splitBlockInContentState = require('./splitBlockInContentState');\\n\\nvar OrderedSet = Immutable.OrderedSet;\\n\\n/**\\n * `DraftModifier` provides a set of convenience methods that apply\\n * modifications to a `ContentState` object based on a target `SelectionState`.\\n *\\n * Any change to a `ContentState` should be decomposable into a series of\\n * transaction functions that apply the required changes and return output\\n * `ContentState` objects.\\n *\\n * These functions encapsulate some of the most common transaction sequences.\\n */\\n\\nvar DraftModifier = {\\n  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\\n    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\\n\\n    var character = CharacterMetadata.create({\\n      style: inlineStyle || OrderedSet(),\\n      entity: entityKey || null\\n    });\\n\\n    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\\n  },\\n\\n  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\\n    !targetRange.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;\\n    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\\n  },\\n\\n  moveText: function moveText(contentState, removalRange, targetRange) {\\n    var movedFragment = getContentStateFragment(contentState, removalRange);\\n\\n    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');\\n\\n    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\\n  },\\n\\n  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\\n    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\\n    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\\n\\n    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment);\\n  },\\n\\n  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\\n    var startKey = void 0,\\n        endKey = void 0,\\n        startBlock = void 0,\\n        endBlock = void 0;\\n    if (rangeToRemove.getIsBackward()) {\\n      rangeToRemove = rangeToRemove.merge({\\n        anchorKey: rangeToRemove.getFocusKey(),\\n        anchorOffset: rangeToRemove.getFocusOffset(),\\n        focusKey: rangeToRemove.getAnchorKey(),\\n        focusOffset: rangeToRemove.getAnchorOffset(),\\n        isBackward: false\\n      });\\n    }\\n    startKey = rangeToRemove.getAnchorKey();\\n    endKey = rangeToRemove.getFocusKey();\\n    startBlock = contentState.getBlockForKey(startKey);\\n    endBlock = contentState.getBlockForKey(endKey);\\n    var startOffset = rangeToRemove.getStartOffset();\\n    var endOffset = rangeToRemove.getEndOffset();\\n\\n    var startEntityKey = startBlock.getEntityAt(startOffset);\\n    var endEntityKey = endBlock.getEntityAt(endOffset - 1);\\n\\n    // Check whether the selection state overlaps with a single entity.\\n    // If so, try to remove the appropriate substring of the entity text.\\n    if (startKey === endKey) {\\n      if (startEntityKey && startEntityKey === endEntityKey) {\\n        var _adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\\n        return removeRangeFromContentState(contentState, _adjustedRemovalRange);\\n      }\\n    }\\n    var adjustedRemovalRange = rangeToRemove;\\n    if (DraftFeatureFlags.draft_segmented_entities_behavior) {\\n      // Adjust the selection to properly delete segemented and immutable\\n      // entities\\n      adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\\n    }\\n\\n    var withoutEntities = removeEntitiesAtEdges(contentState, adjustedRemovalRange);\\n    return removeRangeFromContentState(withoutEntities, adjustedRemovalRange);\\n  },\\n\\n  splitBlock: function splitBlock(contentState, selectionState) {\\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\\n    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\\n\\n    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\\n  },\\n\\n  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\\n    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\\n  },\\n\\n  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\\n    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\\n  },\\n\\n  setBlockType: function setBlockType(contentState, selectionState, blockType) {\\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\\n      return block.merge({ type: blockType, depth: 0 });\\n    });\\n  },\\n\\n  setBlockData: function setBlockData(contentState, selectionState, blockData) {\\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\\n      return block.merge({ data: blockData });\\n    });\\n  },\\n\\n  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\\n      return block.merge({ data: block.getData().merge(blockData) });\\n    });\\n  },\\n\\n  applyEntity: function applyEntity(contentState, selectionState, entityKey) {\\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\\n    return applyEntityToContentState(withoutEntities, selectionState, entityKey);\\n  }\\n};\\n\\nmodule.exports = DraftModifier;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"CharacterMetadata\",\"ContentStateInlineStyle\",\"DraftFeatureFlags\",\"Immutable\",\"applyEntityToContentState\",\"getCharacterRemovalRange\",\"getContentStateFragment\",\"insertFragmentIntoContentState\",\"insertTextIntoContentState\",\"invariant\",\"modifyBlockForContentState\",\"removeEntitiesAtEdges\",\"removeRangeFromContentState\",\"splitBlockInContentState\",\"OrderedSet\",\"DraftModifier\",\"replaceText\",\"contentState\",\"rangeToReplace\",\"text\",\"inlineStyle\",\"entityKey\",\"withoutEntities\",\"withoutText\",\"character\",\"create\",\"style\",\"entity\",\"getSelectionAfter\",\"insertText\",\"targetRange\",\"isCollapsed\",\"moveText\",\"removalRange\",\"movedFragment\",\"afterRemoval\",\"removeRange\",\"replaceWithFragment\",\"fragment\",\"rangeToRemove\",\"removalDirection\",\"getIsBackward\",\"merge\",\"anchorKey\",\"getFocusKey\",\"anchorOffset\",\"getFocusOffset\",\"focusKey\",\"getAnchorKey\",\"focusOffset\",\"getAnchorOffset\",\"isBackward\",\"startKey\",\"endKey\",\"startBlock\",\"getBlockForKey\",\"endBlock\",\"startOffset\",\"getStartOffset\",\"endOffset\",\"getEndOffset\",\"startEntityKey\",\"getEntityAt\",\"endEntityKey\",\"_adjustedRemovalRange\",\"getEntityMap\",\"adjustedRemovalRange\",\"draft_segmented_entities_behavior\",\"splitBlock\",\"selectionState\",\"applyInlineStyle\",\"add\",\"removeInlineStyle\",\"remove\",\"setBlockType\",\"blockType\",\"block\",\"type\",\"depth\",\"setBlockData\",\"blockData\",\"data\",\"mergeBlockData\",\"getData\",\"applyEntity\"]\n}\n"]