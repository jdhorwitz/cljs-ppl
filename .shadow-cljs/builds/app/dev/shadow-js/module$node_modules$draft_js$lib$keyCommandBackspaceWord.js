["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/keyCommandBackspaceWord.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$keyCommandBackspaceWord=function(global,process,require,module,exports,shadow$shims){var DraftRemovableWord=require(\"module$node_modules$draft_js$lib$DraftRemovableWord\"),EditorState=require(\"module$node_modules$draft_js$lib$EditorState\"),moveSelectionBackward=require(\"module$node_modules$draft_js$lib$moveSelectionBackward\"),removeTextWithStrategy=require(\"module$node_modules$draft_js$lib$removeTextWithStrategy\");module.exports=function(editorState){var afterRemoval=\nremoveTextWithStrategy(editorState,function(strategyState){var selection=strategyState.getSelection(),offset=selection.getStartOffset();if(0===offset)return moveSelectionBackward(strategyState,1);selection=selection.getStartKey();offset=strategyState.getCurrentContent().getBlockForKey(selection).getText().slice(0,offset);offset=DraftRemovableWord.getBackward(offset);return moveSelectionBackward(strategyState,offset.length||1)},\"backward\");return afterRemoval===editorState.getCurrentContent()?editorState:\nEditorState.push(editorState,afterRemoval,\"remove-range\")}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$keyCommandBackspaceWord\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandBackspaceWord\n * @format\n * \n */\n\n'use strict';\n\nvar DraftRemovableWord = require('./DraftRemovableWord');\nvar EditorState = require('./EditorState');\n\nvar moveSelectionBackward = require('./moveSelectionBackward');\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n\n/**\n * Delete the word that is left of the cursor, as well as any spaces or\n * punctuation after the word.\n */\nfunction keyCommandBackspaceWord(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var offset = selection.getStartOffset();\n    // If there are no words before the cursor, remove the preceding newline.\n    if (offset === 0) {\n      return moveSelectionBackward(strategyState, 1);\n    }\n    var key = selection.getStartKey();\n    var content = strategyState.getCurrentContent();\n    var text = content.getBlockForKey(key).getText().slice(0, offset);\n    var toRemove = DraftRemovableWord.getBackward(text);\n    return moveSelectionBackward(strategyState, toRemove.length || 1);\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandBackspaceWord;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$draft_js$lib$removeTextWithStrategy","~$shadow.js","~$module$node_modules$draft_js$lib$moveSelectionBackward","~$module$node_modules$draft_js$lib$EditorState","~$module$node_modules$draft_js$lib$DraftRemovableWord"]],"~:properties",["^5",[]],"~:compiled-at",1532351402147,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$keyCommandBackspaceWord.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB1I,IAAIC,mBAAqBJ,OAAA,CAAQ,qDAAR,CAAzB,CACIK,YAAcL,OAAA,CAAQ,8CAAR,CADlB,CAGIM,sBAAwBN,OAAA,CAAQ,wDAAR,CAH5B,CAIIO,uBAAyBP,OAAA,CAAQ,yDAAR,CA4B7BC,OAAAC,QAAA,CAtBAM,QAAgC,CAACC,WAAD,CAAc,CAC5C,IAAIC;AAAeH,sBAAA,CAAuBE,WAAvB,CAAoC,QAAS,CAACE,aAAD,CAAgB,CAC9E,IAAIC,UAAYD,aAAAE,aAAA,EAAhB,CACIC,OAASF,SAAAG,eAAA,EAEb,IAAe,CAAf,GAAID,MAAJ,CACE,MAAOR,sBAAA,CAAsBK,aAAtB,CAAqC,CAArC,CAELK,UAAAA,CAAMJ,SAAAK,YAAA,EAENC,OAAAA,CADUP,aAAAQ,kBAAAC,EACHC,eAAA,CAAuBL,SAAvB,CAAAM,QAAA,EAAAC,MAAA,CAA4C,CAA5C,CAA+CT,MAA/C,CACPU,OAAAA,CAAWpB,kBAAAqB,YAAA,CAA+BP,MAA/B,CACf,OAAOZ,sBAAA,CAAsBK,aAAtB,CAAqCa,MAAAE,OAArC,EAAwD,CAAxD,CAXuE,CAA7D,CAYhB,UAZgB,CAcnB,OAAIhB,aAAJ,GAAqBD,WAAAU,kBAAA,EAArB,CACSV,WADT;AAIOJ,WAAAsB,KAAA,CAAiBlB,WAAjB,CAA8BC,YAA9B,CAA4C,cAA5C,CAnBqC,CA1B4F;\",\n\"sources\":[\"node_modules/draft-js/lib/keyCommandBackspaceWord.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$keyCommandBackspaceWord\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule keyCommandBackspaceWord\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar DraftRemovableWord = require('./DraftRemovableWord');\\nvar EditorState = require('./EditorState');\\n\\nvar moveSelectionBackward = require('./moveSelectionBackward');\\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\\n\\n/**\\n * Delete the word that is left of the cursor, as well as any spaces or\\n * punctuation after the word.\\n */\\nfunction keyCommandBackspaceWord(editorState) {\\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\\n    var selection = strategyState.getSelection();\\n    var offset = selection.getStartOffset();\\n    // If there are no words before the cursor, remove the preceding newline.\\n    if (offset === 0) {\\n      return moveSelectionBackward(strategyState, 1);\\n    }\\n    var key = selection.getStartKey();\\n    var content = strategyState.getCurrentContent();\\n    var text = content.getBlockForKey(key).getText().slice(0, offset);\\n    var toRemove = DraftRemovableWord.getBackward(text);\\n    return moveSelectionBackward(strategyState, toRemove.length || 1);\\n  }, 'backward');\\n\\n  if (afterRemoval === editorState.getCurrentContent()) {\\n    return editorState;\\n  }\\n\\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\\n}\\n\\nmodule.exports = keyCommandBackspaceWord;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"DraftRemovableWord\",\"EditorState\",\"moveSelectionBackward\",\"removeTextWithStrategy\",\"keyCommandBackspaceWord\",\"editorState\",\"afterRemoval\",\"strategyState\",\"selection\",\"getSelection\",\"offset\",\"getStartOffset\",\"key\",\"getStartKey\",\"text\",\"getCurrentContent\",\"content\",\"getBlockForKey\",\"getText\",\"slice\",\"toRemove\",\"getBackward\",\"length\",\"push\"]\n}\n"]