["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_baseMatchesProperty.js"],"~:js","shadow$provide.module$node_modules$lodash$_baseMatchesProperty=function(global,process,require,module,exports,shadow$shims){var baseIsEqual=require(\"module$node_modules$lodash$_baseIsEqual\"),get=require(\"module$node_modules$lodash$get\"),hasIn=require(\"module$node_modules$lodash$hasIn\"),isKey=require(\"module$node_modules$lodash$_isKey\"),isStrictComparable=require(\"module$node_modules$lodash$_isStrictComparable\"),matchesStrictComparable=require(\"module$node_modules$lodash$_matchesStrictComparable\"),\ntoKey=require(\"module$node_modules$lodash$_toKey\");module.exports=function(path,srcValue){return isKey(path)&&isStrictComparable(srcValue)?matchesStrictComparable(toKey(path),srcValue):function(object){var objValue=get(object,path);return void 0===objValue&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,3)}}}","~:source","shadow$provide[\"module$node_modules$lodash$_baseMatchesProperty\"] = function(global,process,require,module,exports,shadow$shims) {\nvar baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_toKey","~$module$node_modules$lodash$get","~$shadow.js","~$module$node_modules$lodash$_isKey","~$module$node_modules$lodash$_isStrictComparable","~$module$node_modules$lodash$hasIn","~$module$node_modules$lodash$_baseIsEqual","~$module$node_modules$lodash$_matchesStrictComparable"]],"~:properties",["^5",[]],"~:compiled-at",1532351402172,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_baseMatchesProperty.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,gDAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAC7HC,YAAcJ,OAAA,CAAQ,yCAAR,CAD+G,CAE7HK,IAAML,OAAA,CAAQ,gCAAR,CAFuH,CAG7HM,MAAQN,OAAA,CAAQ,kCAAR,CAHqH,CAI7HO,MAAQP,OAAA,CAAQ,mCAAR,CAJqH,CAK7HQ,mBAAqBR,OAAA,CAAQ,gDAAR,CALwG,CAM7HS,wBAA0BT,OAAA,CAAQ,qDAAR,CANmG;AAO7HU,MAAQV,OAAA,CAAQ,mCAAR,CA0BZC,OAAAC,QAAA,CAZAS,QAA4B,CAACC,IAAD,CAAOC,QAAP,CAAiB,CAC3C,MAAIN,MAAA,CAAMK,IAAN,CAAJ,EAAmBJ,kBAAA,CAAmBK,QAAnB,CAAnB,CACSJ,uBAAA,CAAwBC,KAAA,CAAME,IAAN,CAAxB,CAAqCC,QAArC,CADT,CAGO,QAAQ,CAACC,MAAD,CAAS,CACtB,IAAIC,SAAWV,GAAA,CAAIS,MAAJ,CAAYF,IAAZ,CACf,OAAqBI,KAAAA,EAAd,GAACD,QAAD,EAA2BA,QAA3B,GAAwCF,QAAxC,CACHP,KAAA,CAAMQ,MAAN,CAAcF,IAAd,CADG,CAEHR,WAAA,CAAYS,QAAZ,CAAsBE,QAAtB,CAAgC,CAAhC,CAJkB,CAJmB,CArBoF;\",\n\"sources\":[\"node_modules/lodash/_baseMatchesProperty.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_baseMatchesProperty\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar baseIsEqual = require('./_baseIsEqual'),\\n    get = require('./get'),\\n    hasIn = require('./hasIn'),\\n    isKey = require('./_isKey'),\\n    isStrictComparable = require('./_isStrictComparable'),\\n    matchesStrictComparable = require('./_matchesStrictComparable'),\\n    toKey = require('./_toKey');\\n\\n/** Used to compose bitmasks for value comparisons. */\\nvar COMPARE_PARTIAL_FLAG = 1,\\n    COMPARE_UNORDERED_FLAG = 2;\\n\\n/**\\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\\n *\\n * @private\\n * @param {string} path The path of the property to get.\\n * @param {*} srcValue The value to match.\\n * @returns {Function} Returns the new spec function.\\n */\\nfunction baseMatchesProperty(path, srcValue) {\\n  if (isKey(path) && isStrictComparable(srcValue)) {\\n    return matchesStrictComparable(toKey(path), srcValue);\\n  }\\n  return function(object) {\\n    var objValue = get(object, path);\\n    return (objValue === undefined && objValue === srcValue)\\n      ? hasIn(object, path)\\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\\n  };\\n}\\n\\nmodule.exports = baseMatchesProperty;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"baseIsEqual\",\"get\",\"hasIn\",\"isKey\",\"isStrictComparable\",\"matchesStrictComparable\",\"toKey\",\"baseMatchesProperty\",\"path\",\"srcValue\",\"object\",\"objValue\",\"undefined\"]\n}\n"]