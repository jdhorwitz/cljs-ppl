["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_baseToString.js"],"~:js","shadow$provide.module$node_modules$lodash$_baseToString=function(global,process,require,module,exports,shadow$shims){function baseToString(value){if(\"string\"==typeof value)return value;if(isArray(value))return arrayMap(value,baseToString)+\"\";if(isSymbol(value))return symbolToString?symbolToString.call(value):\"\";var result=value+\"\";return\"0\"==result&&1/value==-INFINITY?\"-0\":result}global=require(\"module$node_modules$lodash$_Symbol\");var arrayMap=require(\"module$node_modules$lodash$_arrayMap\"),isArray=\nrequire(\"module$node_modules$lodash$isArray\"),isSymbol=require(\"module$node_modules$lodash$isSymbol\"),INFINITY=1/0,symbolToString=(require=global?global.prototype:void 0)?require.toString:void 0;module.exports=baseToString}","~:source","shadow$provide[\"module$node_modules$lodash$_baseToString\"] = function(global,process,require,module,exports,shadow$shims) {\nvar Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$_Symbol","~$module$node_modules$lodash$isSymbol","~$module$node_modules$lodash$_arrayMap","~$module$node_modules$lodash$isArray"]],"~:properties",["^5",[]],"~:compiled-at",1532351402009,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_baseToString.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,yCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAqB1HC,QAASA,aAAY,CAACC,KAAD,CAAQ,CAE3B,GAAoB,QAApB,EAAI,MAAOA,MAAX,CACE,MAAOA,MAET,IAAIC,OAAA,CAAQD,KAAR,CAAJ,CAEE,MAAOE,SAAA,CAASF,KAAT,CAAgBD,YAAhB,CAAP,CAAuC,EAEzC,IAAII,QAAA,CAASH,KAAT,CAAJ,CACE,MAAOI,eAAA,CAAiBA,cAAAC,KAAA,CAAoBL,KAApB,CAAjB,CAA8C,EAEvD,KAAIM,OAAUN,KAAVM,CAAkB,EACtB,OAAkB,GAAX,EAACA,MAAD,EAAmB,CAAnB,CAAuBN,KAAvB,EAAiC,CAACO,QAAlC,CAA8C,IAA9C,CAAqDD,MAbjC,CApBzBE,MAAAA,CAASb,OAAA,CAAQ,oCAAR,CAD6G,KAEtHO,SAAWP,OAAA,CAAQ,sCAAR,CAF2G,CAGtHM;AAAUN,OAAA,CAAQ,oCAAR,CAH4G,CAItHQ,SAAWR,OAAA,CAAQ,qCAAR,CAJ2G,CAOtHY,SAAW,CAAXA,CAAe,CAPuG,CAWtHH,eAAiB,CADjBK,OACiB,CADHD,MAAA,CAASA,MAAAE,UAAT,CAA4BC,IAAAA,EACzB,EAAcF,OAAAG,SAAd,CAAqCD,IAAAA,EA0B1Df,OAAAC,QAAA,CAAiBE,YArCyG;\",\n\"sources\":[\"node_modules/lodash/_baseToString.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_baseToString\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar Symbol = require('./_Symbol'),\\n    arrayMap = require('./_arrayMap'),\\n    isArray = require('./isArray'),\\n    isSymbol = require('./isSymbol');\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\\n\\n/**\\n * The base implementation of `_.toString` which doesn't convert nullish\\n * values to empty strings.\\n *\\n * @private\\n * @param {*} value The value to process.\\n * @returns {string} Returns the string.\\n */\\nfunction baseToString(value) {\\n  // Exit early for strings to avoid a performance hit in some environments.\\n  if (typeof value == 'string') {\\n    return value;\\n  }\\n  if (isArray(value)) {\\n    // Recursively convert values (susceptible to call stack limits).\\n    return arrayMap(value, baseToString) + '';\\n  }\\n  if (isSymbol(value)) {\\n    return symbolToString ? symbolToString.call(value) : '';\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\\n}\\n\\nmodule.exports = baseToString;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"baseToString\",\"value\",\"isArray\",\"arrayMap\",\"isSymbol\",\"symbolToString\",\"call\",\"result\",\"INFINITY\",\"Symbol\",\"symbolProto\",\"prototype\",\"undefined\",\"toString\"]\n}\n"]