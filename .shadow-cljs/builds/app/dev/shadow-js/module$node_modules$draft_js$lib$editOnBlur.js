["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/draft-js/lib/editOnBlur.js"],"~:js","shadow$provide.module$node_modules$draft_js$lib$editOnBlur=function(global,process,require,module,exports,shadow$shims){var EditorState=require(\"module$node_modules$draft_js$lib$EditorState\"),containsNode=require(\"module$node_modules$fbjs$lib$containsNode\"),getActiveElement=require(\"module$node_modules$fbjs$lib$getActiveElement\");module.exports=function(editor,e){if(getActiveElement()===document.body){var _selection=global.getSelection(),editorNode=editor.editor;1===_selection.rangeCount&&containsNode(editorNode,\n_selection.anchorNode)&&containsNode(editorNode,_selection.focusNode)&&_selection.removeAllRanges()}_selection=editor._latestEditorState;editorNode=_selection.getSelection();editorNode.getHasFocus()&&(editorNode=editorNode.set(\"hasFocus\",!1),editor.props.onBlur&&editor.props.onBlur(e),editor.update(EditorState.acceptSelection(_selection,editorNode)))}}","~:source","shadow$provide[\"module$node_modules$draft_js$lib$editOnBlur\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBlur\n * @format\n * \n */\n\n'use strict';\n\nvar EditorState = require('./EditorState');\n\nvar containsNode = require('fbjs/lib/containsNode');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nfunction editOnBlur(editor, e) {\n  // In a contentEditable element, when you select a range and then click\n  // another active element, this does trigger a `blur` event but will not\n  // remove the DOM selection from the contenteditable.\n  // This is consistent across all browsers, but we prefer that the editor\n  // behave like a textarea, where a `blur` event clears the DOM selection.\n  // We therefore force the issue to be certain, checking whether the active\n  // element is `body` to force it when blurring occurs within the window (as\n  // opposed to clicking to another tab or window).\n  if (getActiveElement() === document.body) {\n    var _selection = global.getSelection();\n    var editorNode = editor.editor;\n    if (_selection.rangeCount === 1 && containsNode(editorNode, _selection.anchorNode) && containsNode(editorNode, _selection.focusNode)) {\n      _selection.removeAllRanges();\n    }\n  }\n\n  var editorState = editor._latestEditorState;\n  var currentSelection = editorState.getSelection();\n  if (!currentSelection.getHasFocus()) {\n    return;\n  }\n\n  var selection = currentSelection.set('hasFocus', false);\n  editor.props.onBlur && editor.props.onBlur(e);\n  editor.update(EditorState.acceptSelection(editorState, selection));\n}\n\nmodule.exports = editOnBlur;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fbjs$lib$getActiveElement","~$module$node_modules$fbjs$lib$containsNode","~$shadow.js","~$module$node_modules$draft_js$lib$EditorState"]],"~:properties",["^5",[]],"~:compiled-at",1532351402144,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$draft_js$lib$editOnBlur.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB7H,IAAIC,YAAcJ,OAAA,CAAQ,8CAAR,CAAlB,CAEIK,aAAeL,OAAA,CAAQ,2CAAR,CAFnB,CAGIM,iBAAmBN,OAAA,CAAQ,+CAAR,CA8BvBC,OAAAC,QAAA,CA5BAK,QAAmB,CAACC,MAAD,CAASC,CAAT,CAAY,CAS7B,GAAIH,gBAAA,EAAJ,GAA2BI,QAAAC,KAA3B,CAA0C,CACxC,IAAIC,WAAad,MAAAe,aAAA,EAAjB,CACIC,WAAaN,MAAAA,OACa,EAA9B,GAAII,UAAAG,WAAJ,EAAmCV,YAAA,CAAaS,UAAb;AAAyBF,UAAAI,WAAzB,CAAnC,EAAsFX,YAAA,CAAaS,UAAb,CAAyBF,UAAAK,UAAzB,CAAtF,EACEL,UAAAM,gBAAA,EAJsC,CAQtCC,UAAAA,CAAcX,MAAAY,mBACdC,WAAAA,CAAmBF,UAAAN,aAAA,EAClBQ,WAAAC,YAAA,EAAL,GAIIC,UAEJ,CAFgBF,UAAAG,IAAA,CAAqB,UAArB,CAAiC,CAAA,CAAjC,CAEhB,CADAhB,MAAAiB,MAAAC,OACA,EADuBlB,MAAAiB,MAAAC,OAAA,CAAoBjB,CAApB,CACvB,CAAAD,MAAAmB,OAAA,CAAcvB,WAAAwB,gBAAA,CAA4BT,UAA5B,CAAyCI,UAAzC,CAAd,CANA,CAnB6B,CArB8F;\",\n\"sources\":[\"node_modules/draft-js/lib/editOnBlur.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$draft_js$lib$editOnBlur\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n *\\n * @providesModule editOnBlur\\n * @format\\n * \\n */\\n\\n'use strict';\\n\\nvar EditorState = require('./EditorState');\\n\\nvar containsNode = require('fbjs/lib/containsNode');\\nvar getActiveElement = require('fbjs/lib/getActiveElement');\\n\\nfunction editOnBlur(editor, e) {\\n  // In a contentEditable element, when you select a range and then click\\n  // another active element, this does trigger a `blur` event but will not\\n  // remove the DOM selection from the contenteditable.\\n  // This is consistent across all browsers, but we prefer that the editor\\n  // behave like a textarea, where a `blur` event clears the DOM selection.\\n  // We therefore force the issue to be certain, checking whether the active\\n  // element is `body` to force it when blurring occurs within the window (as\\n  // opposed to clicking to another tab or window).\\n  if (getActiveElement() === document.body) {\\n    var _selection = global.getSelection();\\n    var editorNode = editor.editor;\\n    if (_selection.rangeCount === 1 && containsNode(editorNode, _selection.anchorNode) && containsNode(editorNode, _selection.focusNode)) {\\n      _selection.removeAllRanges();\\n    }\\n  }\\n\\n  var editorState = editor._latestEditorState;\\n  var currentSelection = editorState.getSelection();\\n  if (!currentSelection.getHasFocus()) {\\n    return;\\n  }\\n\\n  var selection = currentSelection.set('hasFocus', false);\\n  editor.props.onBlur && editor.props.onBlur(e);\\n  editor.update(EditorState.acceptSelection(editorState, selection));\\n}\\n\\nmodule.exports = editOnBlur;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"EditorState\",\"containsNode\",\"getActiveElement\",\"editOnBlur\",\"editor\",\"e\",\"document\",\"body\",\"_selection\",\"getSelection\",\"editorNode\",\"rangeCount\",\"anchorNode\",\"focusNode\",\"removeAllRanges\",\"editorState\",\"_latestEditorState\",\"currentSelection\",\"getHasFocus\",\"selection\",\"set\",\"props\",\"onBlur\",\"update\",\"acceptSelection\"]\n}\n"]